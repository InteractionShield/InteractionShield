package edu.ksu.cis.bandera.bui;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 2000   Robby (robby@cis.ksu.edu)                    *
 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
import javax.swing.table.*;
import java.io.*;
import java.util.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.tree.*;
import edu.ksu.cis.bandera.specification.pattern.*;
import edu.ksu.cis.bandera.specification.pattern.datastructure.*;
public class PatternManager extends JFrame {
	private static String[] columnNames = { "Temporal Logic", "Patterned Formula" };
	private JScrollPane ivjLeftScrollPane = null;
	private JButton ivjOkButton = null;
	private JPanel ivjPatternManagerContentPane = null;
	private JSplitPane ivjPatternManagerSplitPane = null;
	private JPanel ivjPatternPanel = null;
	private JLabel ivjDescriptionLabel = null;
	private JScrollPane ivjDescriptionScrollPane = null;
	private JTextArea ivjDescriptionTextArea = null;
	private JLabel ivjMappingLabel = null;
	private JLabel ivjNameLabel = null;
	private JTextField ivjNameTextField = null;
	private JLabel ivjParametersLabel = null;
	private JTextField ivjParametersTextField = null;
	private JLabel ivjScopeLabel = null;
	private JTextField ivjScopeTextField = null;
	private JTree ivjPatternTree = null;
	private JLabel ivjFormatLabel = null;
	private JTextField ivjFormatTextField = null;
	private JTable ivjMappingTable = null;
	private JScrollPane ivjMappingScrollPane = null;
	private java.awt.Color bg = new Color(204, 204, 204);
	private JPanel ivjButtonsPanel = null;
	private JButton ivjLoadButton = null;
	private JButton ivjSaveButton = null;
	private JButton ivjErrorMessagesButton = null;
	private JPanel ivjPatternButtonsPanel = null;
	private JButton ivjAddMappingButton = null;
	private JButton ivjRemoveMappingButton = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();

class IvjEventHandler implements java.awt.event.ActionListener, javax.swing.event.TreeSelectionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == PatternManager.this.getOkButton()) 
				connEtoM1(e);
			if (e.getSource() == PatternManager.this.getErrorMessagesButton()) 
				connEtoC2();
			if (e.getSource() == PatternManager.this.getLoadButton()) 
				connEtoC3();
		};
		public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
			if (e.getSource() == PatternManager.this.getPatternTree()) 
				connEtoC1();
		};
	};
/**
 * PatternManager constructor comment.
 */
public PatternManager() {
	super();
	initialize();
}
/**
 * PatternManager constructor comment.
 * @param title java.lang.String
 */
public PatternManager(String title) {
	super(title);
}
/**
 * 
 * @return javax.swing.tree.DefaultMutableTreeNode
 * @param root javax.swing.tree.DefaultMutableTreeNode
 * @param object java.lang.Object
 */
private DefaultMutableTreeNode buildPatternTree(DefaultMutableTreeNode root, Object object) {
	if (object instanceof Hashtable) {
		Hashtable table = (Hashtable) object;
		TreeSet ts = new TreeSet();
		for (Enumeration e = table.keys(); e.hasMoreElements();) {
			ts.add(e.nextElement());
		}
		for (Iterator i = ts.iterator(); i.hasNext();) {
			Object key = i.next();
			Object value = table.get(key);
			if (value instanceof Hashtable) {
				root.add(buildPatternTree(new DefaultMutableTreeNode(key), value));
			} else {
				root.add(new DefaultMutableTreeNode(value));
			}
		}
	}
	return root;
}
/**
 * connEtoC1:  (PatternTree.treeSelection. --> PatternManager.patternTree_TreeSelectionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1() {
	try {
		// user code begin {1}
		// user code end
		this.patternTree_TreeSelectionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (ErrorMessagesButton.action. --> PatternManager.errorMessagesButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2() {
	try {
		// user code begin {1}
		// user code end
		this.errorMessagesButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (LoadButton.action. --> PatternManager.loadButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3() {
	try {
		// user code begin {1}
		// user code end
		this.loadButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM1:  (OkButton.action.actionPerformed(java.awt.event.ActionEvent) --> PatternManager.setVisible(Z)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.setVisible(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Comment
 */
public void errorMessagesButton_ActionEvents() {
	StringBuffer buffer = new StringBuffer();
	Pattern p = (Pattern) ((DefaultMutableTreeNode) getPatternTree().getLastSelectedPathComponent()).getUserObject();
	for (Enumeration e = p.getExceptions().elements(); e.hasMoreElements();) {
		Object o = e.nextElement();
		if (o instanceof Exception) {
			Exception ex = (Exception) o;
			buffer.append(ex.getMessage() + "\n");
		} else {
			buffer.append(o + "\n");
		}
	}
	JOptionPane.showMessageDialog(this, buffer.toString(), "Information", JOptionPane.INFORMATION_MESSAGE);
}
/**
 * Return the JButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAddMappingButton() {
	if (ivjAddMappingButton == null) {
		try {
			ivjAddMappingButton = new javax.swing.JButton();
			ivjAddMappingButton.setName("AddMappingButton");
			ivjAddMappingButton.setMnemonic('a');
			ivjAddMappingButton.setText("Add Mapping");
			ivjAddMappingButton.setBackground(new java.awt.Color(204,204,255));
			ivjAddMappingButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddMappingButton;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GD7E3D7A8GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E13DFD8DDCDCC735B8ED37ADFD220D3E283C3F28E8531ADA2C28E90DBEFC8FB5EAEA29AFAAEA2CD1290FAA7A92C50D15DAEA6F7291C82089B110268DC9B68DC9C9CB88903E42B7849212AE044086E893E5B76C85B6D9586D6E828B0170BFB3F34F5C3BF76F72119A737B1D5C1DB3674C1CB9F3664C1939B397A177C0F83ABEA5D790746902742FCAAF88396F93040FBFB79E0F38BD02D9AFA87E9D8458A94C
	995260D988F926771A75B94247DBB3A1DD87693AFB4C7A176077AEE1E8FAF3B07C88D0CF8C646D7BD34EBD7357F37EB85613C15387AA3361399D2089F0D600C80154DFD539C74287C3FA3B741B00BEC5907A7504661146BD8A7CE6092E88721AG12A9CDF7E53E149F8EE9C2339A1EB1FAC69B8F4F2DD43AF74ED7CBF4D119AB85EBF72F6EC5D21722FC04569446BBA2BD8543DF6FA00AC895ECD3C5C4E7DD57069BC46BF871B577F871204DDDFC45B2E695DD1662AB63361A1AAE0B47A33A46BAACE316E15135BE
	0548781346CC4A8FB2C25A1ACAF0BDCDC4AF79703B9C40180AF27E3623CE12433C699128FAA0201CABD319FCB129321CD1A71E574F2411722FD33D933EECC83782B0D93EDE0932C42721ACAD3504B60970251B750569085FDAC770CD106E87F026230C3FE8C4996DA3DF92624FDBF5BB8248981C4EE40BCC17E54CBE723C7EE5EA9BBFA9A17D3B9172F236187585G6DGA3G41GFB29CDFE68786B70EC3E62B965989DF50CB5BB1DADF62B2B43E1956D703B2686F2A4DC37B868F0D9850159DDDCE31106BC8861
	DBFCED0EGEBDB1F00F6921A723060EDF46852B55A56FAD72BEE15D4465AADF25B52B2085E3EC57BB68170FA29DC060F2578768C994F7A6AAD0AA7E9AB642D4DC0BDAFAFC4D932BF30C2883B7B3CAEC3C3162EDFDD5395E5B299DAB3E5D9180E9FA9A3BAF682BE84E085C09440860064CC54F15C71938B69786C9831EA0B3DE77C0A536272340C5B6CE073122EEF2B1CCF57DA40786EDDB29F534B4A934ABECAFA32C7D3AF4E8D833ABDDB19BECA364AFAE1F52F8DD8F757D6FF5B584E7B70D1BAD62CDBD99F26F2
	FCB445FB94F856376D94CF52BA48CBGE07433F4EC993729ED645FA8FEE41B5AC6F654210D68A0AF810075EFCFB971FF46AC98B7GC1G21G2B81E2819232300F5FA8B93E48F1542568DF469BDF329B1E225763321C9DF3FBACE303E22F45E533DC310BEEC12259D4C274FA45076F8FF4FC8FC29DE744B170109E1BE38CCA370C0AE0CCEEC673DC49CEC26392E92E49B6AAC28523CE814BCDAD5D85CF3B456D396834DABC22CC417233CA09CEA6AC3DD0A294G3F2B33093E7ECCFDEEA67CAE48C6DD85D5905C8C
	2417E723DE6EAA7D9BBC5F8463966DB5B52D36C1A20645B505B67AC4D38E31B8204FFC512C7782ECF8117B6AFE344324279F96567E30CB538E691C35DD9A1F5B55F678A4AD5F8E7890008800186DB8F78EB4752B4AA1B2A853DED5FA03AACD641EFF8CFA7D6AC85720D30FC1E5BAF51E714A747EDBBA97ED04F6E56E0079E5876A7E2B2586E613AD963708D6F85E8586A4DA651EE0347FD5C66698F1C29C73340ACE91E65CB10FDB3201EF14ED156DF34841ED67F10AA77E6A9498101B633FDB361361218C2535E3
	7E0FE9BECC64AE5B15F10F58A3FABC3631E1197FA9AA0B5B47953A2536A6D651B9935A588FB0425BFA7544AE051D999D0EEB63CE9399C1123D7E1C4E4BB3C03FFC8776FFD4AD0925D67374B7E9DA4E6F2CD5769D21DB0AAFDD1C0F9E7629E33E3E3E79BA6E28A3E3G7DE63A04E7F94BE8DEAC34AD9920A087E2259CECFFDEDD3F865FBFD736E2DA0732FC357D3F9BE0367177724036EDAD57366D2B655A366DAC1F5FF63D65DA364B72664AC99B9D13E30A3120ABA77EF150B1B6A6528149D98496937F56C45AE1
	9B33F97AEC56E15153E31B9685A1AC07587476A6E2539E789D1C03BEF372907ACCEB6F03C249C71BB4632BE525B6DDDC8E33674DB9324FE4B25DD9C14618E897C7C1D1279C63E39E06FF8F756F925E1DCAF1E3FBCD0435D00A4BCDAED1AC7240FFBDC0C69BD4ECB8F62C41609B3697B9E56A8113123A0DF4123B70E86F5192D6FE1149C24BBFFF2DE55C63F10C95D9D8296C51A53A069C2ED151DAF855B2E1A936CCFA0AE9B797B74B259D559240ADFAFAEDEE9B780742372132D24986F7896FFB3B17565766F2B9
	DC9D225B8D64EE5F2A354A937D49871AD5ADAA43BA520F3652BA0C8E0BF561226D1C4A2F44934CA79EBAC97AABF7A778FE00261D6893B3AAC9BE7AC449711FF258A5DDC35E6A1D540E1AF39536513F132DA3D74013655F6B13AF7C0D65EF677C7F29495F74B7642FEB514AB77D8D655CDCC9FC10DBFCE7DC045007B86DB745A90CDFAA7F264A6B3558476538A835AA8B1EF6053FE778E72A34EDB8390A7878EB3CFC21FA0BC0629BD6A69BF31196D22653E59B056911CCE052FA7919CA65FAF98464A7EB6B90F806
	83B05ECFCE12BC5FAE04B56DAE423F268E57522B01FE9DC022D4C676AE264F7CDCC2B7D70FF441008F87085E4566ADA117513172CEB5A05D886003G42F3D9F92BFC6812B9DDBC601381727398DDC99E236B4FA3F4071BF06DFA1C636AA86EF760189FCB4375C1C70EF22DFF7977831ABE06C018D4FEE41EFA5D54DFC34ADD877838BC340369EA659C5E6CF6BB86EDB4EC157A7468C9257FE13862135B60B9E4F339E18DE5953DE89765A7092CA42E1550D25FBE74C63D609F2737D9ED9E078BC324D313F408199C
	27A034EE8753BA455DF32FCD1C84FE3656EFEBC6FDED4EC37F7B7F4A147B8BB3B3AD3A2CG3AA95A4DF4E25CAD6BE65D6167A5BB6ABA2335E65414D3A59D136D8FDC36105D38B761EEC15C1A5DE82F4F3EC2EC1A6E3990976AADF6CF42FCD6D3F36EB4D9C7B0BEF39561A3F3F372EE5C3B78B675B965AFC13CGE085E06B28CDF49DC54A1E815C2A17508734F915BEE0A360F376187565G4CA71A6A895EF76640BE8B49FF150C4785678C34CF212BC92AA722B5D268BFF7D1F37FA4661ECEDD7B9E26FB679E398F
	F2CA32D2129ACB52D8FBD656637AB28AE8B66F4176E414AA5BD374B278B3G6F4B581E9D8D606E0525CFD65866ACDA2E6FB4056D7B45EEE57B567D402E593E1C3FDE53053C4C5A356AE539FD5EB77E2A8F81E06D33B7E0FFA583CD79AB583EDF7B354F8EF94BDE4176FD3FA1C3EE1FA4734869C3E4FCAEBC95CAEB6E430DD8778AA8F7832F7BAB1A3A4D5D0BF507B47A573D6D7CABE43C871CAB797ED3190F6F5AF7A3206FAA5CAB79503DEA5F95D2C746C3BF606DFB51F7FD7664CE056F6A864B340C8D43EC44E3
	509AA2BB4CBBD25AD2C36A25730E0031703966256C57846D45F577E375C4DF4BA19D893096A08EC048C75992EA965CFFEA734E337F7467A549E54847750337E5A9FC651CCF2CA2FC6D795A6B2D4BAA3CB39F77FC9AEA08BD697255FBC76D943FBCDF3DF7346EA40E6D951017398F6B7FE31DDAEE7BBE5FBA03D5E946272FD773952B5291AABEA95EB01177839ABE1838B9A976981CD0469EEB201CC4005C7D90736DC77FBE634D144AEC5A0F36F120114C7DDEC8AF8708GD88B3091A07300D9DFF4GED242AD6EB
	DE743511C013223C3EE7FAF858CF8FEA5056DF5402FC4683DA7A5B517332367E18AB9070FD47569E258E2DD0D6B0C084C0748154E1C3A951A171956B8F208EBF54C4F418E3GFD8134821881F4G61GEB8C2843605A5AC56A10B9A7FF8DB2BD389AEE4E7E027C78547697EF7065E3FA39CBD06BA599688C87E1BEB808FAB114913D10D846F89047499BFE6FG96A767C9BFBE351C3A033EFCCC064D25A8C358C16C1B9F52B8A796527187319F62EB49BB9D7445DD8E5B18C7C0BF7C7EBA926FBBDC36E15B9862BE
	C4F1038E97DD18337DA28BADF7B3141973AA167B5D7A407B886B6B357791FED62F3D0F90DFBF7F9E59467AC07B8CCC3E6DADA8DF814847F077F2DCB5474D50584D88E9A747FD1F62F4108E6338EE9ADBC7C3BA76D56C5F569A32D60A6369CE1AA6E30625FFF8D23D37B99F10F296CBAB5B4A6F16D447D2774F76D11E47F66F20FD61F60BEEBAC0DBAD9E0B1477ABCF1E2031BF53894131006B7957E99F931AB60F639459CBE0FEE9380D14216117FA86DD308A6F320C09FC8C761B15E3B0739073CDA570ECBD04E3
	70A393685FAF9F42B8FC59A41D5BA09D81306690764DED5EC03EF48350A49E726F8BE90D55985846CB9A35ED3C32110CB737E35CB5A82A6D381E3EE3E6F9323FBB6B91C7098A994DE94A6F313806C53FF150C179D9DEA07E5E46C0E305754F534A7E69107B670FC7832CFDC84F58D93F4C5528FDA3D90727951875FB8A30DF1AFBF04EA8A940FE0926FBE8A3108E8288AD40FEB96B97DBC4C25E9AD296404602C07D925E9438DFBE55245DAF1FE98A5CAF2B1A966E172FB4856E17B5CD8B774B93CD73774B038D4A
	F1D34647424020DA67A456918EC33CF398F57EDF826A3C68B06A7C59E97A6E9052B3G4B8F234E8F1729F59E81F951G31G89G4907FD754E643B5228146F8477C94F162A4B4BB982FE98209A4088E0BE62DB9E5347CF1AC97C6965691F53749437C731F9BB57E95B18D51A3858BE0C174EC7070161B5016F57D0FFFF81A62FC32908FB0062B62588427329580EFF2FA2BE4CAA8ED9466DB08DB95C62F927743A1068628861FB388AFD0B67886E8DFCEE124C35C3AE4BA8F4DB0FD39C94F42F915A5FD4E17FA482
	ED9A608AGDA812C2F619A4DF61216E57350B5D04CEB64AC4B33E7842E5B7FAEA373376FBE99581107CE0754AFB299BED21C2FBDC6FB1CF69BA5E576304C0C72679472F39796FA9EG52E6GEFA15AC37804327F16957A76550AC27FB1485691E9DED25E6AC2757AE2BB452FADD42FAFBEB4096B0B7510D7F794675AD09A2707C3FAB5477D70824E49B1C751463FD803B61EF8945B740981D2E6616BE6FD93C07F6B582653BD4AB6B9812FFB1D35A3941E912F87EAD3B9FDF7987DBA13BD03631BA8FE3D824F5A74
	CD6A57C8BA9172CCEF207CE63AA6DE8D69980EFB106262A01D48F15B6A89AE995239C508FB2C855BDED804ED7F70A0365DDB04EDBF3F0F549D896935GF1C558762F8B4A36A781BE7B98EB2F811E65478235FD74BA350FE36A36CFD13C79183A6DAFCCE35B3D103761984ADFC7E36326E250C7B1626E243891C8FBB96EB7942703F4984705D7E35BA3B9AE034E7342F15051F14465D05EC2C857F11C09623AA0ED6638C74A50366CB2AF2FA308639EA8217B2F100EBF0EE3769BF45D2D98E645FD36B12BE39246A5
	B91560F197371E6D69BA5F53B6F03EF3601491FE30BD152784651E0A30E1A2601ECA52F1569759A56C19147A15BBD8FFB39989CFAB644D1490DCD835F29F084858174A568AAC7FBBBE79E42EB9AAA87305134AFCA26B71F4E5FE19CFFE3A021F356B0DCB3817EB2A7C32D0F81FB160D931B5D2FB9224670A3FC65D517E1B6725BD616355CA7D2C2ABF255387A847D0AA1D41ABD51FE37820F93E353139545746BD2538A712BFC8ECB6381459F2BA377157A8BECC01174E53D8F0CFAE9272F24B50DE3EC8ED528B69
	900ECB1D646B08B29C0B5B3CE40D301627F3E91A3C6BE06930490562F9423B1498DE892C0EC7962C635D3CE7E7E36533DE725E610AE5705A304BB1BEE645F974DB543747C19BB6823079F253851CAF771CB06B0BG0CGF60010937CACC20D32FFA3G9FFD0269A1961E89A7827930BCB3692F64936A7EB5D0FCCE393AFFBFB5007DDBGF941655817FF27B16CC6C88B95085BE0A23882126638CB3D68DFAEF35CF8855A0133825BD3C3670FB0C82F8208617853949FD7415EC311F7DB8C9FD33114F55EFC00F512
	5FB15213557174BF2D8EBC2F00E54BF6B1C9673C51B1F154B1E69BE4B671BE0A7BB900D0093E767583E4DCF8A0E8E73151E74F8A3C0C0FB5E85B5689BAF766C09979GB315849757523A40F8C8D5C0BB70DC86481364F7D6B27B40F98E466720528E57C07E7ACA26430D70942A8259615E7D749DF495ABEFAF4717D23CC901E7F6F8114E65A43D9C721C55E8CBCF52385EF89266341308FBAB055A9724C3B9EEFDAA41C5C1BA16637A53508E93CE22DD3969DCDEDD83F3B300278671F3943F9C522BEA583BD306CF
	3F2EE5A304CF0D2B5640E901C9C1476A582FD90756591A457A29F4954FAE21274C5F8E2FD25C63G31B5E807E1E53EF698F6CE36C37D89EDBBFC7984A9A79E4AC82CC1BB7CE2B55AE1FE2D3FDEB09EC0BBAC811A56DAE607A45DDFAB5BA12BFB7F845107B8C6DE69DB25FAABA6B0C63056227C7FDB695F4E13341DBF8670F23A22AA5FF6FA5EA46DE474BF237441C03B3C965B73DA75FC63AADDB52E2201AF36D69ED789FE6D71167A3767FFCA787B63DA5C4FBCE8A43834BA335ED0077B0E8D6DEF403357F2557F
	ADB0A03BDC8ED84DF92698161E0E106C4CDDFDF367FFB3CC9877AC7F6C7DC2FF4829006F301B6AD8DF1B25E7C9E2549D64495A721E8EB26FAD033C8800F5G89G49G39755836E56DC4C632B38E62B7FBBC1641917AF69FB74C49ABED99CD96212C6C07BB09242C0C9F369F8E249FA8619C4433672FDC9587BDA64B30007B2791E63E6628C77F71B44519A06D2CC7FF70AADD0768A09D46F147A80E6C1113F758525E28A5505CC2F8EFFAAE2BD74EDF43816BF8B771CC3A220CDD42EFEA48DE7895070BEE76EC2C
	27F34C84BDA7893FCD8DA47D4A24C162A9E970EFDB2B04E365856FA13623B89DA66D85BC5CA5F01A47AF9C006718B8E960AF46CFB96C8ED7E1D9C9F91184C725F7G3B3A518704B560BA2139DB3DCEF83F200C735D5D6AF5025EA77F7EEE75BA6123BE79BF6AD62F9310DF5ACF2F4158B83681EDA9134E55C9104EEEC45C5D8D3876AD61B847G5AE1EBA35A52DEEA07A3108E6138A394C77641483BF0067B4C403B09E7C87964995228ED1F521958F7D5875A257A4C33B2FF176069D15ADCFE93514BFB783B3A95
	A0DF94C0A2C0DA93EBBF637B23097059ADD30EF18F72ED3B08FCD6C84FG2CGD8AD71B13F2B23B16CBA40EDG48EFA638108A43BC6D48ECD65AF46E2BE4DE6C31CC0878021161B7F5923CFC2A8F713354BE7084A3BB63B0D529F546415A0CED3B3F0EBCDFF33CA60D17CFDD10474BFF35ACB4DE4AAB0E8A87A82DC063A976AF31D18B474A7FE037A0207F4FF7237F5FF8A6C230BE7F8F5DA1C15B7FFBA53D2CED16572B7DAFBDA759769786F1DC88ADE86F47C49C97859C7729A19C976D9C7755FC9C9717DB505E
	8F6EAF07E7B024438122GE281928132CF411882B0825881F4GE1G2B81561FC27EAA4A1F8469BD2DD08FC0BF0097A094A08AE083C0B2C0FE1BD9DF87F0390D1DFBE17C17762D3B49F110AD4992A649234EB7CAB852B66AD72534CEC19B5B624FE757A80BC0220A967595F81CFF60265BC676C4481CCC4EB06C55485FA9787A029D52B3CFC123F566FBD7007A32D469794E25337172FB415F3FE46A51CF84C19F078244G44C97D4D781CA97E7E656E9464CBEAE37EA567B45872E9A55F6FD23563668C3ABE2983
	5A765398E7BA52B04E741C766F9F3D24BF0CB70301A66C349CB7C71ED647192BAF1333344DD6EB074569340D8DB31F43725E1EA1BA6D06D0F9C2744916F8AB27C93E4649E7691C6F672FEB1D890BBA0D673692FB3572571DC63D5CD6C6FD1A08BE6D87BD82177B03558B79340A8A0C81922AF12FBF9E4ADE1A1F7B0CC92E53B8C14A9832585D723B5CAEA6239DE5FC6022CC1F3EA89917A64FBD3DF2793FAC21EB945738747E6C081168113FBFE3213D94739EB392DD13FB81B60B5DB6CDDF6674G6158B00B0F5F
	6AA37979E7404F81DC86F082684EE05C7DB9A3B9D3C9EE2579475CED56E19177FC313E659D015FBFFE24E3617BEBABBA6818F000B90D1272917F698EB2F6BD8EA7C5CAE769BA08BFF05906C7BC0CD442BF52C174E79707A81A4D5BDFB79B820CFD6A774EA8676DE4B3E90355B6E183C7E0F48C32B7E0ECEC66D9C8596F079ED9F5866DB548CE76882458153E93E678C18F7559A00772C5BE4BFBE622901EAD54571C368C42BAE42A185E3E930D0EC9F27E3E85F4E8E77905C759FC9BFCC239BF9CEFBB2FCB95826C
	B3CB6D09BD235EBFEF1944B111560E72CFCF26C97AE2754CE6AB67755549D65D4EG755435CBF7345B65F9DD1EAB76F4AFF5DD49FC273E96FDE7F8BB0B69D643B3261D1DF5E0B29F28777739157548978F3449G85E7412E4FCA6737E87FBDCAE36BAE40DDA6783384F757401EF9E4E2755D19731220FE8F49DFADCAB417D2089DB0D76826F64076303E50036F7756C1FD1967703DE93A012CC7556FAC0B5984D4D35366999C81BB1026A34927BD57036B1A26F3783E6B2809146F0574B2001567700C79F4AA76E3
	7251C7857B11914D779279BF6955C51F136E691F137B51F0846F3017DD44BB6C06B7A196FA9365AFB57B3CF3A50E2E26660C4BE6ED318C9BE94FB01927AF224C4B5EC419D752B257C2BA8EA089007939BCF26CC25267550A4578D1690CC0851129876A9C91B0BEAD76AA6DB8E615A7209D679825B33CC6DFBBE672C7D662F9B2279177DF5A4B48FC3C9252EBG92G048E33BE97208820894084B0829084908A9081908D908B908F1084105D09FE7649EE72CEA9505E0D24D46AECDD96F6CE0D597C86FE86425049
	46CAB5BC0D1D6CEC9E23699579DA271345A2B370DCA65130F1310E4656AB81372A93576F6B738D92DFDC27FF4C3139D369B36F69A1BAA7E7BA0C16AB221D63DF6EFFD1421B40711F3609F6AB4FF39B687AE85061C4A606FF22FDBB6295CC52797FE69237340A6EC1174DC97CB265E4F95FCD4D734D73B9BFA5795D419DF49C636DE7D6B14B7B5A6B3BFC72644A25338AC344E62508C8D16F67DFA736F15A619A35F81465250E6F60F8F5D937D76E144B5210733E6B3BE4FF23F4A9D20C65592F0C21B24F333EACBA
	0FB15603D94A7CA6A9FF04677FA0DD0BFF0667F7E6E871AF6379DF4E5562DF81CFF6B627B8CBFD8E19642F067C98DE46269BDAE544737C23FDDAB2A4717C3AF2AD7E6CAE4C3F2DDAAB5F40735FD727D5FEF9973661058A2DB634C37E65AE3C47D222C75F6E81DCC4977A466A295704F9FC7BA9472813047C12F7E7FE462BC7BF995F05FE7281DAFE7E85108B40F8816B7DEC8A7AE4AB6042AE60F908BF27E0993197300C432904B63B9B66C3003AEE74356B4AE5DF5B11367838BABC8DE388D377E263EABC5B3332
	C260FE755757512F06F4237C2F75A1EECDB72E27B7796CCFA783BE27E77E3DD2696EC4DF60D8F424EF61D8749DAA0B88B124E94AA9455A93FD74DC705010DB64B16F753E9C0EBB6B6EF238ED4479B03D4619897DA911FC3783F5DDE4A14F321292E97F7BE2A5093F8AFAF0AE486EA7B1F72039001C2BE791BC46D9E7A6157A2906F20C8B680755BBDBE5002799E8E7G4281D68344G4483A4816418D0261063733DDB601110E206E2F67AF37E5D0DA2A84BEA627DDC4777E7CDE82797691D30D8C8EF84C83B0836
	7E0FFA3475FC4019AE62987BE571DE41AF7EE0A30A059F121DBDD00FF505DC443AE2E919EBA03D81E073C59C934FD54BE342BA3018B141E20D6FD4AAE38D92BF84BA83125DAB6D5D74EA454CDF6AD9A8E6F676EA1D157F5602FC7BD5E946A718169A233377359F25B1E7C82F3C2F40708FD0FC28824F7A7038897BF08564E576E19CF5141E1B35C3BA98A09CE0B540FA004DFDE8FBBFB8DEA2ACF0DF4264F09A4902C9F1C41E352F7A624DFD936774CD724DAD19CFBAFF53CB7413592F5667E10A4F6DD76B73E1B9
	A607BCDDBF6A734EDA83BC93A01D7616D9DF885084E08230838481043E05FAFD2B142CC1830DE9B6106481AD1D19717BDE4FAAA8EFAD408600C4003437354E34DE1E673BA103E58B7BE2FB19763E002B4CFFDFE032CCFBDFE036CC39AF40F0371791DFB28C71F5BF273B1B635E623890DAA64175592CF40D41709F20F291FC3BC8AAC4FCA815EB12627AA55CC7953837A45CA74B487CGCD9EF1381077D374DD7B104DEEE76907A80DED8C26972E0FC8AA234DE9D1487D88473D456DA44D0A7EF78F74CB575B68FF
	0DD6740941EF23CF1C2634510486A071ED743FB7C434354CCBE0CF17300CEF0AD806779216311952C6C2FAADC05CA5742B29645A1864D79F4DDFFC2CA16C43D8A369922E7D2B7725E37F8A7C0C7ED000B37AB4A0E7E5BD341F1F3F3F0CF3486142G6706F9404EF8633210F764B236BFFB8B6242B96E4E8C3C833D1E63FE1F0BF4B9FFC75CD09652357F1D47E9B3C4F7C1108E8508643485F3483F16634CFD48AF7C035F5BAEC7DCB5472D2EC6DEA747FD238E69D6F2DCD5A552457D83657970AC11E74F00D9DF82
	50BE0071D8257E66662856857934672859857934FD6AABB4C6B68F28FD6AA10A378F28FDEA049E6D5C8BF99BF8FB9FC9393939606BB749173CE4BE562E7F20F1FE13D95D5ECFD23C512CEE6F9B29585EFE480BB2E3FB6FCFD356EF30405A43B2FFBC4978FEFBDDADF7BB70DD86F08268GC2ADDAF6D15467F76F82682281E28192G12D5FC6C5DDF9A3D0B16F305350B6136D2DC6195799C994CF31544FF3A251819517DE392F9B3B86F60A4726625A2EFF0D560F96B5E2A05672D50AA6DF96BE3D57E7356FDD55A
	735603D57E73564334DC17B88CAB8DF649CC3A2FD3C562CE36AF4ABFAB02679AEBEFEE5C7EF1C1BE6DF1DB64F707E9F1F67C98DD8734DED15B7177A83E6B0A5A0EAF55219DDF063C68ABE84756856F89EB5B316BA6799EDAB21FF46F1CFEDB21E0D05D5E8B94DFB228EE6F13FCBDD487F96103987B7D126EFF27D94DFA83C0AB40E5GA7C03095E33E161364FED220182F5B6140E51C87E2BEE578A75DF30C5EC56C4BB6E63791AA7AC5C15E7E7B68BBB376BBC2713B42744FBACF9BD8771D37348E263B321A403E
	60E40D765D3A469A6DFB3DEDB573FF9F2C23A6707741CCB54A6F03C9674FFAE5FD3F21783D6A622D577D9337348E697CDFEDE05DFF38F6E1BF9CDE2B6D079F287577438F55EA7B614F557A7B61C725F2DD7C32AF43C755EA79E1B64F44D4629D1DB0AB1EE3492B42BBBA119CB7DD05E76823B82E1F5F51D947F116D23C23E390797D8A6B4D797ABD8B72E97B7A8B8B72E97B3E5F52B5C7392876FDFF2678A6D16D7B022C687B0C1097495B2B93EF4EE7FF60A6799EDFB29FEB5788FD0710BB24EE6FBB94EF98D237
	77AFFC6DD584F94B06787973FD4A7AB783BEF3F8B1B1DA64FEA5DF3E44D3A2BDDB6159BF2CE597CFE7A9796CAA1AA0C8AF87D82940B33E1DDB14FCD1D27EBA69998F4FA44D7A7EADC34917BD62CBE300F47908965FB339CA3EF609663274F442D32749F74D27FD218A1A88789DBD622FDBA96626EB36589175DD4F7BA8BEDE0117E26E99DC0FEF063CFE9B766751B99FBD59A4BDC94FF8F8A659346496FDE2676C2BAABDC13A7C2A961F37DC4BFE5BA55A4B70F4EA72FD45E7AFDEA75104CA4F88F8C6EB72FD5BA7
	960CD551A4C0BAD9132F0E6FB765DCB36B8BG2A2F49F446EB017AA56B86DD7BDDD377CB9E45BB2F297B65233358AFC11097FF8D7B4510A2F0D90EAAFEFFDEFF6B6755477F85F5FCBCD5EE53CA456F5254DBDF7739DBDA871B9B23527C5708DFCDD32E9199AEFD06605A6D90B35BF1DE6D24B8A72403B86E8BB3F81FA804633EB407F3F2B847AD27E70793A11DB60A38D3FDD8479E0E3B3B8F6BA8623804BE2C231A63FA9B308EA347FD20946B889B457DAC4B91E24752F9AF3AD54970795E97E5BCEED5CA7D70BF
	F5F23F2FD77C36545DFA9B187E97545159A03729CF71BB2E7E56577D6CAD2D03451A3F1B67FBC34F54AF9C9B3FD02F9D9B27B77847465B9A34E3631C86E5EC4C4E147C0546391BGA2C7F19F383C11681F655FC7635BE812B74A4F394EFB1FAAD585C94017BDA65F27B20C4971932B635ED25C23AE9AC31F3E59AA5B40730A5FF7D97F857E76DFD04758105C26C945EFE16856577D72AD2D03793D7CFD68533726A36E60BE655E9D43FD0B6E77B7C13F1B4750E76EBAC06FDD3FE156FBB84EFB00FF770063BECD77
	6C57C1BA01631233701EC2B24735E7A3EF3683F1B6FA8663B2243D9C370A62C2A09D4EF105DBD03ED59CE75F02722D6538A736E09D319C770BADA8DF0193F11F48C0792AB9EED3867236F31CB597658B65389773D016880E3B100732C4F35C6773303C980E7B5AB614A57F9D445D4EF5D542F15F49427B9BCD9C7787BEF71A5E4171797199727EEB85CFBFC853EBF83AF426DF4A3FF5F6FCEE863FB7FF6B6C38E98EF59E4F75211BC31DA7F15C53DCC7E9AE44FD2597F5EE6238999AB70CC0FA06631E68C35E900E
	7B65896C7F8D9CF7EFB9561B48F10965481B4CF1F955D82F510D38D80AB3C3BA08638CF49FFEB924D7F0DCD6A3169749F19F235F8490BC9093F99077D49D362308630E55A3EF9D47FD127206C0FAA5477550B9A78A52F19C779045ED06F47EB86252695CD38269D60E53713D1511F134351DB7681DC61E5ECB536BF87A3ED974F704665658E2942F63D658A3FB271ACF63DA5F7B51A7A86E6BC4F763786ED51C713D9F1D5DC43A0F51EF2074E99370FB826773F5F3B81F57CDE85FDBD15E776E829A6B04FCEF45BB
	213E3772D02F7F7D682F75629C2F1B40732CF6EA77CF8304CEE06C912F10F5E7BFBD6F8AF92B382C238DA8EB1C062C29AAD9B783CD6624ACEB7E24BA7678CF9EFB94CE227EF6D651FBA393F8EF64274D82EFDB47AD38B772D40BDC7E83257E77D8FE361F6CC3DBEDEE275DB2A5DABBA48360EDC822F368CFC97FCD229E3FF40A1449F4F66F815419F1F2617EB5830DD921B34F243AFF3F1ACB3F536EF0093EF722FECC672CA0208F81E0770D8FE793DB0C18447E9B48667D27A10BDF7FA9E4A1FA49742AE589CA49
	21328C0E3B1B8787C5BB79961A434564790F9454CB2E977B767194F6DE5066A1564968FEC1F1A43F400B36F9014E5D3F82A87722CE5F5FAA6BB4FE8B3623552B2DD3E58C2C56E93FD7ED07D99928BB2B97F5776D8C22BB1D97F5171609F52E5628D39DF747F8FDF59767D767FBF3310D9BF93BABE96C7098C0B2EF77F81B5C6E4772D0066CA96DF6278B729DB74314EF3B4B2754B27C5FB6ECF75394367B21AC52EE73944A74E79A13AC07F478946AE22B00F2C48710A3C3A1C7AC50A4CC49F2A4CF296D6851BAB2
	B6956752495912E617E8114EF2BFB963F3CEF91A5DB3AD19C699EDF47EFF0A14B10DFA6BB8AD6BAD197BD85334363CDB67311711E9355EFE590BFA73CC23ED7FFB1F7FFD7FCF77513F03B40DFA0B6FC3B956EA48112A12E343342F8DA57A4931239C5B1D4C5BFD780C5C6E0C8AEEAF57355B7D2252DE2E2B6C653A3A3E06EAEEAF57315D7FD7BD3FFFCC27F14E93C42F1C276A246F9C793CC266D79BD1E6E7G193394BA52818D8114B9743A5A369E29507617CF5058E88550C7DEC75B5FD6CFE3176B58DF2D75A8
	CB5A0CF6FFA9E559B3A34BC2F4DAB4231665CB95017D6577AAD0CF55B328272B1564CE550468725886ADF6F6892245626AF258ED03D3D2BB6E24319BB9FB5C4E793EC67FDE4D0843E51BA66F297DB87977DAA8AF59F050F15E7CAA7FBB3EA778F7AA574C30BBB49B6019B8436EF5B3DDFD046FCBE44EEA775B8E052D6583CD492C5CEF2D33EADD3D102D38CBC27FA08D3BF3E03C213CF350B54BE47040B3F8965BF0EE064690960CA1EA955F04FAF8EE71E76B74821E2D8B1FDD6A7D58DD0A6F7F7C3857BF2E3823
	0F4A68C299335F14695FECD83C0C9FEBC09957AFD946F8C51D5F5308FDF69C20B20E3DA65595FDG6B4A3921D5975EE108B24A3F9F69106B38175E3971EDD371953BE5709A4B2F4DA667ED97FB67D37ADEE9B64A542EA993367509CED90E4894EC97CBBF1B027705D9FAE48B4DF7E33B73B2300E209B68E76FBFAF17D71EB1FF3B62B2165E2E0ACC2CF3753C6D1AD5FC7FE5C5AE4AAD454BF9B4ED45F67CA58F4BCC1C374C64EE394C5C857A6C2BD9CBE99BAB7FCF0A7B6A3F1953A8FFF24466113EC7DB4347E061
	5CD26D5BCDDE0DC9BE6709D91F3B903E67D8E92C416A5BB90BE7BF4DF37C7E729C55239375F80C4B94BA07767066B139CDBB7A6657D9F45F526DA12F9F6BDC97C08FCC0EC345329CC74AFD652E2E40B2B20366AB63B9C59943557337A57FA42DE3886B68E944BA1AB46BC03F707D63726F189239BECF5D7C75996A172E3B71FA1449BBEF3BD7A86E567E3A825B4552E115A5026FB7DD95DF1FAF6EED6BB61DBD55EC9C68B955FD5EE8ECE96E9E68EC83A4637DD3E559BC3C6D673B4F3EFD3E53644F4D4F6FD5613B
	57C810BFA1884FA4337783740E43EDF8A6793B14369F52CE00605B10B606FF6BA17C36250E2319B2F99CDD3D9E609CB91D23D9DD3A9B3826DB4F657A7E9C7D0E666DE6FDA1C0536D38BF3445671B437D00375F3E18F39A77797C0D0EA060D93EA83EEF9CD0722D841E28C571FDB0DB49378EF8629745770A4FB90DA460493EE3B1FCB519BEE70C0127FCD1FCAF64791C6FG1E4B0B62EB746987A77068964537FB16700586200DGFC749DDA67964AFC6A0B851A04C55577CA3F4FDDC7604951AD062F3EC249D7G
	BC550B626B77799BABC660B1AF0AEF5A672C2B87F8029745E7293A39F3E90E8579344F252DDC10CF8D6C1CC8DBB5994FE1BA75B92DCE0ADF29D31F537AD1951E53DA85F9FB6E44717FDD1F73B2B300DFF667E274F44F0D7964DE21D186136F0CC064D8FD27DA6EAE0ADFF327DA6E9F4F215C6BA02F7CAE5C8B5FA760BBB6790C442B823EE313F1DFEE70277B6F86FF3A8D877C691EBA60CF97116DCF7739ECFF3A528CFF3A4A8CFF3A8B197EF43D197EF43BF77B536D5D6DCF572B2117CB9AFAB9C6632CD050E784
	576944AC3EDF0866388F5F40F7B1719CF7D6230ECE0DBACA7BB5F4506FCFE72A7027FB2B421F4E5168CF67E97427FBFF3DBF5D076A15F44C065F24F7E959EF136277CF2BEE7DFB68E7EEE99D52B91DEAFFBDEC2A7657D7788D6C77243B50AF50E523A4EB2F62774F67EE3DEE12EEE99DACA6EC2536CEEE897439ACCE369FF3E99663267C3B711B676F1D457D0EA240B581188102G426F467D4F689B38EF9C4D793E4877C95681AE9EA0AD582CAFGE88D46F50DEB96573DACEE7B42AC461356E07CA668D3336AEF
	027EDED0FE53F3174FB7AA7C3F895A6613CF76B7499FEB1173A7FD72155F84E5B27E68066F9A7627B7D046B0AEE3561C5FF7CBFD6A281F1BDFC6471CDAC6DF7ECF4C851211594B6A591BBBA37D0BF967B0ADF8096A24E4BFF9319331C9C87788BB24CF209824C3749EA1657CB50F1057B36218B450CF509924EF50953A0FFA04B472D5CD37CB586E3B42525F7F529DB9771E98CF91361C96368CD96C4E914BD9A11D7ED9CD2310B2687688FB0D0465B8309C9FA4AC47A9E30F53B2A856DE92368E39062FD0F29060
	5269CBD088CD3DA35C90369805ED1E91FAE786565A9E61A53924AEF2F3C64A2875BA21F5428BB1B1B1CE7867A62CE99266CF946392F6F0314F525B3EF193A7EAD27F773E5494A16D2C30051D50BAAB2411E3D6A0BEBD05F5D6C875B81C346CEDCA70A97F85DE63B629077119BE8F9D02B0CFF95A1CE9CAD88CA7749C79CE2AC748EA36DA8D523628C7584EBEC20808454A6A915249DD0C9A0F3005FEC588FEE4ABDE3FC0B2CB7E4A8F24B2257261E7867BDCCF4D826A5BA2D5B51F7A5295A225F32C90C029GBE5C
	C8A7F726B677423484F6A8EA02FF81EB5216F347BCE5AE0CFDF7AD25D231EFECC435A93FFF17DF5E97706F47043ED7BA0F7EDE799B9B6C0E5C44C162DF93G1F76BE3C9377CD83595C8A74DD701ED10B5D6E31582FB50FD949B742DB26BC22FCCF6B7AC1D23E9BE924CC695B8287095CD795BC7F9FD0CB87888232864B8BACGGBC0EGGD0CB818294G94G88G88GD7E3D7A88232864B8BACGGBC0EGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81
	G81GBAGGGC5ACGGGG
**end of data**/
}
/**
 * Return the ButtonsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getButtonsPanel() {
	if (ivjButtonsPanel == null) {
		try {
			ivjButtonsPanel = new javax.swing.JPanel();
			ivjButtonsPanel.setName("ButtonsPanel");
			ivjButtonsPanel.setBorder(new javax.swing.border.EtchedBorder());
			ivjButtonsPanel.setLayout(new java.awt.GridBagLayout());
			ivjButtonsPanel.setBackground(new java.awt.Color(204,204,255));

			java.awt.GridBagConstraints constraintsSaveButton = new java.awt.GridBagConstraints();
			constraintsSaveButton.gridx = 1; constraintsSaveButton.gridy = 1;
			constraintsSaveButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsSaveButton.weightx = 1.0;
			constraintsSaveButton.weighty = 1.0;
			constraintsSaveButton.insets = new java.awt.Insets(10, 10, 10, 0);
			getButtonsPanel().add(getSaveButton(), constraintsSaveButton);

			java.awt.GridBagConstraints constraintsLoadButton = new java.awt.GridBagConstraints();
			constraintsLoadButton.gridx = 2; constraintsLoadButton.gridy = 1;
			constraintsLoadButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsLoadButton.weightx = 1.0;
			constraintsLoadButton.weighty = 1.0;
			constraintsLoadButton.insets = new java.awt.Insets(10, 10, 10, 0);
			getButtonsPanel().add(getLoadButton(), constraintsLoadButton);

			java.awt.GridBagConstraints constraintsOkButton = new java.awt.GridBagConstraints();
			constraintsOkButton.gridx = 3; constraintsOkButton.gridy = 1;
			constraintsOkButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsOkButton.weightx = 1.0;
			constraintsOkButton.weighty = 1.0;
			constraintsOkButton.insets = new java.awt.Insets(10, 10, 10, 10);
			getButtonsPanel().add(getOkButton(), constraintsOkButton);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButtonsPanel;
}
/**
 * Return the DescriptionLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getDescriptionLabel() {
	if (ivjDescriptionLabel == null) {
		try {
			ivjDescriptionLabel = new javax.swing.JLabel();
			ivjDescriptionLabel.setName("DescriptionLabel");
			ivjDescriptionLabel.setDisplayedMnemonic('d');
			ivjDescriptionLabel.setText("Description:");
			ivjDescriptionLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDescriptionLabel;
}
/**
 * Return the DescriptionScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getDescriptionScrollPane() {
	if (ivjDescriptionScrollPane == null) {
		try {
			ivjDescriptionScrollPane = new javax.swing.JScrollPane();
			ivjDescriptionScrollPane.setName("DescriptionScrollPane");
			ivjDescriptionScrollPane.setBorder(BorderFactory.createLoweredBevelBorder());
			ivjDescriptionScrollPane.setBackground(java.awt.Color.white);
			getDescriptionScrollPane().setViewportView(getDescriptionTextArea());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDescriptionScrollPane;
}
/**
 * Return the DescriptionTextArea property value.
 * @return javax.swing.JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextArea getDescriptionTextArea() {
	if (ivjDescriptionTextArea == null) {
		try {
			ivjDescriptionTextArea = new javax.swing.JTextArea();
			ivjDescriptionTextArea.setName("DescriptionTextArea");
			ivjDescriptionTextArea.setLineWrap(true);
			ivjDescriptionTextArea.setBounds(0, 0, 160, 120);
			ivjDescriptionTextArea.setFocusAccelerator('d');
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDescriptionTextArea;
}
/**
 * Return the ErrorMessagesButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getErrorMessagesButton() {
	if (ivjErrorMessagesButton == null) {
		try {
			ivjErrorMessagesButton = new javax.swing.JButton();
			ivjErrorMessagesButton.setName("ErrorMessagesButton");
			ivjErrorMessagesButton.setMnemonic('e');
			ivjErrorMessagesButton.setText("Show Error Message(s)");
			ivjErrorMessagesButton.setBackground(new java.awt.Color(204,204,255));
			ivjErrorMessagesButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjErrorMessagesButton;
}
/**
 * Return the FormatLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getFormatLabel() {
	if (ivjFormatLabel == null) {
		try {
			ivjFormatLabel = new javax.swing.JLabel();
			ivjFormatLabel.setName("FormatLabel");
			ivjFormatLabel.setDisplayedMnemonic('f');
			ivjFormatLabel.setText("Format:");
			ivjFormatLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFormatLabel;
}
/**
 * Return the FormatTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getFormatTextField() {
	if (ivjFormatTextField == null) {
		try {
			ivjFormatTextField = new javax.swing.JTextField();
			ivjFormatTextField.setName("FormatTextField");
			ivjFormatTextField.setBorder(BorderFactory.createLoweredBevelBorder());
			ivjFormatTextField.setFocusAccelerator('f');
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFormatTextField;
}
/**
 * Return the LeftScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getLeftScrollPane() {
	if (ivjLeftScrollPane == null) {
		try {
			ivjLeftScrollPane = new javax.swing.JScrollPane();
			ivjLeftScrollPane.setName("LeftScrollPane");
			ivjLeftScrollPane.setBorder(BorderFactory.createLoweredBevelBorder());
			getLeftScrollPane().setViewportView(getPatternTree());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLeftScrollPane;
}
/**
 * Return the LoadButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getLoadButton() {
	if (ivjLoadButton == null) {
		try {
			ivjLoadButton = new javax.swing.JButton();
			ivjLoadButton.setName("LoadButton");
			ivjLoadButton.setMnemonic('l');
			ivjLoadButton.setText("Load");
			ivjLoadButton.setBackground(new java.awt.Color(204,204,255));
			ivjLoadButton.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLoadButton;
}
/**
 * Return the MappingLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMappingLabel() {
	if (ivjMappingLabel == null) {
		try {
			ivjMappingLabel = new javax.swing.JLabel();
			ivjMappingLabel.setName("MappingLabel");
			ivjMappingLabel.setText("Mapping:");
			ivjMappingLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMappingLabel;
}
/**
 * Return the MappingScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getMappingScrollPane() {
	if (ivjMappingScrollPane == null) {
		try {
			ivjMappingScrollPane = new javax.swing.JScrollPane();
			ivjMappingScrollPane.setName("MappingScrollPane");
			ivjMappingScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
			ivjMappingScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			ivjMappingScrollPane.setBorder(new javax.swing.border.EtchedBorder());
			getMappingScrollPane().setViewportView(getMappingTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMappingScrollPane;
}
/**
 * Return the ScrollPaneTable property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getMappingTable() {
	if (ivjMappingTable == null) {
		try {
			ivjMappingTable = new javax.swing.JTable();
			ivjMappingTable.setName("MappingTable");
			getMappingScrollPane().setColumnHeaderView(ivjMappingTable.getTableHeader());
			getMappingScrollPane().getViewport().setBackingStoreEnabled(true);
			ivjMappingTable.setBounds(0, 0, 200, 200);
			// user code begin {1}
			ivjMappingTable.setModel(new DefaultTableModel(new Object[0][0], columnNames));
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMappingTable;
}
/**
 * Return the NameLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getNameLabel() {
	if (ivjNameLabel == null) {
		try {
			ivjNameLabel = new javax.swing.JLabel();
			ivjNameLabel.setName("NameLabel");
			ivjNameLabel.setDisplayedMnemonic('n');
			ivjNameLabel.setText("Name:");
			ivjNameLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameLabel;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getNameTextField() {
	if (ivjNameTextField == null) {
		try {
			ivjNameTextField = new javax.swing.JTextField();
			ivjNameTextField.setName("NameTextField");
			ivjNameTextField.setBorder(BorderFactory.createLoweredBevelBorder());
			ivjNameTextField.setFocusAccelerator('n');
			ivjNameTextField.setEditable(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNameTextField;
}
/**
 * Return the OkButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getOkButton() {
	if (ivjOkButton == null) {
		try {
			ivjOkButton = new javax.swing.JButton();
			ivjOkButton.setName("OkButton");
			ivjOkButton.setMnemonic('o');
			ivjOkButton.setText("Ok");
			ivjOkButton.setBackground(new java.awt.Color(204,204,245));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkButton;
}
/**
 * Return the ParametersLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getParametersLabel() {
	if (ivjParametersLabel == null) {
		try {
			ivjParametersLabel = new javax.swing.JLabel();
			ivjParametersLabel.setName("ParametersLabel");
			ivjParametersLabel.setDisplayedMnemonic('p');
			ivjParametersLabel.setText("Parameters:");
			ivjParametersLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjParametersLabel;
}
/**
 * Return the ParametersTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getParametersTextField() {
	if (ivjParametersTextField == null) {
		try {
			ivjParametersTextField = new javax.swing.JTextField();
			ivjParametersTextField.setName("ParametersTextField");
			ivjParametersTextField.setBorder(BorderFactory.createLoweredBevelBorder());
			ivjParametersTextField.setFocusAccelerator('p');
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjParametersTextField;
}
/**
 * Return the PatternButtonsPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getPatternButtonsPanel() {
	if (ivjPatternButtonsPanel == null) {
		try {
			ivjPatternButtonsPanel = new javax.swing.JPanel();
			ivjPatternButtonsPanel.setName("PatternButtonsPanel");
			ivjPatternButtonsPanel.setBorder(new javax.swing.border.CompoundBorder());
			ivjPatternButtonsPanel.setLayout(new java.awt.GridBagLayout());
			ivjPatternButtonsPanel.setBackground(new java.awt.Color(204,204,255));

			java.awt.GridBagConstraints constraintsAddMappingButton = new java.awt.GridBagConstraints();
			constraintsAddMappingButton.gridx = 0; constraintsAddMappingButton.gridy = 0;
			constraintsAddMappingButton.fill = java.awt.GridBagConstraints.BOTH;
			constraintsAddMappingButton.weightx = 1.0;
			constraintsAddMappingButton.weighty = 1.0;
			constraintsAddMappingButton.insets = new java.awt.Insets(5, 6, 5, 0);
			getPatternButtonsPanel().add(getAddMappingButton(), constraintsAddMappingButton);

			java.awt.GridBagConstraints constraintsRemoveMappingButton = new java.awt.GridBagConstraints();
			constraintsRemoveMappingButton.gridx = 1; constraintsRemoveMappingButton.gridy = 0;
			constraintsRemoveMappingButton.fill = java.awt.GridBagConstraints.BOTH;
			constraintsRemoveMappingButton.weightx = 1.0;
			constraintsRemoveMappingButton.weighty = 1.0;
			constraintsRemoveMappingButton.insets = new java.awt.Insets(5, 10, 5, 0);
			getPatternButtonsPanel().add(getRemoveMappingButton(), constraintsRemoveMappingButton);

			java.awt.GridBagConstraints constraintsErrorMessagesButton = new java.awt.GridBagConstraints();
			constraintsErrorMessagesButton.gridx = 2; constraintsErrorMessagesButton.gridy = 0;
			constraintsErrorMessagesButton.fill = java.awt.GridBagConstraints.BOTH;
			constraintsErrorMessagesButton.weightx = 1.0;
			constraintsErrorMessagesButton.weighty = 1.0;
			constraintsErrorMessagesButton.insets = new java.awt.Insets(5, 10, 5, 5);
			getPatternButtonsPanel().add(getErrorMessagesButton(), constraintsErrorMessagesButton);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPatternButtonsPanel;
}
/**
 * Return the PatternManagerContentPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getPatternManagerContentPane() {
	if (ivjPatternManagerContentPane == null) {
		try {
			ivjPatternManagerContentPane = new javax.swing.JPanel();
			ivjPatternManagerContentPane.setName("PatternManagerContentPane");
			ivjPatternManagerContentPane.setBorder(new javax.swing.border.EtchedBorder());
			ivjPatternManagerContentPane.setLayout(new java.awt.BorderLayout());
			ivjPatternManagerContentPane.setBackground(new java.awt.Color(204,204,255));
			getPatternManagerContentPane().add(getPatternManagerSplitPane(), "Center");
			getPatternManagerContentPane().add(getButtonsPanel(), "South");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPatternManagerContentPane;
}
/**
 * Return the JSplitPane1 property value.
 * @return javax.swing.JSplitPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSplitPane getPatternManagerSplitPane() {
	if (ivjPatternManagerSplitPane == null) {
		try {
			ivjPatternManagerSplitPane = new javax.swing.JSplitPane(javax.swing.JSplitPane.HORIZONTAL_SPLIT);
			ivjPatternManagerSplitPane.setName("PatternManagerSplitPane");
			ivjPatternManagerSplitPane.setDividerLocation(200);
			getPatternManagerSplitPane().add(getPatternPanel(), "right");
			getPatternManagerSplitPane().add(getLeftScrollPane(), "left");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPatternManagerSplitPane;
}
/**
 * Return the PatternPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getPatternPanel() {
	if (ivjPatternPanel == null) {
		try {
			ivjPatternPanel = new javax.swing.JPanel();
			ivjPatternPanel.setName("PatternPanel");
			ivjPatternPanel.setBorder(new javax.swing.border.EtchedBorder());
			ivjPatternPanel.setLayout(new java.awt.GridBagLayout());
			ivjPatternPanel.setBackground(new java.awt.Color(204,204,255));

			java.awt.GridBagConstraints constraintsNameLabel = new java.awt.GridBagConstraints();
			constraintsNameLabel.gridx = 0; constraintsNameLabel.gridy = 0;
			constraintsNameLabel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsNameLabel.insets = new java.awt.Insets(10, 10, 0, 0);
			getPatternPanel().add(getNameLabel(), constraintsNameLabel);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 1; constraintsNameTextField.gridy = 0;
			constraintsNameTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.insets = new java.awt.Insets(10, 10, 0, 10);
			getPatternPanel().add(getNameTextField(), constraintsNameTextField);

			java.awt.GridBagConstraints constraintsScopeLabel = new java.awt.GridBagConstraints();
			constraintsScopeLabel.gridx = 0; constraintsScopeLabel.gridy = 1;
			constraintsScopeLabel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsScopeLabel.insets = new java.awt.Insets(10, 10, 0, 0);
			getPatternPanel().add(getScopeLabel(), constraintsScopeLabel);

			java.awt.GridBagConstraints constraintsScopeTextField = new java.awt.GridBagConstraints();
			constraintsScopeTextField.gridx = 1; constraintsScopeTextField.gridy = 1;
			constraintsScopeTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsScopeTextField.weightx = 1.0;
			constraintsScopeTextField.insets = new java.awt.Insets(10, 10, 0, 10);
			getPatternPanel().add(getScopeTextField(), constraintsScopeTextField);

			java.awt.GridBagConstraints constraintsDescriptionLabel = new java.awt.GridBagConstraints();
			constraintsDescriptionLabel.gridx = 0; constraintsDescriptionLabel.gridy = 2;
			constraintsDescriptionLabel.gridwidth = 2;
			constraintsDescriptionLabel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsDescriptionLabel.weightx = 1.0;
			constraintsDescriptionLabel.insets = new java.awt.Insets(15, 10, 0, 10);
			getPatternPanel().add(getDescriptionLabel(), constraintsDescriptionLabel);

			java.awt.GridBagConstraints constraintsDescriptionScrollPane = new java.awt.GridBagConstraints();
			constraintsDescriptionScrollPane.gridx = 0; constraintsDescriptionScrollPane.gridy = 3;
			constraintsDescriptionScrollPane.gridwidth = 2;
			constraintsDescriptionScrollPane.fill = java.awt.GridBagConstraints.BOTH;
			constraintsDescriptionScrollPane.weightx = 1.0;
			constraintsDescriptionScrollPane.weighty = 1.0;
			constraintsDescriptionScrollPane.insets = new java.awt.Insets(5, 10, 0, 10);
			getPatternPanel().add(getDescriptionScrollPane(), constraintsDescriptionScrollPane);

			java.awt.GridBagConstraints constraintsParametersLabel = new java.awt.GridBagConstraints();
			constraintsParametersLabel.gridx = 0; constraintsParametersLabel.gridy = 4;
			constraintsParametersLabel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsParametersLabel.insets = new java.awt.Insets(15, 10, 0, 0);
			getPatternPanel().add(getParametersLabel(), constraintsParametersLabel);

			java.awt.GridBagConstraints constraintsParametersTextField = new java.awt.GridBagConstraints();
			constraintsParametersTextField.gridx = 1; constraintsParametersTextField.gridy = 4;
			constraintsParametersTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsParametersTextField.weightx = 1.0;
			constraintsParametersTextField.insets = new java.awt.Insets(15, 10, 0, 10);
			getPatternPanel().add(getParametersTextField(), constraintsParametersTextField);

			java.awt.GridBagConstraints constraintsMappingLabel = new java.awt.GridBagConstraints();
			constraintsMappingLabel.gridx = 0; constraintsMappingLabel.gridy = 6;
			constraintsMappingLabel.gridwidth = 2;
			constraintsMappingLabel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsMappingLabel.weightx = 1.0;
			constraintsMappingLabel.insets = new java.awt.Insets(15, 10, 0, 10);
			getPatternPanel().add(getMappingLabel(), constraintsMappingLabel);

			java.awt.GridBagConstraints constraintsFormatLabel = new java.awt.GridBagConstraints();
			constraintsFormatLabel.gridx = 0; constraintsFormatLabel.gridy = 5;
			constraintsFormatLabel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsFormatLabel.insets = new java.awt.Insets(10, 10, 0, 0);
			getPatternPanel().add(getFormatLabel(), constraintsFormatLabel);

			java.awt.GridBagConstraints constraintsFormatTextField = new java.awt.GridBagConstraints();
			constraintsFormatTextField.gridx = 1; constraintsFormatTextField.gridy = 5;
			constraintsFormatTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsFormatTextField.weightx = 1.0;
			constraintsFormatTextField.insets = new java.awt.Insets(10, 10, 0, 10);
			getPatternPanel().add(getFormatTextField(), constraintsFormatTextField);

			java.awt.GridBagConstraints constraintsMappingScrollPane = new java.awt.GridBagConstraints();
			constraintsMappingScrollPane.gridx = 0; constraintsMappingScrollPane.gridy = 7;
			constraintsMappingScrollPane.gridwidth = 2;
			constraintsMappingScrollPane.fill = java.awt.GridBagConstraints.BOTH;
			constraintsMappingScrollPane.weightx = 1.0;
			constraintsMappingScrollPane.weighty = 1.0;
			constraintsMappingScrollPane.insets = new java.awt.Insets(5, 10, 0, 10);
			getPatternPanel().add(getMappingScrollPane(), constraintsMappingScrollPane);

			java.awt.GridBagConstraints constraintsPatternButtonsPanel = new java.awt.GridBagConstraints();
			constraintsPatternButtonsPanel.gridx = 0; constraintsPatternButtonsPanel.gridy = 8;
			constraintsPatternButtonsPanel.gridwidth = 2;
			constraintsPatternButtonsPanel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsPatternButtonsPanel.weightx = 1.0;
			constraintsPatternButtonsPanel.insets = new java.awt.Insets(4, 4, 4, 4);
			getPatternPanel().add(getPatternButtonsPanel(), constraintsPatternButtonsPanel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPatternPanel;
}
/**
 * Return the PatternTree property value.
 * @return javax.swing.JTree
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTree getPatternTree() {
	if (ivjPatternTree == null) {
		try {
			ivjPatternTree = new javax.swing.JTree();
			ivjPatternTree.setName("PatternTree");
			ivjPatternTree.setBackground(new java.awt.Color(204,204,204));
			ivjPatternTree.setBounds(0, 0, 78, 72);
			// user code begin {1}
			ivjPatternTree.setUI(new javax.swing.plaf.metal.MetalTreeUI() {
				public javax.swing.plaf.metal.MetalTreeUI setAngledColor() {
					setHashColor(Color.black);
					return this;
				}
			}.setAngledColor());
			ivjPatternTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
			ivjPatternTree.setCellRenderer(new DefaultTreeCellRenderer() {
				public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
					super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
					setIcon(null);
					Object o = ((DefaultMutableTreeNode) value).getUserObject();
					if (o instanceof Pattern) {
						String text = ((Pattern) o).getScope();
						setText("".equals(text) ? "unknown" : text);
						if (!((Pattern) o).isValid()) {
							setIcon(IconLibrary.errorIcon);
						}
					} else if (o instanceof String) {
						String text = (String) o;
						setText("".equals(text) ? "unknown" : text);
					}
					return this;
				}
			});
			((DefaultTreeCellRenderer) ivjPatternTree.getCellRenderer()).setBackgroundNonSelectionColor(new Color(204, 204, 204));
			ivjPatternTree.putClientProperty("JTree.lineStyle", "Angled");
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPatternTree;
}
/**
 * Return the JButton2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRemoveMappingButton() {
	if (ivjRemoveMappingButton == null) {
		try {
			ivjRemoveMappingButton = new javax.swing.JButton();
			ivjRemoveMappingButton.setName("RemoveMappingButton");
			ivjRemoveMappingButton.setMnemonic('r');
			ivjRemoveMappingButton.setText("Remove Mapping");
			ivjRemoveMappingButton.setBackground(new java.awt.Color(204,204,255));
			ivjRemoveMappingButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRemoveMappingButton;
}
/**
 * Return the SaveButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getSaveButton() {
	if (ivjSaveButton == null) {
		try {
			ivjSaveButton = new javax.swing.JButton();
			ivjSaveButton.setName("SaveButton");
			ivjSaveButton.setMnemonic('v');
			ivjSaveButton.setText("Save");
			ivjSaveButton.setBackground(new java.awt.Color(204,204,255));
			ivjSaveButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSaveButton;
}
/**
 * Return the ScopeLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getScopeLabel() {
	if (ivjScopeLabel == null) {
		try {
			ivjScopeLabel = new javax.swing.JLabel();
			ivjScopeLabel.setName("ScopeLabel");
			ivjScopeLabel.setDisplayedMnemonic('s');
			ivjScopeLabel.setText("Scope:");
			ivjScopeLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjScopeLabel;
}
/**
 * Return the ScopeTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getScopeTextField() {
	if (ivjScopeTextField == null) {
		try {
			ivjScopeTextField = new javax.swing.JTextField();
			ivjScopeTextField.setName("ScopeTextField");
			ivjScopeTextField.setBorder(BorderFactory.createLoweredBevelBorder());
			ivjScopeTextField.setFocusAccelerator('s');
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjScopeTextField;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getPatternTree().addTreeSelectionListener(ivjEventHandler);
	getOkButton().addActionListener(ivjEventHandler);
	getErrorMessagesButton().addActionListener(ivjEventHandler);
	getLoadButton().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("PatternManager");
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setSize(663, 427);
		setTitle("Pattern Manager");
		setContentPane(getPatternManagerContentPane());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	updatePatternTree();
	setAllEditable(false);
	// user code end
}
/**
 * Comment
 */
public void loadButton_ActionEvents() {
	FileChooser.chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
	FileChooser.chooser.setFileFilter(FileChooser.PATTERN);
	FileChooser.chooser.setFileSelectionMode(FileChooser.FILES_ONLY);
	FileChooser.chooser.setSelectedFile(new File(""));

	if (FileChooser.chooser.showDialog(this, "Load") == FileChooser.APPROVE_OPTION) {
		try {
			if (FileChooser.chooser.getSelectedFile().exists()) {
				PatternSaverLoader.load(FileChooser.chooser.getSelectedFile().getCanonicalPath());
				updatePatternTree();
			} else {
				JOptionPane.showMessageDialog(this, "File '" + FileChooser.chooser.getSelectedFile().getCanonicalPath()
						+ "' does not exist", "Error", JOptionPane.ERROR_MESSAGE);
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
		}
	}
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		PatternManager aPatternManager;
		aPatternManager = new PatternManager();
		aPatternManager.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aPatternManager.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JFrame");
		exception.printStackTrace(System.out);
	}
}
/**
 * Comment
 */
public void patternTree_TreeSelectionEvents() {
	Object o = getPatternTree().getLastSelectedPathComponent();
	if (o != null) {
		o = ((DefaultMutableTreeNode) o).getUserObject();
		if (o instanceof Pattern) {
			Pattern p = (Pattern) o;
			String temp = p.getName();
			getNameTextField().setText("".equals(temp) ? "unknown" : temp);
			temp = p.getScope();
			getScopeTextField().setText("".equals(temp) ? "unknown" : temp);
			temp = p.getDescription();
			getDescriptionTextArea().setText("".equals(temp) ? "none" : temp);
			temp = p.getParameters().toString();
			getParametersTextField().setText(temp.substring(1, temp.length() - 1));
			temp = p.getFormat();
			getFormatTextField().setText(temp);
			int row = 0;
			if (p.hasMapping("ltl"))
				row++;
			if (p.hasMapping("ctl"))
				row++;
			boolean isBanderaPattern = "bandera.pattern".equals(p.getFilename());
			final Object[][] rowData = new String[row][2];
			int i = 0;
			if (p.hasMapping("ltl")) {
				rowData[i][0] = "Linear Temporal Logic";
				rowData[i++][1] = p.getMapping("ltl");
			}
			if (p.hasMapping("ctl")) {
				rowData[i][0] = "Computation Tree Logic";
				rowData[i][1] = p.getMapping("ctl");
			}
			getMappingTable().setBackground(bg);
			getMappingTable().setModel(new AbstractTableModel() {
				public String getColumnName(int col) {
					return columnNames[col].toString();
				}
				public int getRowCount() {
					return rowData.length;
				}
				public int getColumnCount() {
					return columnNames.length;
				}
				public Object getValueAt(int row, int col) {
					return rowData[row][col];
				}
				public boolean isCellEditable(int row, int col) {
					return false;
				}
				public void setValueAt(Object value, int row, int col) {
					rowData[row][col] = value;
					fireTableCellUpdated(row, col);
				}
			});
			getMappingTable().sizeColumnsToFit(-1);
			getMappingScrollPane().validate();
			getMappingScrollPane().repaint();
			setAllEditable(!isBanderaPattern);
			getErrorMessagesButton().setEnabled(!p.isValid());
		} else {
			getErrorMessagesButton().setEnabled(false);
			setAllEditable(false);
			getNameTextField().setText("");
			getScopeTextField().setText("");
			getDescriptionTextArea().setText("");
			getParametersTextField().setText("");
			getFormatTextField().setText("");
			getMappingTable().setModel(new DefaultTableModel(new Object[0][0], columnNames));
			getMappingTable().sizeColumnsToFit(-1);
			getMappingScrollPane().validate();
			getMappingScrollPane().repaint();
		}
	} else {
		getErrorMessagesButton().setEnabled(false);
		setAllEditable(true);
		getNameTextField().setText("");
		getScopeTextField().setText("");
		getDescriptionTextArea().setText("");
		getParametersTextField().setText("");
		getFormatTextField().setText("");
		getErrorMessagesButton().setEnabled(false);
		getMappingTable().setModel(new DefaultTableModel(new Object[0][0], columnNames));
		getMappingTable().sizeColumnsToFit(-1);
		getMappingScrollPane().validate();
		getMappingScrollPane().repaint();
	}
}
/**
 * 
 * @param editable boolean
 */
private void setAllEditable(boolean editable) {
	getNameTextField().setEditable(editable);
	getScopeTextField().setEditable(editable);
	getDescriptionTextArea().setEditable(editable);
	getParametersTextField().setEditable(editable);
	getFormatTextField().setEditable(editable);

	if (editable)
		getDescriptionTextArea().setBackground(Color.white);
	else
		getDescriptionTextArea().setBackground(bg);
}
/**
 * 
 */
private void updatePatternTree() {
	getPatternTree().setModel(new DefaultTreeModel(buildPatternTree(new DefaultMutableTreeNode("Pattern"), PatternSaverLoader.getPatternTable())));
	getLeftScrollPane().validate();
	getLeftScrollPane().repaint();
	//getPatternManagerSplitPane().resetToPreferredSizes();
}
}
