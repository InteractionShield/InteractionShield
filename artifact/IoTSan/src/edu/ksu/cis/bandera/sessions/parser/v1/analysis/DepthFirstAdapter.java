/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.sessions.parser.v1.analysis;

import java.util.*;
import edu.ksu.cis.bandera.sessions.parser.v1.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAUnit(AUnit node)
    {
        defaultIn(node);
    }

    public void outAUnit(AUnit node)
    {
        defaultOut(node);
    }

    public void caseAUnit(AUnit node)
    {
        inAUnit(node);
        {
            Object temp[] = node.getSession().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PSession) temp[i]).apply(this);
            }
        }
        outAUnit(node);
    }

    public void inASession(ASession node)
    {
        defaultIn(node);
    }

    public void outASession(ASession node)
    {
        defaultOut(node);
    }

    public void caseASession(ASession node)
    {
        inASession(node);
        if(node.getSession() != null)
        {
            node.getSession().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getResource().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PResource) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outASession(node);
    }

    public void inAStringResource(AStringResource node)
    {
        defaultIn(node);
    }

    public void outAStringResource(AStringResource node)
    {
        defaultOut(node);
    }

    public void caseAStringResource(AStringResource node)
    {
        inAStringResource(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getStrings() != null)
        {
            node.getStrings().apply(this);
        }
        outAStringResource(node);
    }

    public void inAStringStrings(AStringStrings node)
    {
        defaultIn(node);
    }

    public void outAStringStrings(AStringStrings node)
    {
        defaultOut(node);
    }

    public void caseAStringStrings(AStringStrings node)
    {
        inAStringStrings(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringStrings(node);
    }

    public void inAStringsStrings(AStringsStrings node)
    {
        defaultIn(node);
    }

    public void outAStringsStrings(AStringsStrings node)
    {
        defaultOut(node);
    }

    public void caseAStringsStrings(AStringsStrings node)
    {
        inAStringsStrings(node);
        if(node.getStrings() != null)
        {
            node.getStrings().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringsStrings(node);
    }
}
