/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class ATransformation extends PTransformation
{
    private TWhen _when_;
    private PExpr _expr_;
    private TDo _do_;
    private TInvisible _invisible_;
    private TLbrace _lbrace_;
    private final LinkedList _actions_ = new TypedLinkedList(new Actions_Cast());
    private TRbrace _rbrace_;
    private TGoto _goto_;
    private TId _id_;
    private TSemicolon _semicolon_;

    public ATransformation()
    {
    }

    public ATransformation(
        TWhen _when_,
        PExpr _expr_,
        TDo _do_,
        TInvisible _invisible_,
        TLbrace _lbrace_,
        List _actions_,
        TRbrace _rbrace_,
        TGoto _goto_,
        TId _id_,
        TSemicolon _semicolon_)
    {
        setWhen(_when_);

        setExpr(_expr_);

        setDo(_do_);

        setInvisible(_invisible_);

        setLbrace(_lbrace_);

        {
            this._actions_.clear();
            this._actions_.addAll(_actions_);
        }

        setRbrace(_rbrace_);

        setGoto(_goto_);

        setId(_id_);

        setSemicolon(_semicolon_);

    }

    public ATransformation(
        TWhen _when_,
        PExpr _expr_,
        TDo _do_,
        TInvisible _invisible_,
        TLbrace _lbrace_,
        XPAction _actions_,
        TRbrace _rbrace_,
        TGoto _goto_,
        TId _id_,
        TSemicolon _semicolon_)
    {
        setWhen(_when_);

        setExpr(_expr_);

        setDo(_do_);

        setInvisible(_invisible_);

        setLbrace(_lbrace_);

        if(_actions_ != null)
        {
            while(_actions_ instanceof X1PAction)
            {
                this._actions_.addFirst(((X1PAction) _actions_).getPAction());
                _actions_ = ((X1PAction) _actions_).getXPAction();
            }
            this._actions_.addFirst(((X2PAction) _actions_).getPAction());
        }

        setRbrace(_rbrace_);

        setGoto(_goto_);

        setId(_id_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new ATransformation(
            (TWhen) cloneNode(_when_),
            (PExpr) cloneNode(_expr_),
            (TDo) cloneNode(_do_),
            (TInvisible) cloneNode(_invisible_),
            (TLbrace) cloneNode(_lbrace_),
            cloneList(_actions_),
            (TRbrace) cloneNode(_rbrace_),
            (TGoto) cloneNode(_goto_),
            (TId) cloneNode(_id_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATransformation(this);
    }

    public TWhen getWhen()
    {
        return _when_;
    }

    public void setWhen(TWhen node)
    {
        if(_when_ != null)
        {
            _when_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _when_ = node;
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public TDo getDo()
    {
        return _do_;
    }

    public void setDo(TDo node)
    {
        if(_do_ != null)
        {
            _do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _do_ = node;
    }

    public TInvisible getInvisible()
    {
        return _invisible_;
    }

    public void setInvisible(TInvisible node)
    {
        if(_invisible_ != null)
        {
            _invisible_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _invisible_ = node;
    }

    public TLbrace getLbrace()
    {
        return _lbrace_;
    }

    public void setLbrace(TLbrace node)
    {
        if(_lbrace_ != null)
        {
            _lbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lbrace_ = node;
    }

    public LinkedList getActions()
    {
        return _actions_;
    }

    public void setActions(List list)
    {
        _actions_.clear();
        _actions_.addAll(list);
    }

    public TRbrace getRbrace()
    {
        return _rbrace_;
    }

    public void setRbrace(TRbrace node)
    {
        if(_rbrace_ != null)
        {
            _rbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rbrace_ = node;
    }

    public TGoto getGoto()
    {
        return _goto_;
    }

    public void setGoto(TGoto node)
    {
        if(_goto_ != null)
        {
            _goto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _goto_ = node;
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_when_)
            + toString(_expr_)
            + toString(_do_)
            + toString(_invisible_)
            + toString(_lbrace_)
            + toString(_actions_)
            + toString(_rbrace_)
            + toString(_goto_)
            + toString(_id_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_when_ == child)
        {
            _when_ = null;
            return;
        }

        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

        if(_do_ == child)
        {
            _do_ = null;
            return;
        }

        if(_invisible_ == child)
        {
            _invisible_ = null;
            return;
        }

        if(_lbrace_ == child)
        {
            _lbrace_ = null;
            return;
        }

        if(_actions_.remove(child))
        {
            return;
        }

        if(_rbrace_ == child)
        {
            _rbrace_ = null;
            return;
        }

        if(_goto_ == child)
        {
            _goto_ = null;
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_when_ == oldChild)
        {
            setWhen((TWhen) newChild);
            return;
        }

        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(_do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(_invisible_ == oldChild)
        {
            setInvisible((TInvisible) newChild);
            return;
        }

        if(_lbrace_ == oldChild)
        {
            setLbrace((TLbrace) newChild);
            return;
        }

        for(ListIterator i = _actions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rbrace_ == oldChild)
        {
            setRbrace((TRbrace) newChild);
            return;
        }

        if(_goto_ == oldChild)
        {
            setGoto((TGoto) newChild);
            return;
        }

        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }

    private class Actions_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAction node = (PAction) o;

            if((node.parent() != null) &&
                (node.parent() != ATransformation.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ATransformation.this))
            {
                node.parent(ATransformation.this);
            }

            return node;
        }
    }
}
