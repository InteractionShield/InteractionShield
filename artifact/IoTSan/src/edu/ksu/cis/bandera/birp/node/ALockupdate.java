/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class ALockupdate extends PLockupdate
{
    private PLockOp _lockOp_;
    private TLparen _lparen_;
    private PLhs _lhs_;
    private TRparen _rparen_;
    private TSemicolon _semicolon_;

    public ALockupdate()
    {
    }

    public ALockupdate(
        PLockOp _lockOp_,
        TLparen _lparen_,
        PLhs _lhs_,
        TRparen _rparen_,
        TSemicolon _semicolon_)
    {
        setLockOp(_lockOp_);

        setLparen(_lparen_);

        setLhs(_lhs_);

        setRparen(_rparen_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new ALockupdate(
            (PLockOp) cloneNode(_lockOp_),
            (TLparen) cloneNode(_lparen_),
            (PLhs) cloneNode(_lhs_),
            (TRparen) cloneNode(_rparen_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALockupdate(this);
    }

    public PLockOp getLockOp()
    {
        return _lockOp_;
    }

    public void setLockOp(PLockOp node)
    {
        if(_lockOp_ != null)
        {
            _lockOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lockOp_ = node;
    }

    public TLparen getLparen()
    {
        return _lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lparen_ = node;
    }

    public PLhs getLhs()
    {
        return _lhs_;
    }

    public void setLhs(PLhs node)
    {
        if(_lhs_ != null)
        {
            _lhs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lhs_ = node;
    }

    public TRparen getRparen()
    {
        return _rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rparen_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lockOp_)
            + toString(_lparen_)
            + toString(_lhs_)
            + toString(_rparen_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_lockOp_ == child)
        {
            _lockOp_ = null;
            return;
        }

        if(_lparen_ == child)
        {
            _lparen_ = null;
            return;
        }

        if(_lhs_ == child)
        {
            _lhs_ = null;
            return;
        }

        if(_rparen_ == child)
        {
            _rparen_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lockOp_ == oldChild)
        {
            setLockOp((PLockOp) newChild);
            return;
        }

        if(_lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(_lhs_ == oldChild)
        {
            setLhs((PLhs) newChild);
            return;
        }

        if(_rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }
}
