/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.lexer;

import java.io.*;
import java.util.*;
import edu.ksu.cis.bandera.birp.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TSemicolon(line, pos); }
    Token new1(int line, int pos) { return new TColon(line, pos); }
    Token new2(int line, int pos) { return new TLbrace(line, pos); }
    Token new3(int line, int pos) { return new TRbrace(line, pos); }
    Token new4(int line, int pos) { return new TLparen(line, pos); }
    Token new5(int line, int pos) { return new TRparen(line, pos); }
    Token new6(int line, int pos) { return new TLbrack(line, pos); }
    Token new7(int line, int pos) { return new TRbrack(line, pos); }
    Token new8(int line, int pos) { return new TBar(line, pos); }
    Token new9(int line, int pos) { return new TAt(line, pos); }
    Token new10(int line, int pos) { return new TComma(line, pos); }
    Token new11(int line, int pos) { return new TDot(line, pos); }
    Token new12(int line, int pos) { return new TDotdot(line, pos); }
    Token new13(int line, int pos) { return new TPlus(line, pos); }
    Token new14(int line, int pos) { return new TMinus(line, pos); }
    Token new15(int line, int pos) { return new TMult(line, pos); }
    Token new16(int line, int pos) { return new TDiv(line, pos); }
    Token new17(int line, int pos) { return new TMod(line, pos); }
    Token new18(int line, int pos) { return new TAnd(line, pos); }
    Token new19(int line, int pos) { return new TOr(line, pos); }
    Token new20(int line, int pos) { return new TEq(line, pos); }
    Token new21(int line, int pos) { return new TEquals(line, pos); }
    Token new22(int line, int pos) { return new TNot(line, pos); }
    Token new23(int line, int pos) { return new TNoteq(line, pos); }
    Token new24(int line, int pos) { return new TLt(line, pos); }
    Token new25(int line, int pos) { return new TGt(line, pos); }
    Token new26(int line, int pos) { return new TLe(line, pos); }
    Token new27(int line, int pos) { return new TGe(line, pos); }
    Token new28(int line, int pos) { return new TAssign(line, pos); }
    Token new29(int line, int pos) { return new TAssert(line, pos); }
    Token new30(int line, int pos) { return new TBoolean(line, pos); }
    Token new31(int line, int pos) { return new TTid(line, pos); }
    Token new32(int line, int pos) { return new TTrue(line, pos); }
    Token new33(int line, int pos) { return new TFalse(line, pos); }
    Token new34(int line, int pos) { return new TProcess(line, pos); }
    Token new35(int line, int pos) { return new TEnd(line, pos); }
    Token new36(int line, int pos) { return new TRange(line, pos); }
    Token new37(int line, int pos) { return new TLock(line, pos); }
    Token new38(int line, int pos) { return new TReentrant(line, pos); }
    Token new39(int line, int pos) { return new TArray(line, pos); }
    Token new40(int line, int pos) { return new TOf(line, pos); }
    Token new41(int line, int pos) { return new TLength(line, pos); }
    Token new42(int line, int pos) { return new TExtendz(line, pos); }
    Token new43(int line, int pos) { return new TInstanceof(line, pos); }
    Token new44(int line, int pos) { return new TRecord(line, pos); }
    Token new45(int line, int pos) { return new TCollection(line, pos); }
    Token new46(int line, int pos) { return new TRef(line, pos); }
    Token new47(int line, int pos) { return new TNew(line, pos); }
    Token new48(int line, int pos) { return new TNull(line, pos); }
    Token new49(int line, int pos) { return new TEnum(line, pos); }
    Token new50(int line, int pos) { return new TMain(line, pos); }
    Token new51(int line, int pos) { return new TThread(line, pos); }
    Token new52(int line, int pos) { return new TLoc(line, pos); }
    Token new53(int line, int pos) { return new TLive(line, pos); }
    Token new54(int line, int pos) { return new TWhen(line, pos); }
    Token new55(int line, int pos) { return new TDo(line, pos); }
    Token new56(int line, int pos) { return new TInvisible(line, pos); }
    Token new57(int line, int pos) { return new TGoto(line, pos); }
    Token new58(int line, int pos) { return new TUnlock(line, pos); }
    Token new59(int line, int pos) { return new TWait(line, pos); }
    Token new60(int line, int pos) { return new TUnwait(line, pos); }
    Token new61(int line, int pos) { return new TNotify(line, pos); }
    Token new62(int line, int pos) { return new TNotifyall(line, pos); }
    Token new63(int line, int pos) { return new TLockavailable(line, pos); }
    Token new64(int line, int pos) { return new TStart(line, pos); }
    Token new65(int line, int pos) { return new TJoin(line, pos); }
    Token new66(int line, int pos) { return new TExit(line, pos); }
    Token new67(int line, int pos) { return new TThreadterminated(line, pos); }
    Token new68(int line, int pos) { return new TInternchoose(line, pos); }
    Token new69(int line, int pos) { return new TExternchoose(line, pos); }
    Token new70(int line, int pos) { return new TForall(line, pos); }
    Token new71(int line, int pos) { return new THaslock(line, pos); }
    Token new72(int line, int pos) { return new TWasnotified(line, pos); }
    Token new73(int line, int pos) { return new TPrintln(line, pos); }
    Token new74(int line, int pos) { return new TPredicates(line, pos); }
    Token new75(String text, int line, int pos) { return new TId(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TInt(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new78(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{10, 10, 1}, {13, 13, 2}, {32, 32, 3}, {33, 33, 4}, {34, 34, 5}, {37, 37, 6}, {38, 38, 7}, {40, 40, 8}, {41, 41, 9}, {42, 42, 10}, {43, 43, 11}, {44, 44, 12}, {45, 45, 13}, {46, 46, 14}, {47, 47, 15}, {48, 57, 16}, {58, 58, 17}, {59, 59, 18}, {60, 60, 19}, {61, 61, 20}, {62, 62, 21}, {64, 64, 22}, {65, 90, 23}, {91, 91, 24}, {93, 93, 25}, {95, 95, 23}, {97, 97, 26}, {98, 98, 27}, {99, 99, 28}, {100, 100, 29}, {101, 101, 30}, {102, 102, 31}, {103, 103, 32}, {104, 104, 33}, {105, 105, 34}, {106, 106, 35}, {107, 107, 23}, {108, 108, 36}, {109, 109, 37}, {110, 110, 38}, {111, 111, 39}, {112, 112, 40}, {113, 113, 23}, {114, 114, 41}, {115, 115, 42}, {116, 116, 43}, {117, 117, 44}, {118, 118, 23}, {119, 119, 45}, {120, 122, 23}, {123, 123, 46}, {124, 124, 47}, {125, 125, 48}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{61, 61, 49}, },
            {{0, 33, 50}, {34, 34, 51}, {35, 91, 50}, {92, 92, 52}, {93, 65535, 50}, },
            {},
            {{38, 38, 53}, },
            {},
            {},
            {},
            {},
            {},
            {{45, 45, 54}, {48, 57, 16}, },
            {{46, 46, 55}, },
            {},
            {{48, 57, 16}, },
            {{61, 61, 56}, },
            {},
            {{61, 61, 57}, },
            {{61, 61, 58}, },
            {{61, 61, 59}, },
            {},
            {{48, 57, 60}, {65, 90, 61}, {95, 95, 61}, {97, 122, 61}, },
            {},
            {},
            {{48, 95, -25}, {97, 113, 61}, {114, 114, 62}, {115, 115, 63}, {116, 122, 61}, },
            {{48, 95, -25}, {97, 110, 61}, {111, 111, 64}, {112, 122, 61}, },
            {{48, 110, -29}, {111, 111, 65}, {112, 122, 61}, },
            {{48, 110, -29}, {111, 111, 66}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 109, 61}, {110, 110, 67}, {111, 119, 61}, {120, 120, 68}, {121, 122, 61}, },
            {{48, 95, -25}, {97, 97, 69}, {98, 110, 61}, {111, 111, 70}, {112, 122, 61}, },
            {{48, 110, -29}, {111, 111, 71}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 97, 72}, {98, 122, 61}, },
            {{48, 109, -32}, {110, 110, 73}, {111, 122, 61}, },
            {{48, 110, -29}, {111, 111, 74}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 100, 61}, {101, 101, 75}, {102, 104, 61}, {105, 105, 76}, {106, 110, 61}, {111, 111, 77}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 97, 78}, {98, 122, 61}, },
            {{48, 100, -38}, {101, 101, 79}, {102, 110, 61}, {111, 111, 80}, {112, 116, 61}, {117, 117, 81}, {118, 122, 61}, },
            {{48, 95, -25}, {97, 101, 61}, {102, 102, 82}, {103, 122, 61}, },
            {{48, 113, -28}, {114, 114, 83}, {115, 122, 61}, },
            {{48, 95, -25}, {97, 97, 84}, {98, 100, 61}, {101, 101, 85}, {102, 122, 61}, },
            {{48, 95, -25}, {97, 115, 61}, {116, 116, 86}, {117, 122, 61}, },
            {{48, 95, -25}, {97, 103, 61}, {104, 104, 87}, {105, 105, 88}, {106, 113, 61}, {114, 114, 89}, {115, 122, 61}, },
            {{48, 109, -32}, {110, 110, 90}, {111, 122, 61}, },
            {{48, 95, -25}, {97, 97, 91}, {98, 103, 61}, {104, 104, 92}, {105, 122, 61}, },
            {},
            {{124, 124, 93}, },
            {},
            {},
            {{0, 65535, -7}, },
            {},
            {{0, 33, 50}, {34, 34, 94}, {35, 65535, -7}, },
            {},
            {{0, 9, 95}, {11, 12, 95}, {14, 65535, 95}, },
            {},
            {},
            {},
            {},
            {},
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 113, -28}, {114, 114, 96}, {115, 122, 61}, },
            {{48, 95, -25}, {97, 114, 61}, {115, 115, 97}, {116, 122, 61}, },
            {{48, 110, -29}, {111, 111, 98}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 107, 61}, {108, 108, 99}, {109, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 99, 61}, {100, 100, 100}, {101, 116, 61}, {117, 117, 101}, {118, 122, 61}, },
            {{48, 95, -25}, {97, 104, 61}, {105, 105, 102}, {106, 115, 61}, {116, 116, 103}, {117, 122, 61}, },
            {{48, 107, -67}, {108, 108, 104}, {109, 122, 61}, },
            {{48, 113, -28}, {114, 114, 105}, {115, 122, 61}, },
            {{48, 115, -44}, {116, 116, 106}, {117, 122, 61}, },
            {{48, 114, -65}, {115, 115, 107}, {116, 122, 61}, },
            {{48, 114, -65}, {115, 115, 108}, {116, 116, 109}, {117, 117, 61}, {118, 118, 110}, {119, 122, 61}, },
            {{48, 104, -70}, {105, 105, 111}, {106, 122, 61}, },
            {{48, 109, -32}, {110, 110, 112}, {111, 122, 61}, },
            {{48, 95, -25}, {97, 117, 61}, {118, 118, 113}, {119, 122, 61}, },
            {{48, 95, -25}, {97, 98, 61}, {99, 99, 114}, {100, 122, 61}, },
            {{48, 104, -70}, {105, 105, 115}, {106, 122, 61}, },
            {{48, 95, -25}, {97, 118, 61}, {119, 119, 116}, {120, 122, 61}, },
            {{48, 115, -44}, {116, 116, 117}, {117, 122, 61}, },
            {{48, 107, -67}, {108, 108, 118}, {109, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 119}, {102, 104, 61}, {105, 105, 120}, {106, 110, 61}, {111, 111, 121}, {112, 122, 61}, },
            {{48, 109, -32}, {110, 110, 122}, {111, 122, 61}, },
            {{48, 98, -79}, {99, 99, 123}, {100, 100, 61}, {101, 101, 124}, {102, 102, 125}, {103, 122, 61}, },
            {{48, 95, -25}, {97, 97, 126}, {98, 122, 61}, },
            {{48, 113, -28}, {114, 114, 127}, {115, 122, 61}, },
            {{48, 99, -69}, {100, 100, 128}, {101, 122, 61}, },
            {{48, 95, -25}, {97, 116, 61}, {117, 117, 129}, {118, 122, 61}, },
            {{48, 107, -67}, {108, 108, 130}, {109, 118, 61}, {119, 119, 131}, {120, 122, 61}, },
            {{48, 104, -70}, {105, 105, 132}, {106, 114, 61}, {115, 115, 133}, {116, 122, 61}, },
            {{48, 100, -38}, {101, 101, 134}, {102, 122, 61}, },
            {},
            {{0, 65535, -7}, },
            {{0, 65535, -56}, },
            {{48, 95, -25}, {97, 97, 135}, {98, 122, 61}, },
            {{48, 100, -38}, {101, 101, 136}, {102, 122, 61}, },
            {{48, 107, -67}, {108, 108, 137}, {109, 122, 61}, },
            {{48, 107, -67}, {108, 108, 138}, {109, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 108, 61}, {109, 109, 139}, {110, 122, 61}, },
            {{48, 115, -44}, {116, 116, 140}, {117, 122, 61}, },
            {{48, 100, -38}, {101, 101, 141}, {102, 122, 61}, },
            {{48, 114, -65}, {115, 115, 142}, {116, 122, 61}, },
            {{48, 95, -25}, {97, 97, 143}, {98, 122, 61}, },
            {{48, 110, -29}, {111, 111, 144}, {112, 122, 61}, },
            {{48, 57, 60}, {65, 75, 61}, {76, 76, 145}, {77, 90, 61}, {95, 122, -25}, },
            {{48, 115, -44}, {116, 116, 146}, {117, 122, 61}, },
            {{48, 100, -38}, {101, 101, 147}, {102, 122, 61}, },
            {{48, 104, -70}, {105, 105, 148}, {106, 122, 61}, },
            {{48, 109, -32}, {110, 110, 149}, {111, 122, 61}, },
            {{48, 95, -25}, {97, 102, 61}, {103, 103, 150}, {104, 122, 61}, },
            {{48, 100, -38}, {101, 101, 151}, {102, 122, 61}, },
            {{48, 95, -25}, {97, 106, 61}, {107, 107, 152}, {108, 122, 61}, },
            {{48, 109, -32}, {110, 110, 153}, {111, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 104, -70}, {105, 105, 154}, {106, 122, 61}, },
            {{48, 107, -67}, {108, 108, 155}, {109, 122, 61}, },
            {{48, 99, -69}, {100, 100, 156}, {101, 122, 61}, },
            {{48, 109, -32}, {110, 110, 157}, {111, 122, 61}, },
            {{48, 98, -79}, {99, 99, 158}, {100, 122, 61}, },
            {{48, 102, -114}, {103, 103, 159}, {104, 122, 61}, },
            {{48, 110, -29}, {111, 111, 160}, {112, 122, 61}, },
            {{48, 109, -32}, {110, 110, 161}, {111, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 113, -28}, {114, 114, 162}, {115, 122, 61}, },
            {{48, 100, -38}, {101, 101, 163}, {102, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 164}, {102, 122, 61}, },
            {{48, 110, -29}, {111, 111, 165}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 97, 166}, {98, 122, 61}, },
            {{48, 115, -44}, {116, 116, 167}, {117, 122, 61}, },
            {{48, 57, 60}, {65, 77, 61}, {78, 78, 168}, {79, 90, 61}, {95, 122, -25}, },
            {{48, 109, -32}, {110, 110, 169}, {111, 122, 61}, },
            {{48, 95, -25}, {97, 120, 61}, {121, 121, 170}, {122, 122, 61}, },
            {{48, 113, -28}, {114, 114, 171}, {115, 122, 61}, },
            {{48, 100, -38}, {101, 101, 172}, {102, 122, 61}, },
            {{48, 100, -38}, {101, 101, 173}, {102, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 109, -32}, {110, 110, 174}, {111, 113, 61}, {114, 114, 175}, {115, 122, 61}, },
            {{48, 100, -38}, {101, 101, 176}, {102, 122, 61}, },
            {{48, 107, -67}, {108, 108, 177}, {109, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 110, -29}, {111, 111, 178}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 97, 179}, {98, 122, 61}, },
            {{48, 113, -28}, {114, 114, 180}, {115, 122, 61}, },
            {{48, 114, -65}, {115, 115, 181}, {116, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 115, -44}, {116, 116, 182}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 57, 60}, {65, 65, 183}, {66, 90, 61}, {95, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 101, -41}, {102, 102, 184}, {103, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 104, -70}, {105, 105, 185}, {106, 122, 61}, },
            {{48, 115, -44}, {116, 116, 186}, {117, 122, 61}, },
            {{48, 100, -38}, {101, 101, 187}, {102, 122, 61}, },
            {{48, 100, -38}, {101, 101, 188}, {102, 122, 61}, },
            {{48, 113, -28}, {114, 114, 189}, {115, 122, 61}, },
            {{48, 115, -44}, {116, 116, 190}, {117, 122, 61}, },
            {{48, 115, -44}, {116, 116, 191}, {117, 122, 61}, },
            {{48, 95, -25}, {97, 97, 192}, {98, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 98, -79}, {99, 99, 193}, {100, 122, 61}, },
            {{48, 104, -70}, {105, 105, 194}, {106, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 110, -29}, {111, 111, 195}, {112, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 115, -44}, {116, 116, 196}, {117, 122, 61}, },
            {{48, 95, -25}, {97, 97, 197}, {98, 122, 61}, },
            {{48, 98, -79}, {99, 99, 198}, {100, 122, 61}, },
            {{48, 99, -69}, {100, 100, 199}, {101, 122, 61}, },
            {{48, 109, -32}, {110, 110, 200}, {111, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 107, -67}, {108, 108, 201}, {109, 122, 61}, },
            {{48, 98, -79}, {99, 99, 202}, {100, 122, 61}, },
            {{48, 109, -32}, {110, 110, 203}, {111, 122, 61}, },
            {{48, 109, -32}, {110, 110, 204}, {111, 122, 61}, },
            {{48, 104, -70}, {105, 105, 205}, {106, 122, 61}, },
            {{48, 103, -45}, {104, 104, 206}, {105, 122, 61}, },
            {{48, 117, -78}, {118, 118, 207}, {119, 122, 61}, },
            {{48, 120, -137}, {121, 121, 208}, {122, 122, 61}, },
            {{48, 98, -79}, {99, 99, 209}, {100, 122, 61}, },
            {{48, 107, -67}, {108, 108, 210}, {109, 122, 61}, },
            {{48, 114, -65}, {115, 115, 211}, {116, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 99, -69}, {100, 100, 212}, {101, 122, 61}, },
            {{48, 113, -28}, {114, 114, 213}, {115, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 99, -69}, {100, 100, 214}, {101, 122, 61}, },
            {{48, 106, -116}, {107, 107, 215}, {108, 122, 61}, },
            {{48, 115, -44}, {116, 116, 216}, {117, 122, 61}, },
            {{48, 115, -44}, {116, 116, 217}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 109, -32}, {110, 110, 218}, {111, 122, 61}, },
            {{48, 115, -44}, {116, 116, 219}, {117, 122, 61}, },
            {{48, 114, -65}, {115, 115, 220}, {116, 122, 61}, },
            {{48, 57, 60}, {65, 66, 61}, {67, 67, 221}, {68, 90, 61}, {95, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 106, -116}, {107, 107, 222}, {108, 122, 61}, },
            {{48, 98, -79}, {99, 99, 223}, {100, 122, 61}, },
            {{48, 66, -202}, {67, 67, 224}, {68, 122, -202}, },
            {{48, 95, -25}, {97, 97, 61}, {98, 98, 225}, {99, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 97, 226}, {98, 122, 61}, },
            {{48, 57, 60}, {65, 65, 227}, {66, 122, -154}, },
            {{48, 95, -25}, {97, 97, 228}, {98, 122, 61}, },
            {{48, 109, -32}, {110, 110, 229}, {111, 122, 61}, },
            {{48, 114, -65}, {115, 115, 230}, {116, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 97, 231}, {98, 122, 61}, },
            {{48, 57, 60}, {65, 83, 61}, {84, 84, 232}, {85, 90, 61}, {95, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 104, -70}, {105, 105, 233}, {106, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 104, -70}, {105, 105, 234}, {106, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 103, -45}, {104, 104, 235}, {105, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 236}, {102, 122, 61}, },
            {{48, 103, -45}, {104, 104, 237}, {105, 122, 61}, },
            {{48, 107, -67}, {108, 108, 238}, {109, 122, 61}, },
            {{48, 104, -70}, {105, 105, 239}, {106, 122, 61}, },
            {{48, 107, -67}, {108, 108, 240}, {109, 122, 61}, },
            {{48, 115, -44}, {116, 116, 241}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 109, -32}, {110, 110, 242}, {111, 122, 61}, },
            {{48, 100, -38}, {101, 101, 243}, {102, 122, 61}, },
            {{48, 101, -41}, {102, 102, 244}, {103, 122, 61}, },
            {{48, 110, -29}, {111, 111, 245}, {112, 122, 61}, },
            {{48, 110, -29}, {111, 111, 246}, {112, 122, 61}, },
            {{48, 110, -29}, {111, 111, 247}, {112, 122, 61}, },
            {{48, 110, -29}, {111, 111, 248}, {112, 122, 61}, },
            {{48, 100, -38}, {101, 101, 249}, {102, 122, 61}, },
            {{48, 107, -67}, {108, 108, 250}, {109, 122, 61}, },
            {{48, 107, -67}, {108, 108, 251}, {109, 122, 61}, },
            {{48, 100, -38}, {101, 101, 252}, {102, 122, 61}, },
            {{48, 115, -44}, {116, 116, 253}, {117, 122, 61}, },
            {{48, 113, -28}, {114, 114, 254}, {115, 122, 61}, },
            {{48, 104, -70}, {105, 105, 255}, {106, 122, 61}, },
            {{48, 109, -32}, {110, 110, 256}, {111, 122, 61}, },
            {{48, 110, -29}, {111, 111, 257}, {112, 122, 61}, },
            {{48, 101, -41}, {102, 102, 258}, {103, 122, 61}, },
            {{48, 110, -29}, {111, 111, 259}, {112, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 97, 260}, {98, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 114, -65}, {115, 115, 261}, {116, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 108, -103}, {109, 109, 262}, {110, 122, 61}, },
            {{48, 100, -38}, {101, 101, 263}, {102, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 114, -65}, {115, 115, 264}, {116, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 114, -65}, {115, 115, 265}, {116, 122, 61}, },
            {{48, 97, -207}, {98, 98, 266}, {99, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 104, -70}, {105, 105, 267}, {106, 122, 61}, },
            {{48, 99, -69}, {100, 100, 268}, {101, 122, 61}, },
            {{48, 100, -38}, {101, 101, 269}, {102, 122, 61}, },
            {{48, 100, -38}, {101, 101, 270}, {102, 122, 61}, },
            {{48, 107, -67}, {108, 108, 271}, {109, 122, 61}, },
            {{48, 109, -32}, {110, 110, 272}, {111, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 100, -38}, {101, 101, 273}, {102, 122, 61}, },
            {{48, 95, -25}, {97, 97, 274}, {98, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 115, -44}, {116, 116, 275}, {117, 122, 61}, },
            {{48, 100, -38}, {101, 101, 276}, {102, 122, 61}, },
            {{48, 99, -69}, {100, 100, 277}, {101, 122, 61}, },
            {{48, 122, -25}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 78, 78, 78, 22, -1, 17, -1, 4, 5, 15, 13, 10, 14, 11, 16, 76, 1, 0, 24, 21, 25, 9, 75, 6, 7, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 2, 8, 3, 23, -1, 77, -1, 18, 79, 12, 28, 26, 20, 27, 75, 75, 75, 75, 75, 75, 55, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 40, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 19, 77, 79, 75, 75, 75, 75, 35, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 52, 75, 47, 75, 75, 75, 75, 75, 75, 75, 75, 46, 75, 75, 31, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 49, 66, 75, 75, 75, 57, 75, 75, 75, 75, 65, 75, 53, 37, 50, 75, 48, 75, 75, 75, 75, 75, 75, 75, 75, 32, 75, 75, 59, 75, 54, 39, 75, 75, 75, 75, 75, 33, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 36, 75, 75, 64, 75, 75, 75, 75, 29, 75, 75, 75, 75, 70, 75, 75, 75, 75, 41, 75, 61, 75, 75, 75, 44, 75, 51, 58, 60, 75, 30, 75, 42, 75, 71, 75, 75, 75, 75, 75, 75, 73, 34, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 56, 75, 62, 75, 38, 75, 75, 45, 75, 43, 75, 75, 74, 75, 75, 75, 75, 75, 75, 72, 69, 68, 75, 75, 63, 75, 75, 75, 67, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
