/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class ATerminatedThreadtest extends PThreadtest
{
    private TThreadterminated _threadterminated_;
    private TLparen _lparen_;
    private PLhs _lhs_;
    private TRparen _rparen_;

    public ATerminatedThreadtest()
    {
    }

    public ATerminatedThreadtest(
        TThreadterminated _threadterminated_,
        TLparen _lparen_,
        PLhs _lhs_,
        TRparen _rparen_)
    {
        setThreadterminated(_threadterminated_);

        setLparen(_lparen_);

        setLhs(_lhs_);

        setRparen(_rparen_);

    }
    public Object clone()
    {
        return new ATerminatedThreadtest(
            (TThreadterminated) cloneNode(_threadterminated_),
            (TLparen) cloneNode(_lparen_),
            (PLhs) cloneNode(_lhs_),
            (TRparen) cloneNode(_rparen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATerminatedThreadtest(this);
    }

    public TThreadterminated getThreadterminated()
    {
        return _threadterminated_;
    }

    public void setThreadterminated(TThreadterminated node)
    {
        if(_threadterminated_ != null)
        {
            _threadterminated_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _threadterminated_ = node;
    }

    public TLparen getLparen()
    {
        return _lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lparen_ = node;
    }

    public PLhs getLhs()
    {
        return _lhs_;
    }

    public void setLhs(PLhs node)
    {
        if(_lhs_ != null)
        {
            _lhs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lhs_ = node;
    }

    public TRparen getRparen()
    {
        return _rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rparen_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_threadterminated_)
            + toString(_lparen_)
            + toString(_lhs_)
            + toString(_rparen_);
    }

    void removeChild(Node child)
    {
        if(_threadterminated_ == child)
        {
            _threadterminated_ = null;
            return;
        }

        if(_lparen_ == child)
        {
            _lparen_ = null;
            return;
        }

        if(_lhs_ == child)
        {
            _lhs_ = null;
            return;
        }

        if(_rparen_ == child)
        {
            _rparen_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_threadterminated_ == oldChild)
        {
            setThreadterminated((TThreadterminated) newChild);
            return;
        }

        if(_lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(_lhs_ == oldChild)
        {
            setLhs((PLhs) newChild);
            return;
        }

        if(_rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

    }
}
