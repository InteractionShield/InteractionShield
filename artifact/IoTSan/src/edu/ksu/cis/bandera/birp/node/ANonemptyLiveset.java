/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class ANonemptyLiveset extends PLiveset
{
    private TLive _live_;
    private TLbrace _lbrace_;
    private TId _first_;
    private final LinkedList _rest_ = new TypedLinkedList(new Rest_Cast());
    private TRbrace _rbrace_;

    public ANonemptyLiveset()
    {
    }

    public ANonemptyLiveset(
        TLive _live_,
        TLbrace _lbrace_,
        TId _first_,
        List _rest_,
        TRbrace _rbrace_)
    {
        setLive(_live_);

        setLbrace(_lbrace_);

        setFirst(_first_);

        {
            this._rest_.clear();
            this._rest_.addAll(_rest_);
        }

        setRbrace(_rbrace_);

    }

    public ANonemptyLiveset(
        TLive _live_,
        TLbrace _lbrace_,
        TId _first_,
        XPLivevar _rest_,
        TRbrace _rbrace_)
    {
        setLive(_live_);

        setLbrace(_lbrace_);

        setFirst(_first_);

        if(_rest_ != null)
        {
            while(_rest_ instanceof X1PLivevar)
            {
                this._rest_.addFirst(((X1PLivevar) _rest_).getPLivevar());
                _rest_ = ((X1PLivevar) _rest_).getXPLivevar();
            }
            this._rest_.addFirst(((X2PLivevar) _rest_).getPLivevar());
        }

        setRbrace(_rbrace_);

    }
    public Object clone()
    {
        return new ANonemptyLiveset(
            (TLive) cloneNode(_live_),
            (TLbrace) cloneNode(_lbrace_),
            (TId) cloneNode(_first_),
            cloneList(_rest_),
            (TRbrace) cloneNode(_rbrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANonemptyLiveset(this);
    }

    public TLive getLive()
    {
        return _live_;
    }

    public void setLive(TLive node)
    {
        if(_live_ != null)
        {
            _live_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _live_ = node;
    }

    public TLbrace getLbrace()
    {
        return _lbrace_;
    }

    public void setLbrace(TLbrace node)
    {
        if(_lbrace_ != null)
        {
            _lbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lbrace_ = node;
    }

    public TId getFirst()
    {
        return _first_;
    }

    public void setFirst(TId node)
    {
        if(_first_ != null)
        {
            _first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _first_ = node;
    }

    public LinkedList getRest()
    {
        return _rest_;
    }

    public void setRest(List list)
    {
        _rest_.clear();
        _rest_.addAll(list);
    }

    public TRbrace getRbrace()
    {
        return _rbrace_;
    }

    public void setRbrace(TRbrace node)
    {
        if(_rbrace_ != null)
        {
            _rbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rbrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_live_)
            + toString(_lbrace_)
            + toString(_first_)
            + toString(_rest_)
            + toString(_rbrace_);
    }

    void removeChild(Node child)
    {
        if(_live_ == child)
        {
            _live_ = null;
            return;
        }

        if(_lbrace_ == child)
        {
            _lbrace_ = null;
            return;
        }

        if(_first_ == child)
        {
            _first_ = null;
            return;
        }

        if(_rest_.remove(child))
        {
            return;
        }

        if(_rbrace_ == child)
        {
            _rbrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_live_ == oldChild)
        {
            setLive((TLive) newChild);
            return;
        }

        if(_lbrace_ == oldChild)
        {
            setLbrace((TLbrace) newChild);
            return;
        }

        if(_first_ == oldChild)
        {
            setFirst((TId) newChild);
            return;
        }

        for(ListIterator i = _rest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rbrace_ == oldChild)
        {
            setRbrace((TRbrace) newChild);
            return;
        }

    }

    private class Rest_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PLivevar node = (PLivevar) o;

            if((node.parent() != null) &&
                (node.parent() != ANonemptyLiveset.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ANonemptyLiveset.this))
            {
                node.parent(ANonemptyLiveset.this);
            }

            return node;
        }
    }
}
