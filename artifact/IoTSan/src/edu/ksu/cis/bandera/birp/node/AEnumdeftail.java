/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class AEnumdeftail extends PEnumdeftail
{
    private TComma _comma_;
    private PEnumconst _enumconst_;

    public AEnumdeftail()
    {
    }

    public AEnumdeftail(
        TComma _comma_,
        PEnumconst _enumconst_)
    {
        setComma(_comma_);

        setEnumconst(_enumconst_);

    }
    public Object clone()
    {
        return new AEnumdeftail(
            (TComma) cloneNode(_comma_),
            (PEnumconst) cloneNode(_enumconst_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumdeftail(this);
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PEnumconst getEnumconst()
    {
        return _enumconst_;
    }

    public void setEnumconst(PEnumconst node)
    {
        if(_enumconst_ != null)
        {
            _enumconst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _enumconst_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comma_)
            + toString(_enumconst_);
    }

    void removeChild(Node child)
    {
        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_enumconst_ == child)
        {
            _enumconst_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_enumconst_ == oldChild)
        {
            setEnumconst((PEnumconst) newChild);
            return;
        }

    }
}
