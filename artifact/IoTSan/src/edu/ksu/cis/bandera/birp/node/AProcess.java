/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class AProcess extends PProcess
{
    private TProcess _process_;
    private TId _startname_;
    private TLparen _lparen_;
    private TRparen _rparen_;
    private final LinkedList _definitions_ = new TypedLinkedList(new Definitions_Cast());
    private final LinkedList _subtypes_ = new TypedLinkedList(new Subtypes_Cast());
    private final LinkedList _globals_ = new TypedLinkedList(new Globals_Cast());
    private final LinkedList _threads_ = new TypedLinkedList(new Threads_Cast());
    private PPredicates _predicates_;
    private TEnd _end_;
    private TId _endname_;
    private TSemicolon _semicolon_;

    public AProcess()
    {
    }

    public AProcess(
        TProcess _process_,
        TId _startname_,
        TLparen _lparen_,
        TRparen _rparen_,
        List _definitions_,
        List _subtypes_,
        List _globals_,
        List _threads_,
        PPredicates _predicates_,
        TEnd _end_,
        TId _endname_,
        TSemicolon _semicolon_)
    {
        setProcess(_process_);

        setStartname(_startname_);

        setLparen(_lparen_);

        setRparen(_rparen_);

        {
            this._definitions_.clear();
            this._definitions_.addAll(_definitions_);
        }

        {
            this._subtypes_.clear();
            this._subtypes_.addAll(_subtypes_);
        }

        {
            this._globals_.clear();
            this._globals_.addAll(_globals_);
        }

        {
            this._threads_.clear();
            this._threads_.addAll(_threads_);
        }

        setPredicates(_predicates_);

        setEnd(_end_);

        setEndname(_endname_);

        setSemicolon(_semicolon_);

    }

    public AProcess(
        TProcess _process_,
        TId _startname_,
        TLparen _lparen_,
        TRparen _rparen_,
        XPDefinition _definitions_,
        XPSubtype _subtypes_,
        XPGlobal _globals_,
        XPThread _threads_,
        PPredicates _predicates_,
        TEnd _end_,
        TId _endname_,
        TSemicolon _semicolon_)
    {
        setProcess(_process_);

        setStartname(_startname_);

        setLparen(_lparen_);

        setRparen(_rparen_);

        if(_definitions_ != null)
        {
            while(_definitions_ instanceof X1PDefinition)
            {
                this._definitions_.addFirst(((X1PDefinition) _definitions_).getPDefinition());
                _definitions_ = ((X1PDefinition) _definitions_).getXPDefinition();
            }
            this._definitions_.addFirst(((X2PDefinition) _definitions_).getPDefinition());
        }

        if(_subtypes_ != null)
        {
            while(_subtypes_ instanceof X1PSubtype)
            {
                this._subtypes_.addFirst(((X1PSubtype) _subtypes_).getPSubtype());
                _subtypes_ = ((X1PSubtype) _subtypes_).getXPSubtype();
            }
            this._subtypes_.addFirst(((X2PSubtype) _subtypes_).getPSubtype());
        }

        if(_globals_ != null)
        {
            while(_globals_ instanceof X1PGlobal)
            {
                this._globals_.addFirst(((X1PGlobal) _globals_).getPGlobal());
                _globals_ = ((X1PGlobal) _globals_).getXPGlobal();
            }
            this._globals_.addFirst(((X2PGlobal) _globals_).getPGlobal());
        }

        if(_threads_ != null)
        {
            while(_threads_ instanceof X1PThread)
            {
                this._threads_.addFirst(((X1PThread) _threads_).getPThread());
                _threads_ = ((X1PThread) _threads_).getXPThread();
            }
            this._threads_.addFirst(((X2PThread) _threads_).getPThread());
        }

        setPredicates(_predicates_);

        setEnd(_end_);

        setEndname(_endname_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AProcess(
            (TProcess) cloneNode(_process_),
            (TId) cloneNode(_startname_),
            (TLparen) cloneNode(_lparen_),
            (TRparen) cloneNode(_rparen_),
            cloneList(_definitions_),
            cloneList(_subtypes_),
            cloneList(_globals_),
            cloneList(_threads_),
            (PPredicates) cloneNode(_predicates_),
            (TEnd) cloneNode(_end_),
            (TId) cloneNode(_endname_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProcess(this);
    }

    public TProcess getProcess()
    {
        return _process_;
    }

    public void setProcess(TProcess node)
    {
        if(_process_ != null)
        {
            _process_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _process_ = node;
    }

    public TId getStartname()
    {
        return _startname_;
    }

    public void setStartname(TId node)
    {
        if(_startname_ != null)
        {
            _startname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _startname_ = node;
    }

    public TLparen getLparen()
    {
        return _lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lparen_ = node;
    }

    public TRparen getRparen()
    {
        return _rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rparen_ = node;
    }

    public LinkedList getDefinitions()
    {
        return _definitions_;
    }

    public void setDefinitions(List list)
    {
        _definitions_.clear();
        _definitions_.addAll(list);
    }

    public LinkedList getSubtypes()
    {
        return _subtypes_;
    }

    public void setSubtypes(List list)
    {
        _subtypes_.clear();
        _subtypes_.addAll(list);
    }

    public LinkedList getGlobals()
    {
        return _globals_;
    }

    public void setGlobals(List list)
    {
        _globals_.clear();
        _globals_.addAll(list);
    }

    public LinkedList getThreads()
    {
        return _threads_;
    }

    public void setThreads(List list)
    {
        _threads_.clear();
        _threads_.addAll(list);
    }

    public PPredicates getPredicates()
    {
        return _predicates_;
    }

    public void setPredicates(PPredicates node)
    {
        if(_predicates_ != null)
        {
            _predicates_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _predicates_ = node;
    }

    public TEnd getEnd()
    {
        return _end_;
    }

    public void setEnd(TEnd node)
    {
        if(_end_ != null)
        {
            _end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _end_ = node;
    }

    public TId getEndname()
    {
        return _endname_;
    }

    public void setEndname(TId node)
    {
        if(_endname_ != null)
        {
            _endname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _endname_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_process_)
            + toString(_startname_)
            + toString(_lparen_)
            + toString(_rparen_)
            + toString(_definitions_)
            + toString(_subtypes_)
            + toString(_globals_)
            + toString(_threads_)
            + toString(_predicates_)
            + toString(_end_)
            + toString(_endname_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_process_ == child)
        {
            _process_ = null;
            return;
        }

        if(_startname_ == child)
        {
            _startname_ = null;
            return;
        }

        if(_lparen_ == child)
        {
            _lparen_ = null;
            return;
        }

        if(_rparen_ == child)
        {
            _rparen_ = null;
            return;
        }

        if(_definitions_.remove(child))
        {
            return;
        }

        if(_subtypes_.remove(child))
        {
            return;
        }

        if(_globals_.remove(child))
        {
            return;
        }

        if(_threads_.remove(child))
        {
            return;
        }

        if(_predicates_ == child)
        {
            _predicates_ = null;
            return;
        }

        if(_end_ == child)
        {
            _end_ = null;
            return;
        }

        if(_endname_ == child)
        {
            _endname_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_process_ == oldChild)
        {
            setProcess((TProcess) newChild);
            return;
        }

        if(_startname_ == oldChild)
        {
            setStartname((TId) newChild);
            return;
        }

        if(_lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(_rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        for(ListIterator i = _definitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _subtypes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _globals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _threads_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_predicates_ == oldChild)
        {
            setPredicates((PPredicates) newChild);
            return;
        }

        if(_end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(_endname_ == oldChild)
        {
            setEndname((TId) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }

    private class Definitions_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PDefinition node = (PDefinition) o;

            if((node.parent() != null) &&
                (node.parent() != AProcess.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AProcess.this))
            {
                node.parent(AProcess.this);
            }

            return node;
        }
    }

    private class Subtypes_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PSubtype node = (PSubtype) o;

            if((node.parent() != null) &&
                (node.parent() != AProcess.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AProcess.this))
            {
                node.parent(AProcess.this);
            }

            return node;
        }
    }

    private class Globals_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PGlobal node = (PGlobal) o;

            if((node.parent() != null) &&
                (node.parent() != AProcess.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AProcess.this))
            {
                node.parent(AProcess.this);
            }

            return node;
        }
    }

    private class Threads_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PThread node = (PThread) o;

            if((node.parent() != null) &&
                (node.parent() != AProcess.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AProcess.this))
            {
                node.parent(AProcess.this);
            }

            return node;
        }
    }
}
