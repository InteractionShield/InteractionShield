/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class ARemoterefExpr0 extends PExpr0
{
    private TId _threadname_;
    private TLbrace _lbrace_;
    private PLhs _lhs_;
    private TRbrace _rbrace_;
    private TColon _colon_;
    private TId _localname_;

    public ARemoterefExpr0()
    {
    }

    public ARemoterefExpr0(
        TId _threadname_,
        TLbrace _lbrace_,
        PLhs _lhs_,
        TRbrace _rbrace_,
        TColon _colon_,
        TId _localname_)
    {
        setThreadname(_threadname_);

        setLbrace(_lbrace_);

        setLhs(_lhs_);

        setRbrace(_rbrace_);

        setColon(_colon_);

        setLocalname(_localname_);

    }
    public Object clone()
    {
        return new ARemoterefExpr0(
            (TId) cloneNode(_threadname_),
            (TLbrace) cloneNode(_lbrace_),
            (PLhs) cloneNode(_lhs_),
            (TRbrace) cloneNode(_rbrace_),
            (TColon) cloneNode(_colon_),
            (TId) cloneNode(_localname_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARemoterefExpr0(this);
    }

    public TId getThreadname()
    {
        return _threadname_;
    }

    public void setThreadname(TId node)
    {
        if(_threadname_ != null)
        {
            _threadname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _threadname_ = node;
    }

    public TLbrace getLbrace()
    {
        return _lbrace_;
    }

    public void setLbrace(TLbrace node)
    {
        if(_lbrace_ != null)
        {
            _lbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lbrace_ = node;
    }

    public PLhs getLhs()
    {
        return _lhs_;
    }

    public void setLhs(PLhs node)
    {
        if(_lhs_ != null)
        {
            _lhs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lhs_ = node;
    }

    public TRbrace getRbrace()
    {
        return _rbrace_;
    }

    public void setRbrace(TRbrace node)
    {
        if(_rbrace_ != null)
        {
            _rbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rbrace_ = node;
    }

    public TColon getColon()
    {
        return _colon_;
    }

    public void setColon(TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _colon_ = node;
    }

    public TId getLocalname()
    {
        return _localname_;
    }

    public void setLocalname(TId node)
    {
        if(_localname_ != null)
        {
            _localname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _localname_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_threadname_)
            + toString(_lbrace_)
            + toString(_lhs_)
            + toString(_rbrace_)
            + toString(_colon_)
            + toString(_localname_);
    }

    void removeChild(Node child)
    {
        if(_threadname_ == child)
        {
            _threadname_ = null;
            return;
        }

        if(_lbrace_ == child)
        {
            _lbrace_ = null;
            return;
        }

        if(_lhs_ == child)
        {
            _lhs_ = null;
            return;
        }

        if(_rbrace_ == child)
        {
            _rbrace_ = null;
            return;
        }

        if(_colon_ == child)
        {
            _colon_ = null;
            return;
        }

        if(_localname_ == child)
        {
            _localname_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_threadname_ == oldChild)
        {
            setThreadname((TId) newChild);
            return;
        }

        if(_lbrace_ == oldChild)
        {
            setLbrace((TLbrace) newChild);
            return;
        }

        if(_lhs_ == oldChild)
        {
            setLhs((PLhs) newChild);
            return;
        }

        if(_rbrace_ == oldChild)
        {
            setRbrace((TRbrace) newChild);
            return;
        }

        if(_colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(_localname_ == oldChild)
        {
            setLocalname((TId) newChild);
            return;
        }

    }
}
