/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.analysis;

import java.util.*;
import edu.ksu.cis.bandera.birp.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getProcess() != null)
        {
            node.getProcess().apply(this);
        }
        outAProgram(node);
    }

    public void inAProcess(AProcess node)
    {
        defaultIn(node);
    }

    public void outAProcess(AProcess node)
    {
        defaultOut(node);
    }

    public void caseAProcess(AProcess node)
    {
        inAProcess(node);
        if(node.getProcess() != null)
        {
            node.getProcess().apply(this);
        }
        if(node.getStartname() != null)
        {
            node.getStartname().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        {
            Object temp[] = node.getDefinitions().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PDefinition) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getSubtypes().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PSubtype) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getGlobals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGlobal) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getThreads().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PThread) temp[i]).apply(this);
            }
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEndname() != null)
        {
            node.getEndname().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAProcess(node);
    }

    public void inAConstantDefinition(AConstantDefinition node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinition(AConstantDefinition node)
    {
        defaultOut(node);
    }

    public void caseAConstantDefinition(AConstantDefinition node)
    {
        inAConstantDefinition(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAConstantDefinition(node);
    }

    public void inATypedefDefinition(ATypedefDefinition node)
    {
        defaultIn(node);
    }

    public void outATypedefDefinition(ATypedefDefinition node)
    {
        defaultOut(node);
    }

    public void caseATypedefDefinition(ATypedefDefinition node)
    {
        inATypedefDefinition(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getTypespec() != null)
        {
            node.getTypespec().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATypedefDefinition(node);
    }

    public void inARangeTypespec(ARangeTypespec node)
    {
        defaultIn(node);
    }

    public void outARangeTypespec(ARangeTypespec node)
    {
        defaultOut(node);
    }

    public void caseARangeTypespec(ARangeTypespec node)
    {
        inARangeTypespec(node);
        if(node.getRange() != null)
        {
            node.getRange().apply(this);
        }
        if(node.getLow() != null)
        {
            node.getLow().apply(this);
        }
        if(node.getDotdot() != null)
        {
            node.getDotdot().apply(this);
        }
        if(node.getHi() != null)
        {
            node.getHi().apply(this);
        }
        outARangeTypespec(node);
    }

    public void inABooleanTypespec(ABooleanTypespec node)
    {
        defaultIn(node);
    }

    public void outABooleanTypespec(ABooleanTypespec node)
    {
        defaultOut(node);
    }

    public void caseABooleanTypespec(ABooleanTypespec node)
    {
        inABooleanTypespec(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanTypespec(node);
    }

    public void inATidTypespec(ATidTypespec node)
    {
        defaultIn(node);
    }

    public void outATidTypespec(ATidTypespec node)
    {
        defaultOut(node);
    }

    public void caseATidTypespec(ATidTypespec node)
    {
        inATidTypespec(node);
        if(node.getTid() != null)
        {
            node.getTid().apply(this);
        }
        outATidTypespec(node);
    }

    public void inAEnumeratedTypespec(AEnumeratedTypespec node)
    {
        defaultIn(node);
    }

    public void outAEnumeratedTypespec(AEnumeratedTypespec node)
    {
        defaultOut(node);
    }

    public void caseAEnumeratedTypespec(AEnumeratedTypespec node)
    {
        inAEnumeratedTypespec(node);
        if(node.getEnum() != null)
        {
            node.getEnum().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            Object temp[] = node.getRest().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PEnumdeftail) temp[i]).apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outAEnumeratedTypespec(node);
    }

    public void inARecordTypespec(ARecordTypespec node)
    {
        defaultIn(node);
    }

    public void outARecordTypespec(ARecordTypespec node)
    {
        defaultOut(node);
    }

    public void caseARecordTypespec(ARecordTypespec node)
    {
        inARecordTypespec(node);
        if(node.getRecord() != null)
        {
            node.getRecord().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            Object temp[] = node.getFields().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PField) temp[i]).apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outARecordTypespec(node);
    }

    public void inAArrayTypespec(AArrayTypespec node)
    {
        defaultIn(node);
    }

    public void outAArrayTypespec(AArrayTypespec node)
    {
        defaultOut(node);
    }

    public void caseAArrayTypespec(AArrayTypespec node)
    {
        inAArrayTypespec(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrayTypespec(node);
    }

    public void inARefTypespec(ARefTypespec node)
    {
        defaultIn(node);
    }

    public void outARefTypespec(ARefTypespec node)
    {
        defaultOut(node);
    }

    public void caseARefTypespec(ARefTypespec node)
    {
        inARefTypespec(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            Object temp[] = node.getRest().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PReftail) temp[i]).apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outARefTypespec(node);
    }

    public void inALockTypespec(ALockTypespec node)
    {
        defaultIn(node);
    }

    public void outALockTypespec(ALockTypespec node)
    {
        defaultOut(node);
    }

    public void caseALockTypespec(ALockTypespec node)
    {
        inALockTypespec(node);
        if(node.getLock() != null)
        {
            node.getLock().apply(this);
        }
        if(node.getWait() != null)
        {
            node.getWait().apply(this);
        }
        if(node.getReentrant() != null)
        {
            node.getReentrant().apply(this);
        }
        outALockTypespec(node);
    }

    public void inATypespecType(ATypespecType node)
    {
        defaultIn(node);
    }

    public void outATypespecType(ATypespecType node)
    {
        defaultOut(node);
    }

    public void caseATypespecType(ATypespecType node)
    {
        inATypespecType(node);
        if(node.getTypespec() != null)
        {
            node.getTypespec().apply(this);
        }
        outATypespecType(node);
    }

    public void inADefinedType(ADefinedType node)
    {
        defaultIn(node);
    }

    public void outADefinedType(ADefinedType node)
    {
        defaultOut(node);
    }

    public void caseADefinedType(ADefinedType node)
    {
        inADefinedType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADefinedType(node);
    }

    public void inANameEnumconst(ANameEnumconst node)
    {
        defaultIn(node);
    }

    public void outANameEnumconst(ANameEnumconst node)
    {
        defaultOut(node);
    }

    public void caseANameEnumconst(ANameEnumconst node)
    {
        inANameEnumconst(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANameEnumconst(node);
    }

    public void inANamevalueEnumconst(ANamevalueEnumconst node)
    {
        defaultIn(node);
    }

    public void outANamevalueEnumconst(ANamevalueEnumconst node)
    {
        defaultOut(node);
    }

    public void caseANamevalueEnumconst(ANamevalueEnumconst node)
    {
        inANamevalueEnumconst(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outANamevalueEnumconst(node);
    }

    public void inAEnumdeftail(AEnumdeftail node)
    {
        defaultIn(node);
    }

    public void outAEnumdeftail(AEnumdeftail node)
    {
        defaultOut(node);
    }

    public void caseAEnumdeftail(AEnumdeftail node)
    {
        inAEnumdeftail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEnumconst() != null)
        {
            node.getEnumconst().apply(this);
        }
        outAEnumdeftail(node);
    }

    public void inAField(AField node)
    {
        defaultIn(node);
    }

    public void outAField(AField node)
    {
        defaultOut(node);
    }

    public void caseAField(AField node)
    {
        inAField(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAField(node);
    }

    public void inAReftail(AReftail node)
    {
        defaultIn(node);
    }

    public void outAReftail(AReftail node)
    {
        defaultOut(node);
    }

    public void caseAReftail(AReftail node)
    {
        inAReftail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAReftail(node);
    }

    public void inAIntConst(AIntConst node)
    {
        defaultIn(node);
    }

    public void outAIntConst(AIntConst node)
    {
        defaultOut(node);
    }

    public void caseAIntConst(AIntConst node)
    {
        inAIntConst(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntConst(node);
    }

    public void inAIdConst(AIdConst node)
    {
        defaultIn(node);
    }

    public void outAIdConst(AIdConst node)
    {
        defaultOut(node);
    }

    public void caseAIdConst(AIdConst node)
    {
        inAIdConst(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdConst(node);
    }

    public void inASubtype(ASubtype node)
    {
        defaultIn(node);
    }

    public void outASubtype(ASubtype node)
    {
        defaultOut(node);
    }

    public void caseASubtype(ASubtype node)
    {
        inASubtype(node);
        if(node.getSubclass() != null)
        {
            node.getSubclass().apply(this);
        }
        if(node.getExtendz() != null)
        {
            node.getExtendz().apply(this);
        }
        if(node.getSuperclass() != null)
        {
            node.getSuperclass().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASubtype(node);
    }

    public void inAVariableGlobal(AVariableGlobal node)
    {
        defaultIn(node);
    }

    public void outAVariableGlobal(AVariableGlobal node)
    {
        defaultOut(node);
    }

    public void caseAVariableGlobal(AVariableGlobal node)
    {
        inAVariableGlobal(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariableGlobal(node);
    }

    public void inACollectionGlobal(ACollectionGlobal node)
    {
        defaultIn(node);
    }

    public void outACollectionGlobal(ACollectionGlobal node)
    {
        defaultOut(node);
    }

    public void caseACollectionGlobal(ACollectionGlobal node)
    {
        inACollectionGlobal(node);
        if(node.getCollection() != null)
        {
            node.getCollection().apply(this);
        }
        outACollectionGlobal(node);
    }

    public void inACollection(ACollection node)
    {
        defaultIn(node);
    }

    public void outACollection(ACollection node)
    {
        defaultOut(node);
    }

    public void caseACollection(ACollection node)
    {
        inACollection(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getCollection() != null)
        {
            node.getCollection().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outACollection(node);
    }

    public void inAVariable(AVariable node)
    {
        defaultIn(node);
    }

    public void outAVariable(AVariable node)
    {
        defaultOut(node);
    }

    public void caseAVariable(AVariable node)
    {
        inAVariable(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getInitializer() != null)
        {
            node.getInitializer().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVariable(node);
    }

    public void inAOneParameters(AOneParameters node)
    {
        defaultIn(node);
    }

    public void outAOneParameters(AOneParameters node)
    {
        defaultOut(node);
    }

    public void caseAOneParameters(AOneParameters node)
    {
        inAOneParameters(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAOneParameters(node);
    }

    public void inAManyParameters(AManyParameters node)
    {
        defaultIn(node);
    }

    public void outAManyParameters(AManyParameters node)
    {
        defaultOut(node);
    }

    public void caseAManyParameters(AManyParameters node)
    {
        inAManyParameters(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        outAManyParameters(node);
    }

    public void inAParameter(AParameter node)
    {
        defaultIn(node);
    }

    public void outAParameter(AParameter node)
    {
        defaultOut(node);
    }

    public void caseAParameter(AParameter node)
    {
        inAParameter(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAParameter(node);
    }

    public void inAInitializer(AInitializer node)
    {
        defaultIn(node);
    }

    public void outAInitializer(AInitializer node)
    {
        defaultOut(node);
    }

    public void caseAInitializer(AInitializer node)
    {
        inAInitializer(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAInitializer(node);
    }

    public void inAIntegerValue(AIntegerValue node)
    {
        defaultIn(node);
    }

    public void outAIntegerValue(AIntegerValue node)
    {
        defaultOut(node);
    }

    public void caseAIntegerValue(AIntegerValue node)
    {
        inAIntegerValue(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntegerValue(node);
    }

    public void inABoolValue(ABoolValue node)
    {
        defaultIn(node);
    }

    public void outABoolValue(ABoolValue node)
    {
        defaultOut(node);
    }

    public void caseABoolValue(ABoolValue node)
    {
        inABoolValue(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolValue(node);
    }

    public void inAIdValue(AIdValue node)
    {
        defaultIn(node);
    }

    public void outAIdValue(AIdValue node)
    {
        defaultOut(node);
    }

    public void caseAIdValue(AIdValue node)
    {
        inAIdValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdValue(node);
    }

    public void inANullValue(ANullValue node)
    {
        defaultIn(node);
    }

    public void outANullValue(ANullValue node)
    {
        defaultOut(node);
    }

    public void caseANullValue(ANullValue node)
    {
        inANullValue(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullValue(node);
    }

    public void inARefValue(ARefValue node)
    {
        defaultIn(node);
    }

    public void outARefValue(ARefValue node)
    {
        defaultOut(node);
    }

    public void caseARefValue(ARefValue node)
    {
        inARefValue(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outARefValue(node);
    }

    public void inAFalseBool(AFalseBool node)
    {
        defaultIn(node);
    }

    public void outAFalseBool(AFalseBool node)
    {
        defaultOut(node);
    }

    public void caseAFalseBool(AFalseBool node)
    {
        inAFalseBool(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBool(node);
    }

    public void inATrueBool(ATrueBool node)
    {
        defaultIn(node);
    }

    public void outATrueBool(ATrueBool node)
    {
        defaultOut(node);
    }

    public void caseATrueBool(ATrueBool node)
    {
        inATrueBool(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBool(node);
    }

    public void inAThread(AThread node)
    {
        defaultIn(node);
    }

    public void outAThread(AThread node)
    {
        defaultOut(node);
    }

    public void caseAThread(AThread node)
    {
        inAThread(node);
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getThread() != null)
        {
            node.getThread().apply(this);
        }
        if(node.getStartname() != null)
        {
            node.getStartname().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        {
            Object temp[] = node.getLocals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PVariable) temp[i]).apply(this);
            }
        }
        if(node.getStartloc() != null)
        {
            node.getStartloc().apply(this);
        }
        {
            Object temp[] = node.getLocations().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PLocation) temp[i]).apply(this);
            }
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEndname() != null)
        {
            node.getEndname().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAThread(node);
    }

    public void inALocation(ALocation node)
    {
        defaultIn(node);
    }

    public void outALocation(ALocation node)
    {
        defaultOut(node);
    }

    public void caseALocation(ALocation node)
    {
        inALocation(node);
        if(node.getLoc() != null)
        {
            node.getLoc().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getLivevars() != null)
        {
            node.getLivevars().apply(this);
        }
        {
            Object temp[] = node.getTransformations().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PTransformation) temp[i]).apply(this);
            }
        }
        outALocation(node);
    }

    public void inATransformation(ATransformation node)
    {
        defaultIn(node);
    }

    public void outATransformation(ATransformation node)
    {
        defaultOut(node);
    }

    public void caseATransformation(ATransformation node)
    {
        inATransformation(node);
        if(node.getWhen() != null)
        {
            node.getWhen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getInvisible() != null)
        {
            node.getInvisible().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            Object temp[] = node.getActions().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAction) temp[i]).apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATransformation(node);
    }

    public void inAEmptyLiveset(AEmptyLiveset node)
    {
        defaultIn(node);
    }

    public void outAEmptyLiveset(AEmptyLiveset node)
    {
        defaultOut(node);
    }

    public void caseAEmptyLiveset(AEmptyLiveset node)
    {
        inAEmptyLiveset(node);
        if(node.getLive() != null)
        {
            node.getLive().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outAEmptyLiveset(node);
    }

    public void inANonemptyLiveset(ANonemptyLiveset node)
    {
        defaultIn(node);
    }

    public void outANonemptyLiveset(ANonemptyLiveset node)
    {
        defaultOut(node);
    }

    public void caseANonemptyLiveset(ANonemptyLiveset node)
    {
        inANonemptyLiveset(node);
        if(node.getLive() != null)
        {
            node.getLive().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            Object temp[] = node.getRest().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PLivevar) temp[i]).apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outANonemptyLiveset(node);
    }

    public void inALivevar(ALivevar node)
    {
        defaultIn(node);
    }

    public void outALivevar(ALivevar node)
    {
        defaultOut(node);
    }

    public void caseALivevar(ALivevar node)
    {
        inALivevar(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALivevar(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        if(node.getExpr7() != null)
        {
            node.getExpr7().apply(this);
        }
        outAExpr(node);
    }

    public void inAExpr6Expr7(AExpr6Expr7 node)
    {
        defaultIn(node);
    }

    public void outAExpr6Expr7(AExpr6Expr7 node)
    {
        defaultOut(node);
    }

    public void caseAExpr6Expr7(AExpr6Expr7 node)
    {
        inAExpr6Expr7(node);
        if(node.getExpr6() != null)
        {
            node.getExpr6().apply(this);
        }
        outAExpr6Expr7(node);
    }

    public void inAOrExpr7(AOrExpr7 node)
    {
        defaultIn(node);
    }

    public void outAOrExpr7(AOrExpr7 node)
    {
        defaultOut(node);
    }

    public void caseAOrExpr7(AOrExpr7 node)
    {
        inAOrExpr7(node);
        if(node.getExpr7() != null)
        {
            node.getExpr7().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpr6() != null)
        {
            node.getExpr6().apply(this);
        }
        outAOrExpr7(node);
    }

    public void inAExpr5Expr6(AExpr5Expr6 node)
    {
        defaultIn(node);
    }

    public void outAExpr5Expr6(AExpr5Expr6 node)
    {
        defaultOut(node);
    }

    public void caseAExpr5Expr6(AExpr5Expr6 node)
    {
        inAExpr5Expr6(node);
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        outAExpr5Expr6(node);
    }

    public void inAAndExpr6(AAndExpr6 node)
    {
        defaultIn(node);
    }

    public void outAAndExpr6(AAndExpr6 node)
    {
        defaultOut(node);
    }

    public void caseAAndExpr6(AAndExpr6 node)
    {
        inAAndExpr6(node);
        if(node.getExpr6() != null)
        {
            node.getExpr6().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        outAAndExpr6(node);
    }

    public void inAExpr4Expr5(AExpr4Expr5 node)
    {
        defaultIn(node);
    }

    public void outAExpr4Expr5(AExpr4Expr5 node)
    {
        defaultOut(node);
    }

    public void caseAExpr4Expr5(AExpr4Expr5 node)
    {
        inAExpr4Expr5(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        outAExpr4Expr5(node);
    }

    public void inAEqExpr5(AEqExpr5 node)
    {
        defaultIn(node);
    }

    public void outAEqExpr5(AEqExpr5 node)
    {
        defaultOut(node);
    }

    public void caseAEqExpr5(AEqExpr5 node)
    {
        inAEqExpr5(node);
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        outAEqExpr5(node);
    }

    public void inANoteqExpr5(ANoteqExpr5 node)
    {
        defaultIn(node);
    }

    public void outANoteqExpr5(ANoteqExpr5 node)
    {
        defaultOut(node);
    }

    public void caseANoteqExpr5(ANoteqExpr5 node)
    {
        inANoteqExpr5(node);
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        if(node.getNoteq() != null)
        {
            node.getNoteq().apply(this);
        }
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        outANoteqExpr5(node);
    }

    public void inAExpr3Expr4(AExpr3Expr4 node)
    {
        defaultIn(node);
    }

    public void outAExpr3Expr4(AExpr3Expr4 node)
    {
        defaultOut(node);
    }

    public void caseAExpr3Expr4(AExpr3Expr4 node)
    {
        inAExpr3Expr4(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAExpr3Expr4(node);
    }

    public void inALtExpr4(ALtExpr4 node)
    {
        defaultIn(node);
    }

    public void outALtExpr4(ALtExpr4 node)
    {
        defaultOut(node);
    }

    public void caseALtExpr4(ALtExpr4 node)
    {
        inALtExpr4(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outALtExpr4(node);
    }

    public void inALeExpr4(ALeExpr4 node)
    {
        defaultIn(node);
    }

    public void outALeExpr4(ALeExpr4 node)
    {
        defaultOut(node);
    }

    public void caseALeExpr4(ALeExpr4 node)
    {
        inALeExpr4(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outALeExpr4(node);
    }

    public void inAGtExpr4(AGtExpr4 node)
    {
        defaultIn(node);
    }

    public void outAGtExpr4(AGtExpr4 node)
    {
        defaultOut(node);
    }

    public void caseAGtExpr4(AGtExpr4 node)
    {
        inAGtExpr4(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAGtExpr4(node);
    }

    public void inAGeExpr4(AGeExpr4 node)
    {
        defaultIn(node);
    }

    public void outAGeExpr4(AGeExpr4 node)
    {
        defaultOut(node);
    }

    public void caseAGeExpr4(AGeExpr4 node)
    {
        inAGeExpr4(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAGeExpr4(node);
    }

    public void inAExpr2Expr3(AExpr2Expr3 node)
    {
        defaultIn(node);
    }

    public void outAExpr2Expr3(AExpr2Expr3 node)
    {
        defaultOut(node);
    }

    public void caseAExpr2Expr3(AExpr2Expr3 node)
    {
        inAExpr2Expr3(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAExpr2Expr3(node);
    }

    public void inAPlusExpr3(APlusExpr3 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr3(APlusExpr3 node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpr3(APlusExpr3 node)
    {
        inAPlusExpr3(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAPlusExpr3(node);
    }

    public void inAMinusExpr3(AMinusExpr3 node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr3(AMinusExpr3 node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpr3(AMinusExpr3 node)
    {
        inAMinusExpr3(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAMinusExpr3(node);
    }

    public void inAExpr1Expr2(AExpr1Expr2 node)
    {
        defaultIn(node);
    }

    public void outAExpr1Expr2(AExpr1Expr2 node)
    {
        defaultOut(node);
    }

    public void caseAExpr1Expr2(AExpr1Expr2 node)
    {
        inAExpr1Expr2(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAExpr1Expr2(node);
    }

    public void inAMultExpr2(AMultExpr2 node)
    {
        defaultIn(node);
    }

    public void outAMultExpr2(AMultExpr2 node)
    {
        defaultOut(node);
    }

    public void caseAMultExpr2(AMultExpr2 node)
    {
        inAMultExpr2(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAMultExpr2(node);
    }

    public void inADivExpr2(ADivExpr2 node)
    {
        defaultIn(node);
    }

    public void outADivExpr2(ADivExpr2 node)
    {
        defaultOut(node);
    }

    public void caseADivExpr2(ADivExpr2 node)
    {
        inADivExpr2(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outADivExpr2(node);
    }

    public void inAModExpr2(AModExpr2 node)
    {
        defaultIn(node);
    }

    public void outAModExpr2(AModExpr2 node)
    {
        defaultOut(node);
    }

    public void caseAModExpr2(AModExpr2 node)
    {
        inAModExpr2(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAModExpr2(node);
    }

    public void inAExpr0Expr1(AExpr0Expr1 node)
    {
        defaultIn(node);
    }

    public void outAExpr0Expr1(AExpr0Expr1 node)
    {
        defaultOut(node);
    }

    public void caseAExpr0Expr1(AExpr0Expr1 node)
    {
        inAExpr0Expr1(node);
        if(node.getExpr0() != null)
        {
            node.getExpr0().apply(this);
        }
        outAExpr0Expr1(node);
    }

    public void inAPlusExpr1(APlusExpr1 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr1(APlusExpr1 node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpr1(APlusExpr1 node)
    {
        inAPlusExpr1(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAPlusExpr1(node);
    }

    public void inAMinusExpr1(AMinusExpr1 node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr1(AMinusExpr1 node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpr1(AMinusExpr1 node)
    {
        inAMinusExpr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAMinusExpr1(node);
    }

    public void inANotExpr1(ANotExpr1 node)
    {
        defaultIn(node);
    }

    public void outANotExpr1(ANotExpr1 node)
    {
        defaultOut(node);
    }

    public void caseANotExpr1(ANotExpr1 node)
    {
        inANotExpr1(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outANotExpr1(node);
    }

    public void inAValueExpr0(AValueExpr0 node)
    {
        defaultIn(node);
    }

    public void outAValueExpr0(AValueExpr0 node)
    {
        defaultOut(node);
    }

    public void caseAValueExpr0(AValueExpr0 node)
    {
        inAValueExpr0(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpr0(node);
    }

    public void inALocktestExpr0(ALocktestExpr0 node)
    {
        defaultIn(node);
    }

    public void outALocktestExpr0(ALocktestExpr0 node)
    {
        defaultOut(node);
    }

    public void caseALocktestExpr0(ALocktestExpr0 node)
    {
        inALocktestExpr0(node);
        if(node.getLocktest() != null)
        {
            node.getLocktest().apply(this);
        }
        outALocktestExpr0(node);
    }

    public void inAThreadtestExpr0(AThreadtestExpr0 node)
    {
        defaultIn(node);
    }

    public void outAThreadtestExpr0(AThreadtestExpr0 node)
    {
        defaultOut(node);
    }

    public void caseAThreadtestExpr0(AThreadtestExpr0 node)
    {
        inAThreadtestExpr0(node);
        if(node.getThreadtest() != null)
        {
            node.getThreadtest().apply(this);
        }
        outAThreadtestExpr0(node);
    }

    public void inAFieldselectExpr0(AFieldselectExpr0 node)
    {
        defaultIn(node);
    }

    public void outAFieldselectExpr0(AFieldselectExpr0 node)
    {
        defaultOut(node);
    }

    public void caseAFieldselectExpr0(AFieldselectExpr0 node)
    {
        inAFieldselectExpr0(node);
        if(node.getExpr0() != null)
        {
            node.getExpr0().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFieldselectExpr0(node);
    }

    public void inAArrayselectExpr0(AArrayselectExpr0 node)
    {
        defaultIn(node);
    }

    public void outAArrayselectExpr0(AArrayselectExpr0 node)
    {
        defaultOut(node);
    }

    public void caseAArrayselectExpr0(AArrayselectExpr0 node)
    {
        inAArrayselectExpr0(node);
        if(node.getExpr0() != null)
        {
            node.getExpr0().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        outAArrayselectExpr0(node);
    }

    public void inAArraylengthExpr0(AArraylengthExpr0 node)
    {
        defaultIn(node);
    }

    public void outAArraylengthExpr0(AArraylengthExpr0 node)
    {
        defaultOut(node);
    }

    public void caseAArraylengthExpr0(AArraylengthExpr0 node)
    {
        inAArraylengthExpr0(node);
        if(node.getExpr0() != null)
        {
            node.getExpr0().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        outAArraylengthExpr0(node);
    }

    public void inAInstanceofExpr0(AInstanceofExpr0 node)
    {
        defaultIn(node);
    }

    public void outAInstanceofExpr0(AInstanceofExpr0 node)
    {
        defaultOut(node);
    }

    public void caseAInstanceofExpr0(AInstanceofExpr0 node)
    {
        inAInstanceofExpr0(node);
        if(node.getExpr0() != null)
        {
            node.getExpr0().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAInstanceofExpr0(node);
    }

    public void inARemoterefExpr0(ARemoterefExpr0 node)
    {
        defaultIn(node);
    }

    public void outARemoterefExpr0(ARemoterefExpr0 node)
    {
        defaultOut(node);
    }

    public void caseARemoterefExpr0(ARemoterefExpr0 node)
    {
        inARemoterefExpr0(node);
        if(node.getThreadname() != null)
        {
            node.getThreadname().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getLocalname() != null)
        {
            node.getLocalname().apply(this);
        }
        outARemoterefExpr0(node);
    }

    public void inAParenexprExpr0(AParenexprExpr0 node)
    {
        defaultIn(node);
    }

    public void outAParenexprExpr0(AParenexprExpr0 node)
    {
        defaultOut(node);
    }

    public void caseAParenexprExpr0(AParenexprExpr0 node)
    {
        inAParenexprExpr0(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAParenexprExpr0(node);
    }

    public void inAValueLhs(AValueLhs node)
    {
        defaultIn(node);
    }

    public void outAValueLhs(AValueLhs node)
    {
        defaultOut(node);
    }

    public void caseAValueLhs(AValueLhs node)
    {
        inAValueLhs(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAValueLhs(node);
    }

    public void inAFieldselectLhs(AFieldselectLhs node)
    {
        defaultIn(node);
    }

    public void outAFieldselectLhs(AFieldselectLhs node)
    {
        defaultOut(node);
    }

    public void caseAFieldselectLhs(AFieldselectLhs node)
    {
        inAFieldselectLhs(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFieldselectLhs(node);
    }

    public void inAArrayselectLhs(AArrayselectLhs node)
    {
        defaultIn(node);
    }

    public void outAArrayselectLhs(AArrayselectLhs node)
    {
        defaultOut(node);
    }

    public void caseAArrayselectLhs(AArrayselectLhs node)
    {
        inAArrayselectLhs(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        outAArrayselectLhs(node);
    }

    public void inAArraylengthLhs(AArraylengthLhs node)
    {
        defaultIn(node);
    }

    public void outAArraylengthLhs(AArraylengthLhs node)
    {
        defaultOut(node);
    }

    public void caseAArraylengthLhs(AArraylengthLhs node)
    {
        inAArraylengthLhs(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        outAArraylengthLhs(node);
    }

    public void inAAssignmentAction(AAssignmentAction node)
    {
        defaultIn(node);
    }

    public void outAAssignmentAction(AAssignmentAction node)
    {
        defaultOut(node);
    }

    public void caseAAssignmentAction(AAssignmentAction node)
    {
        inAAssignmentAction(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentAction(node);
    }

    public void inAPrintactionAction(APrintactionAction node)
    {
        defaultIn(node);
    }

    public void outAPrintactionAction(APrintactionAction node)
    {
        defaultOut(node);
    }

    public void caseAPrintactionAction(APrintactionAction node)
    {
        inAPrintactionAction(node);
        if(node.getPrintaction() != null)
        {
            node.getPrintaction().apply(this);
        }
        outAPrintactionAction(node);
    }

    public void inAAssertactionAction(AAssertactionAction node)
    {
        defaultIn(node);
    }

    public void outAAssertactionAction(AAssertactionAction node)
    {
        defaultOut(node);
    }

    public void caseAAssertactionAction(AAssertactionAction node)
    {
        inAAssertactionAction(node);
        if(node.getAssertaction() != null)
        {
            node.getAssertaction().apply(this);
        }
        outAAssertactionAction(node);
    }

    public void inAChoiceAction(AChoiceAction node)
    {
        defaultIn(node);
    }

    public void outAChoiceAction(AChoiceAction node)
    {
        defaultOut(node);
    }

    public void caseAChoiceAction(AChoiceAction node)
    {
        inAChoiceAction(node);
        if(node.getChoice() != null)
        {
            node.getChoice().apply(this);
        }
        outAChoiceAction(node);
    }

    public void inAAllocationAction(AAllocationAction node)
    {
        defaultIn(node);
    }

    public void outAAllocationAction(AAllocationAction node)
    {
        defaultOut(node);
    }

    public void caseAAllocationAction(AAllocationAction node)
    {
        inAAllocationAction(node);
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        outAAllocationAction(node);
    }

    public void inALockupdateAction(ALockupdateAction node)
    {
        defaultIn(node);
    }

    public void outALockupdateAction(ALockupdateAction node)
    {
        defaultOut(node);
    }

    public void caseALockupdateAction(ALockupdateAction node)
    {
        inALockupdateAction(node);
        if(node.getLockupdate() != null)
        {
            node.getLockupdate().apply(this);
        }
        outALockupdateAction(node);
    }

    public void inAThreadupdateAction(AThreadupdateAction node)
    {
        defaultIn(node);
    }

    public void outAThreadupdateAction(AThreadupdateAction node)
    {
        defaultOut(node);
    }

    public void caseAThreadupdateAction(AThreadupdateAction node)
    {
        inAThreadupdateAction(node);
        if(node.getThreadupdate() != null)
        {
            node.getThreadupdate().apply(this);
        }
        outAThreadupdateAction(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignment(node);
    }

    public void inAPrintaction(APrintaction node)
    {
        defaultIn(node);
    }

    public void outAPrintaction(APrintaction node)
    {
        defaultOut(node);
    }

    public void caseAPrintaction(APrintaction node)
    {
        inAPrintaction(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getPrintargs() != null)
        {
            node.getPrintargs().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintaction(node);
    }

    public void inAOnePrintargs(AOnePrintargs node)
    {
        defaultIn(node);
    }

    public void outAOnePrintargs(AOnePrintargs node)
    {
        defaultOut(node);
    }

    public void caseAOnePrintargs(AOnePrintargs node)
    {
        inAOnePrintargs(node);
        if(node.getPrintarg() != null)
        {
            node.getPrintarg().apply(this);
        }
        outAOnePrintargs(node);
    }

    public void inAMorePrintargs(AMorePrintargs node)
    {
        defaultIn(node);
    }

    public void outAMorePrintargs(AMorePrintargs node)
    {
        defaultOut(node);
    }

    public void caseAMorePrintargs(AMorePrintargs node)
    {
        inAMorePrintargs(node);
        if(node.getPrintarg() != null)
        {
            node.getPrintarg().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPrintargs() != null)
        {
            node.getPrintargs().apply(this);
        }
        outAMorePrintargs(node);
    }

    public void inAStringPrintarg(AStringPrintarg node)
    {
        defaultIn(node);
    }

    public void outAStringPrintarg(AStringPrintarg node)
    {
        defaultOut(node);
    }

    public void caseAStringPrintarg(AStringPrintarg node)
    {
        inAStringPrintarg(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringPrintarg(node);
    }

    public void inAVarPrintarg(AVarPrintarg node)
    {
        defaultIn(node);
    }

    public void outAVarPrintarg(AVarPrintarg node)
    {
        defaultOut(node);
    }

    public void caseAVarPrintarg(AVarPrintarg node)
    {
        inAVarPrintarg(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarPrintarg(node);
    }

    public void inAAssertaction(AAssertaction node)
    {
        defaultIn(node);
    }

    public void outAAssertaction(AAssertaction node)
    {
        defaultOut(node);
    }

    public void caseAAssertaction(AAssertaction node)
    {
        inAAssertaction(node);
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssertaction(node);
    }

    public void inAInternChoice(AInternChoice node)
    {
        defaultIn(node);
    }

    public void outAInternChoice(AInternChoice node)
    {
        defaultOut(node);
    }

    public void caseAInternChoice(AInternChoice node)
    {
        inAInternChoice(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getInternchoose() != null)
        {
            node.getInternchoose().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            Object temp[] = node.getRest().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PChoicetail) temp[i]).apply(this);
            }
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAInternChoice(node);
    }

    public void inAExternChoice(AExternChoice node)
    {
        defaultIn(node);
    }

    public void outAExternChoice(AExternChoice node)
    {
        defaultOut(node);
    }

    public void caseAExternChoice(AExternChoice node)
    {
        inAExternChoice(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExternchoose() != null)
        {
            node.getExternchoose().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            Object temp[] = node.getRest().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PChoicetail) temp[i]).apply(this);
            }
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExternChoice(node);
    }

    public void inAForallChoice(AForallChoice node)
    {
        defaultIn(node);
    }

    public void outAForallChoice(AForallChoice node)
    {
        defaultOut(node);
    }

    public void caseAForallChoice(AForallChoice node)
    {
        inAForallChoice(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getForall() != null)
        {
            node.getForall().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAForallChoice(node);
    }

    public void inAChoicetail(AChoicetail node)
    {
        defaultIn(node);
    }

    public void outAChoicetail(AChoicetail node)
    {
        defaultOut(node);
    }

    public void caseAChoicetail(AChoicetail node)
    {
        inAChoicetail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAChoicetail(node);
    }

    public void inAAllocation(AAllocation node)
    {
        defaultIn(node);
    }

    public void outAAllocation(AAllocation node)
    {
        defaultOut(node);
    }

    public void caseAAllocation(AAllocation node)
    {
        inAAllocation(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getArraylength() != null)
        {
            node.getArraylength().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAllocation(node);
    }

    public void inAArraylength(AArraylength node)
    {
        defaultIn(node);
    }

    public void outAArraylength(AArraylength node)
    {
        defaultOut(node);
    }

    public void caseAArraylength(AArraylength node)
    {
        inAArraylength(node);
        if(node.getLbrack() != null)
        {
            node.getLbrack().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRbrack() != null)
        {
            node.getRbrack().apply(this);
        }
        outAArraylength(node);
    }

    public void inALockupdate(ALockupdate node)
    {
        defaultIn(node);
    }

    public void outALockupdate(ALockupdate node)
    {
        defaultOut(node);
    }

    public void caseALockupdate(ALockupdate node)
    {
        inALockupdate(node);
        if(node.getLockOp() != null)
        {
            node.getLockOp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outALockupdate(node);
    }

    public void inALockLockOp(ALockLockOp node)
    {
        defaultIn(node);
    }

    public void outALockLockOp(ALockLockOp node)
    {
        defaultOut(node);
    }

    public void caseALockLockOp(ALockLockOp node)
    {
        inALockLockOp(node);
        if(node.getLock() != null)
        {
            node.getLock().apply(this);
        }
        outALockLockOp(node);
    }

    public void inAUnlockLockOp(AUnlockLockOp node)
    {
        defaultIn(node);
    }

    public void outAUnlockLockOp(AUnlockLockOp node)
    {
        defaultOut(node);
    }

    public void caseAUnlockLockOp(AUnlockLockOp node)
    {
        inAUnlockLockOp(node);
        if(node.getUnlock() != null)
        {
            node.getUnlock().apply(this);
        }
        outAUnlockLockOp(node);
    }

    public void inAWaitLockOp(AWaitLockOp node)
    {
        defaultIn(node);
    }

    public void outAWaitLockOp(AWaitLockOp node)
    {
        defaultOut(node);
    }

    public void caseAWaitLockOp(AWaitLockOp node)
    {
        inAWaitLockOp(node);
        if(node.getWait() != null)
        {
            node.getWait().apply(this);
        }
        outAWaitLockOp(node);
    }

    public void inAUnwaitLockOp(AUnwaitLockOp node)
    {
        defaultIn(node);
    }

    public void outAUnwaitLockOp(AUnwaitLockOp node)
    {
        defaultOut(node);
    }

    public void caseAUnwaitLockOp(AUnwaitLockOp node)
    {
        inAUnwaitLockOp(node);
        if(node.getUnwait() != null)
        {
            node.getUnwait().apply(this);
        }
        outAUnwaitLockOp(node);
    }

    public void inANotifyLockOp(ANotifyLockOp node)
    {
        defaultIn(node);
    }

    public void outANotifyLockOp(ANotifyLockOp node)
    {
        defaultOut(node);
    }

    public void caseANotifyLockOp(ANotifyLockOp node)
    {
        inANotifyLockOp(node);
        if(node.getNotify() != null)
        {
            node.getNotify().apply(this);
        }
        outANotifyLockOp(node);
    }

    public void inANotifyallLockOp(ANotifyallLockOp node)
    {
        defaultIn(node);
    }

    public void outANotifyallLockOp(ANotifyallLockOp node)
    {
        defaultOut(node);
    }

    public void caseANotifyallLockOp(ANotifyallLockOp node)
    {
        inANotifyallLockOp(node);
        if(node.getNotifyall() != null)
        {
            node.getNotifyall().apply(this);
        }
        outANotifyallLockOp(node);
    }

    public void inALocktest(ALocktest node)
    {
        defaultIn(node);
    }

    public void outALocktest(ALocktest node)
    {
        defaultOut(node);
    }

    public void caseALocktest(ALocktest node)
    {
        inALocktest(node);
        if(node.getLocktestop() != null)
        {
            node.getLocktestop().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outALocktest(node);
    }

    public void inALockavailableLocktestop(ALockavailableLocktestop node)
    {
        defaultIn(node);
    }

    public void outALockavailableLocktestop(ALockavailableLocktestop node)
    {
        defaultOut(node);
    }

    public void caseALockavailableLocktestop(ALockavailableLocktestop node)
    {
        inALockavailableLocktestop(node);
        if(node.getLockavailable() != null)
        {
            node.getLockavailable().apply(this);
        }
        outALockavailableLocktestop(node);
    }

    public void inAHaslockLocktestop(AHaslockLocktestop node)
    {
        defaultIn(node);
    }

    public void outAHaslockLocktestop(AHaslockLocktestop node)
    {
        defaultOut(node);
    }

    public void caseAHaslockLocktestop(AHaslockLocktestop node)
    {
        inAHaslockLocktestop(node);
        if(node.getHaslock() != null)
        {
            node.getHaslock().apply(this);
        }
        outAHaslockLocktestop(node);
    }

    public void inAWasnotifiedLocktestop(AWasnotifiedLocktestop node)
    {
        defaultIn(node);
    }

    public void outAWasnotifiedLocktestop(AWasnotifiedLocktestop node)
    {
        defaultOut(node);
    }

    public void caseAWasnotifiedLocktestop(AWasnotifiedLocktestop node)
    {
        inAWasnotifiedLocktestop(node);
        if(node.getWasnotified() != null)
        {
            node.getWasnotified().apply(this);
        }
        outAWasnotifiedLocktestop(node);
    }

    public void inAStartThreadupdate(AStartThreadupdate node)
    {
        defaultIn(node);
    }

    public void outAStartThreadupdate(AStartThreadupdate node)
    {
        defaultOut(node);
    }

    public void caseAStartThreadupdate(AStartThreadupdate node)
    {
        inAStartThreadupdate(node);
        if(node.getLhsAssign() != null)
        {
            node.getLhsAssign().apply(this);
        }
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getStartargs() != null)
        {
            node.getStartargs().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStartThreadupdate(node);
    }

    public void inAExitThreadupdate(AExitThreadupdate node)
    {
        defaultIn(node);
    }

    public void outAExitThreadupdate(AExitThreadupdate node)
    {
        defaultOut(node);
    }

    public void caseAExitThreadupdate(AExitThreadupdate node)
    {
        inAExitThreadupdate(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExitThreadupdate(node);
    }

    public void inALhsAssign(ALhsAssign node)
    {
        defaultIn(node);
    }

    public void outALhsAssign(ALhsAssign node)
    {
        defaultOut(node);
    }

    public void caseALhsAssign(ALhsAssign node)
    {
        inALhsAssign(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outALhsAssign(node);
    }

    public void inAOneStartargs(AOneStartargs node)
    {
        defaultIn(node);
    }

    public void outAOneStartargs(AOneStartargs node)
    {
        defaultOut(node);
    }

    public void caseAOneStartargs(AOneStartargs node)
    {
        inAOneStartargs(node);
        if(node.getStartarg() != null)
        {
            node.getStartarg().apply(this);
        }
        outAOneStartargs(node);
    }

    public void inAMoreStartargs(AMoreStartargs node)
    {
        defaultIn(node);
    }

    public void outAMoreStartargs(AMoreStartargs node)
    {
        defaultOut(node);
    }

    public void caseAMoreStartargs(AMoreStartargs node)
    {
        inAMoreStartargs(node);
        if(node.getStartarg() != null)
        {
            node.getStartarg().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStartargs() != null)
        {
            node.getStartargs().apply(this);
        }
        outAMoreStartargs(node);
    }

    public void inAStartarg(AStartarg node)
    {
        defaultIn(node);
    }

    public void outAStartarg(AStartarg node)
    {
        defaultOut(node);
    }

    public void caseAStartarg(AStartarg node)
    {
        inAStartarg(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAStartarg(node);
    }

    public void inATerminatedThreadtest(ATerminatedThreadtest node)
    {
        defaultIn(node);
    }

    public void outATerminatedThreadtest(ATerminatedThreadtest node)
    {
        defaultOut(node);
    }

    public void caseATerminatedThreadtest(ATerminatedThreadtest node)
    {
        inATerminatedThreadtest(node);
        if(node.getThreadterminated() != null)
        {
            node.getThreadterminated().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outATerminatedThreadtest(node);
    }

    public void inAAtlocationThreadtest(AAtlocationThreadtest node)
    {
        defaultIn(node);
    }

    public void outAAtlocationThreadtest(AAtlocationThreadtest node)
    {
        defaultOut(node);
    }

    public void caseAAtlocationThreadtest(AAtlocationThreadtest node)
    {
        inAAtlocationThreadtest(node);
        if(node.getThreadname() != null)
        {
            node.getThreadname().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        if(node.getLocname() != null)
        {
            node.getLocname().apply(this);
        }
        outAAtlocationThreadtest(node);
    }

    public void inAPredicates(APredicates node)
    {
        defaultIn(node);
    }

    public void outAPredicates(APredicates node)
    {
        defaultOut(node);
    }

    public void caseAPredicates(APredicates node)
    {
        inAPredicates(node);
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        {
            Object temp[] = node.getPredicate().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PPredicate) temp[i]).apply(this);
            }
        }
        outAPredicates(node);
    }

    public void inAPredicate(APredicate node)
    {
        defaultIn(node);
    }

    public void outAPredicate(APredicate node)
    {
        defaultOut(node);
    }

    public void caseAPredicate(APredicate node)
    {
        inAPredicate(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPredicate(node);
    }
}
