/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class ALockTypespec extends PTypespec
{
    private TLock _lock_;
    private TWait _wait_;
    private TReentrant _reentrant_;

    public ALockTypespec()
    {
    }

    public ALockTypespec(
        TLock _lock_,
        TWait _wait_,
        TReentrant _reentrant_)
    {
        setLock(_lock_);

        setWait(_wait_);

        setReentrant(_reentrant_);

    }
    public Object clone()
    {
        return new ALockTypespec(
            (TLock) cloneNode(_lock_),
            (TWait) cloneNode(_wait_),
            (TReentrant) cloneNode(_reentrant_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALockTypespec(this);
    }

    public TLock getLock()
    {
        return _lock_;
    }

    public void setLock(TLock node)
    {
        if(_lock_ != null)
        {
            _lock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lock_ = node;
    }

    public TWait getWait()
    {
        return _wait_;
    }

    public void setWait(TWait node)
    {
        if(_wait_ != null)
        {
            _wait_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _wait_ = node;
    }

    public TReentrant getReentrant()
    {
        return _reentrant_;
    }

    public void setReentrant(TReentrant node)
    {
        if(_reentrant_ != null)
        {
            _reentrant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _reentrant_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lock_)
            + toString(_wait_)
            + toString(_reentrant_);
    }

    void removeChild(Node child)
    {
        if(_lock_ == child)
        {
            _lock_ = null;
            return;
        }

        if(_wait_ == child)
        {
            _wait_ = null;
            return;
        }

        if(_reentrant_ == child)
        {
            _reentrant_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lock_ == oldChild)
        {
            setLock((TLock) newChild);
            return;
        }

        if(_wait_ == oldChild)
        {
            setWait((TWait) newChild);
            return;
        }

        if(_reentrant_ == oldChild)
        {
            setReentrant((TReentrant) newChild);
            return;
        }

    }
}
