/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.parser;

import edu.ksu.cis.bandera.birp.lexer.*;
import edu.ksu.cis.bandera.birp.node.*;
import edu.ksu.cis.bandera.birp.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(1), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(1), node, true); } break;
                    case 3: { Node node = new3(); push(goTo(55), node, false); } break;
                    case 4: { Node node = new4(); push(goTo(55), node, false); } break;
                    case 5: { Node node = new5(); push(goTo(1), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(56), node, false); } break;
                    case 7: { Node node = new7(); push(goTo(56), node, false); } break;
                    case 8: { Node node = new8(); push(goTo(1), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(1), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(57), node, false); } break;
                    case 11: { Node node = new11(); push(goTo(57), node, false); } break;
                    case 12: { Node node = new12(); push(goTo(1), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(1), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(1), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(1), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(58), node, false); } break;
                    case 17: { Node node = new17(); push(goTo(58), node, false); } break;
                    case 18: { Node node = new18(); push(goTo(1), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(1), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(1), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(1), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(1), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(1), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(1), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(1), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(1), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(1), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(1), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(1), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(1), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(1), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(1), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(1), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(1), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(1), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(1), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(1), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(1), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(1), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(1), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(2), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(2), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(3), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(3), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(3), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(3), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(3), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(59), node, false); } break;
                    case 49: { Node node = new49(); push(goTo(59), node, false); } break;
                    case 50: { Node node = new50(); push(goTo(3), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(3), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(60), node, false); } break;
                    case 53: { Node node = new53(); push(goTo(60), node, false); } break;
                    case 54: { Node node = new54(); push(goTo(3), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(3), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(3), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(61), node, false); } break;
                    case 58: { Node node = new58(); push(goTo(61), node, false); } break;
                    case 59: { Node node = new59(); push(goTo(3), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(3), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(3), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(3), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(4), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(4), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(5), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(5), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(6), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(7), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(8), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(9), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(9), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(10), node, true); } break;
                    case 73: { Node node = new73(); push(goTo(11), node, true); } break;
                    case 74: { Node node = new74(); push(goTo(11), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(12), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(13), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(13), node, true); } break;
                    case 78: { Node node = new78(); push(goTo(14), node, true); } break;
                    case 79: { Node node = new79(); push(goTo(14), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(15), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(16), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(17), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(17), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(17), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(17), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(17), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(18), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(18), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(19), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(19), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(19), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(19), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(19), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(62), node, false); } break;
                    case 95: { Node node = new95(); push(goTo(62), node, false); } break;
                    case 96: { Node node = new96(); push(goTo(19), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(19), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(19), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(19), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(63), node, false); } break;
                    case 101: { Node node = new101(); push(goTo(63), node, false); } break;
                    case 102: { Node node = new102(); push(goTo(19), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(19), node, true); } break;
                    case 104: { Node node = new104(); push(goTo(19), node, true); } break;
                    case 105: { Node node = new105(); push(goTo(19), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(19), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(19), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(19), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(20), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(20), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(20), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(64), node, false); } break;
                    case 113: { Node node = new113(); push(goTo(64), node, false); } break;
                    case 114: { Node node = new114(); push(goTo(20), node, true); } break;
                    case 115: { Node node = new115(); push(goTo(21), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(21), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(21), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(65), node, false); } break;
                    case 119: { Node node = new119(); push(goTo(65), node, false); } break;
                    case 120: { Node node = new120(); push(goTo(21), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(22), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(22), node, true); } break;
                    case 123: { Node node = new123(); push(goTo(22), node, true); } break;
                    case 124: { Node node = new124(); push(goTo(66), node, false); } break;
                    case 125: { Node node = new125(); push(goTo(66), node, false); } break;
                    case 126: { Node node = new126(); push(goTo(23), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(24), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(25), node, true); } break;
                    case 129: { Node node = new129(); push(goTo(25), node, true); } break;
                    case 130: { Node node = new130(); push(goTo(26), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(26), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(27), node, true); } break;
                    case 133: { Node node = new133(); push(goTo(27), node, true); } break;
                    case 134: { Node node = new134(); push(goTo(27), node, true); } break;
                    case 135: { Node node = new135(); push(goTo(28), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(28), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(28), node, true); } break;
                    case 138: { Node node = new138(); push(goTo(28), node, true); } break;
                    case 139: { Node node = new139(); push(goTo(28), node, true); } break;
                    case 140: { Node node = new140(); push(goTo(29), node, true); } break;
                    case 141: { Node node = new141(); push(goTo(29), node, true); } break;
                    case 142: { Node node = new142(); push(goTo(29), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(30), node, true); } break;
                    case 144: { Node node = new144(); push(goTo(30), node, true); } break;
                    case 145: { Node node = new145(); push(goTo(30), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(30), node, true); } break;
                    case 147: { Node node = new147(); push(goTo(31), node, true); } break;
                    case 148: { Node node = new148(); push(goTo(31), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(31), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(31), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(32), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(32), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(32), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(32), node, true); } break;
                    case 155: { Node node = new155(); push(goTo(32), node, true); } break;
                    case 156: { Node node = new156(); push(goTo(32), node, true); } break;
                    case 157: { Node node = new157(); push(goTo(32), node, true); } break;
                    case 158: { Node node = new158(); push(goTo(32), node, true); } break;
                    case 159: { Node node = new159(); push(goTo(32), node, true); } break;
                    case 160: { Node node = new160(); push(goTo(33), node, true); } break;
                    case 161: { Node node = new161(); push(goTo(33), node, true); } break;
                    case 162: { Node node = new162(); push(goTo(33), node, true); } break;
                    case 163: { Node node = new163(); push(goTo(33), node, true); } break;
                    case 164: { Node node = new164(); push(goTo(34), node, true); } break;
                    case 165: { Node node = new165(); push(goTo(34), node, true); } break;
                    case 166: { Node node = new166(); push(goTo(34), node, true); } break;
                    case 167: { Node node = new167(); push(goTo(34), node, true); } break;
                    case 168: { Node node = new168(); push(goTo(34), node, true); } break;
                    case 169: { Node node = new169(); push(goTo(34), node, true); } break;
                    case 170: { Node node = new170(); push(goTo(34), node, true); } break;
                    case 171: { Node node = new171(); push(goTo(35), node, true); } break;
                    case 172: { Node node = new172(); push(goTo(36), node, true); } break;
                    case 173: { Node node = new173(); push(goTo(36), node, true); } break;
                    case 174: { Node node = new174(); push(goTo(37), node, true); } break;
                    case 175: { Node node = new175(); push(goTo(37), node, true); } break;
                    case 176: { Node node = new176(); push(goTo(38), node, true); } break;
                    case 177: { Node node = new177(); push(goTo(38), node, true); } break;
                    case 178: { Node node = new178(); push(goTo(39), node, true); } break;
                    case 179: { Node node = new179(); push(goTo(40), node, true); } break;
                    case 180: { Node node = new180(); push(goTo(40), node, true); } break;
                    case 181: { Node node = new181(); push(goTo(67), node, false); } break;
                    case 182: { Node node = new182(); push(goTo(67), node, false); } break;
                    case 183: { Node node = new183(); push(goTo(40), node, true); } break;
                    case 184: { Node node = new184(); push(goTo(40), node, true); } break;
                    case 185: { Node node = new185(); push(goTo(40), node, true); } break;
                    case 186: { Node node = new186(); push(goTo(41), node, true); } break;
                    case 187: { Node node = new187(); push(goTo(42), node, true); } break;
                    case 188: { Node node = new188(); push(goTo(42), node, true); } break;
                    case 189: { Node node = new189(); push(goTo(43), node, true); } break;
                    case 190: { Node node = new190(); push(goTo(44), node, true); } break;
                    case 191: { Node node = new191(); push(goTo(45), node, true); } break;
                    case 192: { Node node = new192(); push(goTo(45), node, true); } break;
                    case 193: { Node node = new193(); push(goTo(45), node, true); } break;
                    case 194: { Node node = new194(); push(goTo(45), node, true); } break;
                    case 195: { Node node = new195(); push(goTo(45), node, true); } break;
                    case 196: { Node node = new196(); push(goTo(45), node, true); } break;
                    case 197: { Node node = new197(); push(goTo(46), node, true); } break;
                    case 198: { Node node = new198(); push(goTo(47), node, true); } break;
                    case 199: { Node node = new199(); push(goTo(47), node, true); } break;
                    case 200: { Node node = new200(); push(goTo(47), node, true); } break;
                    case 201: { Node node = new201(); push(goTo(48), node, true); } break;
                    case 202: { Node node = new202(); push(goTo(48), node, true); } break;
                    case 203: { Node node = new203(); push(goTo(48), node, true); } break;
                    case 204: { Node node = new204(); push(goTo(48), node, true); } break;
                    case 205: { Node node = new205(); push(goTo(48), node, true); } break;
                    case 206: { Node node = new206(); push(goTo(49), node, true); } break;
                    case 207: { Node node = new207(); push(goTo(50), node, true); } break;
                    case 208: { Node node = new208(); push(goTo(50), node, true); } break;
                    case 209: { Node node = new209(); push(goTo(51), node, true); } break;
                    case 210: { Node node = new210(); push(goTo(52), node, true); } break;
                    case 211: { Node node = new211(); push(goTo(52), node, true); } break;
                    case 212: { Node node = new212(); push(goTo(53), node, true); } break;
                    case 213: { Node node = new213(); push(goTo(53), node, true); } break;
                    case 214: { Node node = new214(); push(goTo(68), node, false); } break;
                    case 215: { Node node = new215(); push(goTo(68), node, false); } break;
                    case 216: { Node node = new216(); push(goTo(54), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PProgram node1 = (PProgram) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        PProcess node1 = (PProcess) pop();
        AProgram node = new AProgram(node1);
        return node;
    }

    Node new1()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new2()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new3()
    {
        PDefinition node2 = (PDefinition) pop();
        XPDefinition node1 = (XPDefinition) pop();
        X1PDefinition node = new X1PDefinition(node1, node2);
        return node;
    }

    Node new4()
    {
        PDefinition node1 = (PDefinition) pop();
        X2PDefinition node = new X2PDefinition(node1);
        return node;
    }

    Node new5()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new6()
    {
        PSubtype node2 = (PSubtype) pop();
        XPSubtype node1 = (XPSubtype) pop();
        X1PSubtype node = new X1PSubtype(node1, node2);
        return node;
    }

    Node new7()
    {
        PSubtype node1 = (PSubtype) pop();
        X2PSubtype node = new X2PSubtype(node1);
        return node;
    }

    Node new8()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new9()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new10()
    {
        PGlobal node2 = (PGlobal) pop();
        XPGlobal node1 = (XPGlobal) pop();
        X1PGlobal node = new X1PGlobal(node1, node2);
        return node;
    }

    Node new11()
    {
        PGlobal node1 = (PGlobal) pop();
        X2PGlobal node = new X2PGlobal(node1);
        return node;
    }

    Node new12()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new13()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new14()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new15()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new16()
    {
        PThread node2 = (PThread) pop();
        XPThread node1 = (XPThread) pop();
        X1PThread node = new X1PThread(node1, node2);
        return node;
    }

    Node new17()
    {
        PThread node1 = (PThread) pop();
        X2PThread node = new X2PThread(node1);
        return node;
    }

    Node new18()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new19()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new20()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new21()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new22()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new23()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new24()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = null;
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new25()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new26()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new27()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new28()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new29()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new30()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new31()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new32()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = null;
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new33()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new34()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new35()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new36()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = null;
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new37()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new38()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = null;
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new39()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = null;
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new40()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        PPredicates node9 = (PPredicates) pop();
        XPThread node8 = (XPThread) pop();
        XPGlobal node7 = (XPGlobal) pop();
        XPSubtype node6 = (XPSubtype) pop();
        XPDefinition node5 = (XPDefinition) pop();
        TRparen node4 = (TRparen) pop();
        TLparen node3 = (TLparen) pop();
        TId node2 = (TId) pop();
        TProcess node1 = (TProcess) pop();
        AProcess node = new AProcess(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new41()
    {
        TSemicolon node4 = (TSemicolon) pop();
        TInt node3 = (TInt) pop();
        TEquals node2 = (TEquals) pop();
        TId node1 = (TId) pop();
        AConstantDefinition node = new AConstantDefinition(node1, node2, node3, node4);
        return node;
    }

    Node new42()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PTypespec node3 = (PTypespec) pop();
        TEquals node2 = (TEquals) pop();
        TId node1 = (TId) pop();
        ATypedefDefinition node = new ATypedefDefinition(node1, node2, node3, node4);
        return node;
    }

    Node new43()
    {
        PConst node4 = (PConst) pop();
        TDotdot node3 = (TDotdot) pop();
        PConst node2 = (PConst) pop();
        TRange node1 = (TRange) pop();
        ARangeTypespec node = new ARangeTypespec(node1, node2, node3, node4);
        return node;
    }

    Node new44()
    {
        TBoolean node1 = (TBoolean) pop();
        ABooleanTypespec node = new ABooleanTypespec(node1);
        return node;
    }

    Node new45()
    {
        TTid node1 = (TTid) pop();
        ATidTypespec node = new ATidTypespec(node1);
        return node;
    }

    Node new46()
    {
        TRbrace node5 = (TRbrace) pop();
        XPEnumdeftail node4 = null;
        PEnumconst node3 = (PEnumconst) pop();
        TLbrace node2 = (TLbrace) pop();
        TEnum node1 = (TEnum) pop();
        AEnumeratedTypespec node = new AEnumeratedTypespec(node1, node2, node3, node4, node5);
        return node;
    }

    Node new47()
    {
        TRbrace node5 = (TRbrace) pop();
        XPEnumdeftail node4 = (XPEnumdeftail) pop();
        PEnumconst node3 = (PEnumconst) pop();
        TLbrace node2 = (TLbrace) pop();
        TEnum node1 = (TEnum) pop();
        AEnumeratedTypespec node = new AEnumeratedTypespec(node1, node2, node3, node4, node5);
        return node;
    }

    Node new48()
    {
        PEnumdeftail node2 = (PEnumdeftail) pop();
        XPEnumdeftail node1 = (XPEnumdeftail) pop();
        X1PEnumdeftail node = new X1PEnumdeftail(node1, node2);
        return node;
    }

    Node new49()
    {
        PEnumdeftail node1 = (PEnumdeftail) pop();
        X2PEnumdeftail node = new X2PEnumdeftail(node1);
        return node;
    }

    Node new50()
    {
        TRbrace node4 = (TRbrace) pop();
        XPField node3 = null;
        TLbrace node2 = (TLbrace) pop();
        TRecord node1 = (TRecord) pop();
        ARecordTypespec node = new ARecordTypespec(node1, node2, node3, node4);
        return node;
    }

    Node new51()
    {
        TRbrace node4 = (TRbrace) pop();
        XPField node3 = (XPField) pop();
        TLbrace node2 = (TLbrace) pop();
        TRecord node1 = (TRecord) pop();
        ARecordTypespec node = new ARecordTypespec(node1, node2, node3, node4);
        return node;
    }

    Node new52()
    {
        PField node2 = (PField) pop();
        XPField node1 = (XPField) pop();
        X1PField node = new X1PField(node1, node2);
        return node;
    }

    Node new53()
    {
        PField node1 = (PField) pop();
        X2PField node = new X2PField(node1);
        return node;
    }

    Node new54()
    {
        PType node6 = (PType) pop();
        TOf node5 = (TOf) pop();
        TRbrack node4 = (TRbrack) pop();
        PConst node3 = (PConst) pop();
        TLbrack node2 = (TLbrack) pop();
        TArray node1 = (TArray) pop();
        AArrayTypespec node = new AArrayTypespec(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new55()
    {
        TRbrace node5 = (TRbrace) pop();
        XPReftail node4 = null;
        TId node3 = (TId) pop();
        TLbrace node2 = (TLbrace) pop();
        TRef node1 = (TRef) pop();
        ARefTypespec node = new ARefTypespec(node1, node2, node3, node4, node5);
        return node;
    }

    Node new56()
    {
        TRbrace node5 = (TRbrace) pop();
        XPReftail node4 = (XPReftail) pop();
        TId node3 = (TId) pop();
        TLbrace node2 = (TLbrace) pop();
        TRef node1 = (TRef) pop();
        ARefTypespec node = new ARefTypespec(node1, node2, node3, node4, node5);
        return node;
    }

    Node new57()
    {
        PReftail node2 = (PReftail) pop();
        XPReftail node1 = (XPReftail) pop();
        X1PReftail node = new X1PReftail(node1, node2);
        return node;
    }

    Node new58()
    {
        PReftail node1 = (PReftail) pop();
        X2PReftail node = new X2PReftail(node1);
        return node;
    }

    Node new59()
    {
        TReentrant node3 = null;
        TWait node2 = null;
        TLock node1 = (TLock) pop();
        ALockTypespec node = new ALockTypespec(node1, node2, node3);
        return node;
    }

    Node new60()
    {
        TReentrant node3 = null;
        TWait node2 = (TWait) pop();
        TLock node1 = (TLock) pop();
        ALockTypespec node = new ALockTypespec(node1, node2, node3);
        return node;
    }

    Node new61()
    {
        TReentrant node3 = (TReentrant) pop();
        TWait node2 = null;
        TLock node1 = (TLock) pop();
        ALockTypespec node = new ALockTypespec(node1, node2, node3);
        return node;
    }

    Node new62()
    {
        TReentrant node3 = (TReentrant) pop();
        TWait node2 = (TWait) pop();
        TLock node1 = (TLock) pop();
        ALockTypespec node = new ALockTypespec(node1, node2, node3);
        return node;
    }

    Node new63()
    {
        PTypespec node1 = (PTypespec) pop();
        ATypespecType node = new ATypespecType(node1);
        return node;
    }

    Node new64()
    {
        TId node1 = (TId) pop();
        ADefinedType node = new ADefinedType(node1);
        return node;
    }

    Node new65()
    {
        TId node1 = (TId) pop();
        ANameEnumconst node = new ANameEnumconst(node1);
        return node;
    }

    Node new66()
    {
        TInt node3 = (TInt) pop();
        TEquals node2 = (TEquals) pop();
        TId node1 = (TId) pop();
        ANamevalueEnumconst node = new ANamevalueEnumconst(node1, node2, node3);
        return node;
    }

    Node new67()
    {
        PEnumconst node2 = (PEnumconst) pop();
        TComma node1 = (TComma) pop();
        AEnumdeftail node = new AEnumdeftail(node1, node2);
        return node;
    }

    Node new68()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PType node3 = (PType) pop();
        TColon node2 = (TColon) pop();
        TId node1 = (TId) pop();
        AField node = new AField(node1, node2, node3, node4);
        return node;
    }

    Node new69()
    {
        TId node2 = (TId) pop();
        TComma node1 = (TComma) pop();
        AReftail node = new AReftail(node1, node2);
        return node;
    }

    Node new70()
    {
        TInt node1 = (TInt) pop();
        AIntConst node = new AIntConst(node1);
        return node;
    }

    Node new71()
    {
        TId node1 = (TId) pop();
        AIdConst node = new AIdConst(node1);
        return node;
    }

    Node new72()
    {
        TSemicolon node4 = (TSemicolon) pop();
        TId node3 = (TId) pop();
        TExtendz node2 = (TExtendz) pop();
        TId node1 = (TId) pop();
        ASubtype node = new ASubtype(node1, node2, node3, node4);
        return node;
    }

    Node new73()
    {
        PVariable node1 = (PVariable) pop();
        AVariableGlobal node = new AVariableGlobal(node1);
        return node;
    }

    Node new74()
    {
        PCollection node1 = (PCollection) pop();
        ACollectionGlobal node = new ACollectionGlobal(node1);
        return node;
    }

    Node new75()
    {
        TSemicolon node9 = (TSemicolon) pop();
        PType node8 = (PType) pop();
        TOf node7 = (TOf) pop();
        TRbrack node6 = (TRbrack) pop();
        PConst node5 = (PConst) pop();
        TLbrack node4 = (TLbrack) pop();
        TCollection node3 = (TCollection) pop();
        TColon node2 = (TColon) pop();
        TId node1 = (TId) pop();
        ACollection node = new ACollection(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new76()
    {
        TSemicolon node5 = (TSemicolon) pop();
        PInitializer node4 = null;
        PType node3 = (PType) pop();
        TColon node2 = (TColon) pop();
        TId node1 = (TId) pop();
        AVariable node = new AVariable(node1, node2, node3, node4, node5);
        return node;
    }

    Node new77()
    {
        TSemicolon node5 = (TSemicolon) pop();
        PInitializer node4 = (PInitializer) pop();
        PType node3 = (PType) pop();
        TColon node2 = (TColon) pop();
        TId node1 = (TId) pop();
        AVariable node = new AVariable(node1, node2, node3, node4, node5);
        return node;
    }

    Node new78()
    {
        PParameter node1 = (PParameter) pop();
        AOneParameters node = new AOneParameters(node1);
        return node;
    }

    Node new79()
    {
        PParameters node3 = (PParameters) pop();
        TComma node2 = (TComma) pop();
        PParameter node1 = (PParameter) pop();
        AManyParameters node = new AManyParameters(node1, node2, node3);
        return node;
    }

    Node new80()
    {
        PType node3 = (PType) pop();
        TColon node2 = (TColon) pop();
        TId node1 = (TId) pop();
        AParameter node = new AParameter(node1, node2, node3);
        return node;
    }

    Node new81()
    {
        PValue node2 = (PValue) pop();
        TAssign node1 = (TAssign) pop();
        AInitializer node = new AInitializer(node1, node2);
        return node;
    }

    Node new82()
    {
        TInt node1 = (TInt) pop();
        AIntegerValue node = new AIntegerValue(node1);
        return node;
    }

    Node new83()
    {
        PBool node1 = (PBool) pop();
        ABoolValue node = new ABoolValue(node1);
        return node;
    }

    Node new84()
    {
        TId node1 = (TId) pop();
        AIdValue node = new AIdValue(node1);
        return node;
    }

    Node new85()
    {
        TNull node1 = (TNull) pop();
        ANullValue node = new ANullValue(node1);
        return node;
    }

    Node new86()
    {
        TId node2 = (TId) pop();
        TRef node1 = (TRef) pop();
        ARefValue node = new ARefValue(node1, node2);
        return node;
    }

    Node new87()
    {
        TFalse node1 = (TFalse) pop();
        AFalseBool node = new AFalseBool(node1);
        return node;
    }

    Node new88()
    {
        TTrue node1 = (TTrue) pop();
        ATrueBool node = new ATrueBool(node1);
        return node;
    }

    Node new89()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new90()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new91()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new92()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new93()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new94()
    {
        PVariable node2 = (PVariable) pop();
        XPVariable node1 = (XPVariable) pop();
        X1PVariable node = new X1PVariable(node1, node2);
        return node;
    }

    Node new95()
    {
        PVariable node1 = (PVariable) pop();
        X2PVariable node = new X2PVariable(node1);
        return node;
    }

    Node new96()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new97()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new98()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = null;
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new99()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new100()
    {
        PLocation node2 = (PLocation) pop();
        XPLocation node1 = (XPLocation) pop();
        X1PLocation node = new X1PLocation(node1, node2);
        return node;
    }

    Node new101()
    {
        PLocation node1 = (PLocation) pop();
        X2PLocation node = new X2PLocation(node1);
        return node;
    }

    Node new102()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new103()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new104()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = null;
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new105()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new106()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new107()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = null;
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new108()
    {
        TSemicolon node12 = (TSemicolon) pop();
        TId node11 = (TId) pop();
        TEnd node10 = (TEnd) pop();
        XPLocation node9 = (XPLocation) pop();
        PLocation node8 = (PLocation) pop();
        XPVariable node7 = (XPVariable) pop();
        TRparen node6 = (TRparen) pop();
        PParameters node5 = (PParameters) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TThread node2 = (TThread) pop();
        TMain node1 = (TMain) pop();
        AThread node = new AThread(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new109()
    {
        XPTransformation node5 = null;
        PLiveset node4 = null;
        TColon node3 = (TColon) pop();
        TId node2 = (TId) pop();
        TLoc node1 = (TLoc) pop();
        ALocation node = new ALocation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new110()
    {
        XPTransformation node5 = null;
        PLiveset node4 = (PLiveset) pop();
        TColon node3 = (TColon) pop();
        TId node2 = (TId) pop();
        TLoc node1 = (TLoc) pop();
        ALocation node = new ALocation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new111()
    {
        XPTransformation node5 = (XPTransformation) pop();
        PLiveset node4 = null;
        TColon node3 = (TColon) pop();
        TId node2 = (TId) pop();
        TLoc node1 = (TLoc) pop();
        ALocation node = new ALocation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new112()
    {
        PTransformation node2 = (PTransformation) pop();
        XPTransformation node1 = (XPTransformation) pop();
        X1PTransformation node = new X1PTransformation(node1, node2);
        return node;
    }

    Node new113()
    {
        PTransformation node1 = (PTransformation) pop();
        X2PTransformation node = new X2PTransformation(node1);
        return node;
    }

    Node new114()
    {
        XPTransformation node5 = (XPTransformation) pop();
        PLiveset node4 = (PLiveset) pop();
        TColon node3 = (TColon) pop();
        TId node2 = (TId) pop();
        TLoc node1 = (TLoc) pop();
        ALocation node = new ALocation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new115()
    {
        TSemicolon node10 = (TSemicolon) pop();
        TId node9 = (TId) pop();
        TGoto node8 = (TGoto) pop();
        TRbrace node7 = (TRbrace) pop();
        XPAction node6 = null;
        TLbrace node5 = (TLbrace) pop();
        TInvisible node4 = null;
        TDo node3 = (TDo) pop();
        PExpr node2 = (PExpr) pop();
        TWhen node1 = (TWhen) pop();
        ATransformation node = new ATransformation(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new116()
    {
        TSemicolon node10 = (TSemicolon) pop();
        TId node9 = (TId) pop();
        TGoto node8 = (TGoto) pop();
        TRbrace node7 = (TRbrace) pop();
        XPAction node6 = null;
        TLbrace node5 = (TLbrace) pop();
        TInvisible node4 = (TInvisible) pop();
        TDo node3 = (TDo) pop();
        PExpr node2 = (PExpr) pop();
        TWhen node1 = (TWhen) pop();
        ATransformation node = new ATransformation(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new117()
    {
        TSemicolon node10 = (TSemicolon) pop();
        TId node9 = (TId) pop();
        TGoto node8 = (TGoto) pop();
        TRbrace node7 = (TRbrace) pop();
        XPAction node6 = (XPAction) pop();
        TLbrace node5 = (TLbrace) pop();
        TInvisible node4 = null;
        TDo node3 = (TDo) pop();
        PExpr node2 = (PExpr) pop();
        TWhen node1 = (TWhen) pop();
        ATransformation node = new ATransformation(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new118()
    {
        PAction node2 = (PAction) pop();
        XPAction node1 = (XPAction) pop();
        X1PAction node = new X1PAction(node1, node2);
        return node;
    }

    Node new119()
    {
        PAction node1 = (PAction) pop();
        X2PAction node = new X2PAction(node1);
        return node;
    }

    Node new120()
    {
        TSemicolon node10 = (TSemicolon) pop();
        TId node9 = (TId) pop();
        TGoto node8 = (TGoto) pop();
        TRbrace node7 = (TRbrace) pop();
        XPAction node6 = (XPAction) pop();
        TLbrace node5 = (TLbrace) pop();
        TInvisible node4 = (TInvisible) pop();
        TDo node3 = (TDo) pop();
        PExpr node2 = (PExpr) pop();
        TWhen node1 = (TWhen) pop();
        ATransformation node = new ATransformation(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new121()
    {
        TRbrace node3 = (TRbrace) pop();
        TLbrace node2 = (TLbrace) pop();
        TLive node1 = (TLive) pop();
        AEmptyLiveset node = new AEmptyLiveset(node1, node2, node3);
        return node;
    }

    Node new122()
    {
        TRbrace node5 = (TRbrace) pop();
        XPLivevar node4 = null;
        TId node3 = (TId) pop();
        TLbrace node2 = (TLbrace) pop();
        TLive node1 = (TLive) pop();
        ANonemptyLiveset node = new ANonemptyLiveset(node1, node2, node3, node4, node5);
        return node;
    }

    Node new123()
    {
        TRbrace node5 = (TRbrace) pop();
        XPLivevar node4 = (XPLivevar) pop();
        TId node3 = (TId) pop();
        TLbrace node2 = (TLbrace) pop();
        TLive node1 = (TLive) pop();
        ANonemptyLiveset node = new ANonemptyLiveset(node1, node2, node3, node4, node5);
        return node;
    }

    Node new124()
    {
        PLivevar node2 = (PLivevar) pop();
        XPLivevar node1 = (XPLivevar) pop();
        X1PLivevar node = new X1PLivevar(node1, node2);
        return node;
    }

    Node new125()
    {
        PLivevar node1 = (PLivevar) pop();
        X2PLivevar node = new X2PLivevar(node1);
        return node;
    }

    Node new126()
    {
        TId node2 = (TId) pop();
        TComma node1 = (TComma) pop();
        ALivevar node = new ALivevar(node1, node2);
        return node;
    }

    Node new127()
    {
        PExpr7 node1 = (PExpr7) pop();
        AExpr node = new AExpr(node1);
        return node;
    }

    Node new128()
    {
        PExpr6 node1 = (PExpr6) pop();
        AExpr6Expr7 node = new AExpr6Expr7(node1);
        return node;
    }

    Node new129()
    {
        PExpr6 node3 = (PExpr6) pop();
        TOr node2 = (TOr) pop();
        PExpr7 node1 = (PExpr7) pop();
        AOrExpr7 node = new AOrExpr7(node1, node2, node3);
        return node;
    }

    Node new130()
    {
        PExpr5 node1 = (PExpr5) pop();
        AExpr5Expr6 node = new AExpr5Expr6(node1);
        return node;
    }

    Node new131()
    {
        PExpr5 node3 = (PExpr5) pop();
        TAnd node2 = (TAnd) pop();
        PExpr6 node1 = (PExpr6) pop();
        AAndExpr6 node = new AAndExpr6(node1, node2, node3);
        return node;
    }

    Node new132()
    {
        PExpr4 node1 = (PExpr4) pop();
        AExpr4Expr5 node = new AExpr4Expr5(node1);
        return node;
    }

    Node new133()
    {
        PExpr4 node3 = (PExpr4) pop();
        TEq node2 = (TEq) pop();
        PExpr5 node1 = (PExpr5) pop();
        AEqExpr5 node = new AEqExpr5(node1, node2, node3);
        return node;
    }

    Node new134()
    {
        PExpr4 node3 = (PExpr4) pop();
        TNoteq node2 = (TNoteq) pop();
        PExpr5 node1 = (PExpr5) pop();
        ANoteqExpr5 node = new ANoteqExpr5(node1, node2, node3);
        return node;
    }

    Node new135()
    {
        PExpr3 node1 = (PExpr3) pop();
        AExpr3Expr4 node = new AExpr3Expr4(node1);
        return node;
    }

    Node new136()
    {
        PExpr3 node3 = (PExpr3) pop();
        TLt node2 = (TLt) pop();
        PExpr4 node1 = (PExpr4) pop();
        ALtExpr4 node = new ALtExpr4(node1, node2, node3);
        return node;
    }

    Node new137()
    {
        PExpr3 node3 = (PExpr3) pop();
        TLe node2 = (TLe) pop();
        PExpr4 node1 = (PExpr4) pop();
        ALeExpr4 node = new ALeExpr4(node1, node2, node3);
        return node;
    }

    Node new138()
    {
        PExpr3 node3 = (PExpr3) pop();
        TGt node2 = (TGt) pop();
        PExpr4 node1 = (PExpr4) pop();
        AGtExpr4 node = new AGtExpr4(node1, node2, node3);
        return node;
    }

    Node new139()
    {
        PExpr3 node3 = (PExpr3) pop();
        TGe node2 = (TGe) pop();
        PExpr4 node1 = (PExpr4) pop();
        AGeExpr4 node = new AGeExpr4(node1, node2, node3);
        return node;
    }

    Node new140()
    {
        PExpr2 node1 = (PExpr2) pop();
        AExpr2Expr3 node = new AExpr2Expr3(node1);
        return node;
    }

    Node new141()
    {
        PExpr2 node3 = (PExpr2) pop();
        TPlus node2 = (TPlus) pop();
        PExpr3 node1 = (PExpr3) pop();
        APlusExpr3 node = new APlusExpr3(node1, node2, node3);
        return node;
    }

    Node new142()
    {
        PExpr2 node3 = (PExpr2) pop();
        TMinus node2 = (TMinus) pop();
        PExpr3 node1 = (PExpr3) pop();
        AMinusExpr3 node = new AMinusExpr3(node1, node2, node3);
        return node;
    }

    Node new143()
    {
        PExpr1 node1 = (PExpr1) pop();
        AExpr1Expr2 node = new AExpr1Expr2(node1);
        return node;
    }

    Node new144()
    {
        PExpr1 node3 = (PExpr1) pop();
        TMult node2 = (TMult) pop();
        PExpr2 node1 = (PExpr2) pop();
        AMultExpr2 node = new AMultExpr2(node1, node2, node3);
        return node;
    }

    Node new145()
    {
        PExpr1 node3 = (PExpr1) pop();
        TDiv node2 = (TDiv) pop();
        PExpr2 node1 = (PExpr2) pop();
        ADivExpr2 node = new ADivExpr2(node1, node2, node3);
        return node;
    }

    Node new146()
    {
        PExpr1 node3 = (PExpr1) pop();
        TMod node2 = (TMod) pop();
        PExpr2 node1 = (PExpr2) pop();
        AModExpr2 node = new AModExpr2(node1, node2, node3);
        return node;
    }

    Node new147()
    {
        PExpr0 node1 = (PExpr0) pop();
        AExpr0Expr1 node = new AExpr0Expr1(node1);
        return node;
    }

    Node new148()
    {
        PExpr1 node2 = (PExpr1) pop();
        TPlus node1 = (TPlus) pop();
        APlusExpr1 node = new APlusExpr1(node1, node2);
        return node;
    }

    Node new149()
    {
        PExpr1 node2 = (PExpr1) pop();
        TMinus node1 = (TMinus) pop();
        AMinusExpr1 node = new AMinusExpr1(node1, node2);
        return node;
    }

    Node new150()
    {
        PExpr1 node2 = (PExpr1) pop();
        TNot node1 = (TNot) pop();
        ANotExpr1 node = new ANotExpr1(node1, node2);
        return node;
    }

    Node new151()
    {
        PValue node1 = (PValue) pop();
        AValueExpr0 node = new AValueExpr0(node1);
        return node;
    }

    Node new152()
    {
        PLocktest node1 = (PLocktest) pop();
        ALocktestExpr0 node = new ALocktestExpr0(node1);
        return node;
    }

    Node new153()
    {
        PThreadtest node1 = (PThreadtest) pop();
        AThreadtestExpr0 node = new AThreadtestExpr0(node1);
        return node;
    }

    Node new154()
    {
        TId node3 = (TId) pop();
        TDot node2 = (TDot) pop();
        PExpr0 node1 = (PExpr0) pop();
        AFieldselectExpr0 node = new AFieldselectExpr0(node1, node2, node3);
        return node;
    }

    Node new155()
    {
        TRbrack node4 = (TRbrack) pop();
        PExpr node3 = (PExpr) pop();
        TLbrack node2 = (TLbrack) pop();
        PExpr0 node1 = (PExpr0) pop();
        AArrayselectExpr0 node = new AArrayselectExpr0(node1, node2, node3, node4);
        return node;
    }

    Node new156()
    {
        TLength node3 = (TLength) pop();
        TDot node2 = (TDot) pop();
        PExpr0 node1 = (PExpr0) pop();
        AArraylengthExpr0 node = new AArraylengthExpr0(node1, node2, node3);
        return node;
    }

    Node new157()
    {
        TId node3 = (TId) pop();
        TInstanceof node2 = (TInstanceof) pop();
        PExpr0 node1 = (PExpr0) pop();
        AInstanceofExpr0 node = new AInstanceofExpr0(node1, node2, node3);
        return node;
    }

    Node new158()
    {
        TId node6 = (TId) pop();
        TColon node5 = (TColon) pop();
        TRbrace node4 = (TRbrace) pop();
        PLhs node3 = (PLhs) pop();
        TLbrace node2 = (TLbrace) pop();
        TId node1 = (TId) pop();
        ARemoterefExpr0 node = new ARemoterefExpr0(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new159()
    {
        TRparen node3 = (TRparen) pop();
        PExpr node2 = (PExpr) pop();
        TLparen node1 = (TLparen) pop();
        AParenexprExpr0 node = new AParenexprExpr0(node1, node2, node3);
        return node;
    }

    Node new160()
    {
        TId node1 = (TId) pop();
        AValueLhs node = new AValueLhs(node1);
        return node;
    }

    Node new161()
    {
        TId node3 = (TId) pop();
        TDot node2 = (TDot) pop();
        PLhs node1 = (PLhs) pop();
        AFieldselectLhs node = new AFieldselectLhs(node1, node2, node3);
        return node;
    }

    Node new162()
    {
        TRbrack node4 = (TRbrack) pop();
        PExpr node3 = (PExpr) pop();
        TLbrack node2 = (TLbrack) pop();
        PLhs node1 = (PLhs) pop();
        AArrayselectLhs node = new AArrayselectLhs(node1, node2, node3, node4);
        return node;
    }

    Node new163()
    {
        TLength node3 = (TLength) pop();
        TDot node2 = (TDot) pop();
        PLhs node1 = (PLhs) pop();
        AArraylengthLhs node = new AArraylengthLhs(node1, node2, node3);
        return node;
    }

    Node new164()
    {
        PAssignment node1 = (PAssignment) pop();
        AAssignmentAction node = new AAssignmentAction(node1);
        return node;
    }

    Node new165()
    {
        PPrintaction node1 = (PPrintaction) pop();
        APrintactionAction node = new APrintactionAction(node1);
        return node;
    }

    Node new166()
    {
        PAssertaction node1 = (PAssertaction) pop();
        AAssertactionAction node = new AAssertactionAction(node1);
        return node;
    }

    Node new167()
    {
        PChoice node1 = (PChoice) pop();
        AChoiceAction node = new AChoiceAction(node1);
        return node;
    }

    Node new168()
    {
        PAllocation node1 = (PAllocation) pop();
        AAllocationAction node = new AAllocationAction(node1);
        return node;
    }

    Node new169()
    {
        PLockupdate node1 = (PLockupdate) pop();
        ALockupdateAction node = new ALockupdateAction(node1);
        return node;
    }

    Node new170()
    {
        PThreadupdate node1 = (PThreadupdate) pop();
        AThreadupdateAction node = new AThreadupdateAction(node1);
        return node;
    }

    Node new171()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PExpr node3 = (PExpr) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AAssignment node = new AAssignment(node1, node2, node3, node4);
        return node;
    }

    Node new172()
    {
        TSemicolon node5 = (TSemicolon) pop();
        TRparen node4 = (TRparen) pop();
        PPrintargs node3 = null;
        TLparen node2 = (TLparen) pop();
        TPrintln node1 = (TPrintln) pop();
        APrintaction node = new APrintaction(node1, node2, node3, node4, node5);
        return node;
    }

    Node new173()
    {
        TSemicolon node5 = (TSemicolon) pop();
        TRparen node4 = (TRparen) pop();
        PPrintargs node3 = (PPrintargs) pop();
        TLparen node2 = (TLparen) pop();
        TPrintln node1 = (TPrintln) pop();
        APrintaction node = new APrintaction(node1, node2, node3, node4, node5);
        return node;
    }

    Node new174()
    {
        PPrintarg node1 = (PPrintarg) pop();
        AOnePrintargs node = new AOnePrintargs(node1);
        return node;
    }

    Node new175()
    {
        PPrintargs node3 = (PPrintargs) pop();
        TComma node2 = (TComma) pop();
        PPrintarg node1 = (PPrintarg) pop();
        AMorePrintargs node = new AMorePrintargs(node1, node2, node3);
        return node;
    }

    Node new176()
    {
        TString node1 = (TString) pop();
        AStringPrintarg node = new AStringPrintarg(node1);
        return node;
    }

    Node new177()
    {
        TId node1 = (TId) pop();
        AVarPrintarg node = new AVarPrintarg(node1);
        return node;
    }

    Node new178()
    {
        TSemicolon node5 = (TSemicolon) pop();
        TRparen node4 = (TRparen) pop();
        PExpr node3 = (PExpr) pop();
        TLparen node2 = (TLparen) pop();
        TAssert node1 = (TAssert) pop();
        AAssertaction node = new AAssertaction(node1, node2, node3, node4, node5);
        return node;
    }

    Node new179()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRparen node7 = (TRparen) pop();
        XPChoicetail node6 = null;
        PValue node5 = (PValue) pop();
        TLparen node4 = (TLparen) pop();
        TInternchoose node3 = (TInternchoose) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AInternChoice node = new AInternChoice(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new180()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRparen node7 = (TRparen) pop();
        XPChoicetail node6 = (XPChoicetail) pop();
        PValue node5 = (PValue) pop();
        TLparen node4 = (TLparen) pop();
        TInternchoose node3 = (TInternchoose) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AInternChoice node = new AInternChoice(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new181()
    {
        PChoicetail node2 = (PChoicetail) pop();
        XPChoicetail node1 = (XPChoicetail) pop();
        X1PChoicetail node = new X1PChoicetail(node1, node2);
        return node;
    }

    Node new182()
    {
        PChoicetail node1 = (PChoicetail) pop();
        X2PChoicetail node = new X2PChoicetail(node1);
        return node;
    }

    Node new183()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRparen node7 = (TRparen) pop();
        XPChoicetail node6 = null;
        PValue node5 = (PValue) pop();
        TLparen node4 = (TLparen) pop();
        TExternchoose node3 = (TExternchoose) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AExternChoice node = new AExternChoice(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new184()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRparen node7 = (TRparen) pop();
        XPChoicetail node6 = (XPChoicetail) pop();
        PValue node5 = (PValue) pop();
        TLparen node4 = (TLparen) pop();
        TExternchoose node3 = (TExternchoose) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AExternChoice node = new AExternChoice(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new185()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRparen node6 = (TRparen) pop();
        TId node5 = (TId) pop();
        TLparen node4 = (TLparen) pop();
        TForall node3 = (TForall) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AForallChoice node = new AForallChoice(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new186()
    {
        PValue node2 = (PValue) pop();
        TComma node1 = (TComma) pop();
        AChoicetail node = new AChoicetail(node1, node2);
        return node;
    }

    Node new187()
    {
        TSemicolon node6 = (TSemicolon) pop();
        PArraylength node5 = null;
        TId node4 = (TId) pop();
        TNew node3 = (TNew) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AAllocation node = new AAllocation(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new188()
    {
        TSemicolon node6 = (TSemicolon) pop();
        PArraylength node5 = (PArraylength) pop();
        TId node4 = (TId) pop();
        TNew node3 = (TNew) pop();
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        AAllocation node = new AAllocation(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new189()
    {
        TRbrack node3 = (TRbrack) pop();
        PExpr node2 = (PExpr) pop();
        TLbrack node1 = (TLbrack) pop();
        AArraylength node = new AArraylength(node1, node2, node3);
        return node;
    }

    Node new190()
    {
        TSemicolon node5 = (TSemicolon) pop();
        TRparen node4 = (TRparen) pop();
        PLhs node3 = (PLhs) pop();
        TLparen node2 = (TLparen) pop();
        PLockOp node1 = (PLockOp) pop();
        ALockupdate node = new ALockupdate(node1, node2, node3, node4, node5);
        return node;
    }

    Node new191()
    {
        TLock node1 = (TLock) pop();
        ALockLockOp node = new ALockLockOp(node1);
        return node;
    }

    Node new192()
    {
        TUnlock node1 = (TUnlock) pop();
        AUnlockLockOp node = new AUnlockLockOp(node1);
        return node;
    }

    Node new193()
    {
        TWait node1 = (TWait) pop();
        AWaitLockOp node = new AWaitLockOp(node1);
        return node;
    }

    Node new194()
    {
        TUnwait node1 = (TUnwait) pop();
        AUnwaitLockOp node = new AUnwaitLockOp(node1);
        return node;
    }

    Node new195()
    {
        TNotify node1 = (TNotify) pop();
        ANotifyLockOp node = new ANotifyLockOp(node1);
        return node;
    }

    Node new196()
    {
        TNotifyall node1 = (TNotifyall) pop();
        ANotifyallLockOp node = new ANotifyallLockOp(node1);
        return node;
    }

    Node new197()
    {
        TRparen node4 = (TRparen) pop();
        PLhs node3 = (PLhs) pop();
        TLparen node2 = (TLparen) pop();
        PLocktestop node1 = (PLocktestop) pop();
        ALocktest node = new ALocktest(node1, node2, node3, node4);
        return node;
    }

    Node new198()
    {
        TLockavailable node1 = (TLockavailable) pop();
        ALockavailableLocktestop node = new ALockavailableLocktestop(node1);
        return node;
    }

    Node new199()
    {
        THaslock node1 = (THaslock) pop();
        AHaslockLocktestop node = new AHaslockLocktestop(node1);
        return node;
    }

    Node new200()
    {
        TWasnotified node1 = (TWasnotified) pop();
        AWasnotifiedLocktestop node = new AWasnotifiedLocktestop(node1);
        return node;
    }

    Node new201()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRparen node6 = (TRparen) pop();
        PStartargs node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TStart node2 = (TStart) pop();
        PLhsAssign node1 = null;
        AStartThreadupdate node = new AStartThreadupdate(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new202()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRparen node6 = (TRparen) pop();
        PStartargs node5 = null;
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TStart node2 = (TStart) pop();
        PLhsAssign node1 = (PLhsAssign) pop();
        AStartThreadupdate node = new AStartThreadupdate(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new203()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRparen node6 = (TRparen) pop();
        PStartargs node5 = (PStartargs) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TStart node2 = (TStart) pop();
        PLhsAssign node1 = null;
        AStartThreadupdate node = new AStartThreadupdate(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new204()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRparen node6 = (TRparen) pop();
        PStartargs node5 = (PStartargs) pop();
        TLparen node4 = (TLparen) pop();
        TId node3 = (TId) pop();
        TStart node2 = (TStart) pop();
        PLhsAssign node1 = (PLhsAssign) pop();
        AStartThreadupdate node = new AStartThreadupdate(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new205()
    {
        TSemicolon node2 = (TSemicolon) pop();
        TExit node1 = (TExit) pop();
        AExitThreadupdate node = new AExitThreadupdate(node1, node2);
        return node;
    }

    Node new206()
    {
        TAssign node2 = (TAssign) pop();
        PLhs node1 = (PLhs) pop();
        ALhsAssign node = new ALhsAssign(node1, node2);
        return node;
    }

    Node new207()
    {
        PStartarg node1 = (PStartarg) pop();
        AOneStartargs node = new AOneStartargs(node1);
        return node;
    }

    Node new208()
    {
        PStartargs node3 = (PStartargs) pop();
        TComma node2 = (TComma) pop();
        PStartarg node1 = (PStartarg) pop();
        AMoreStartargs node = new AMoreStartargs(node1, node2, node3);
        return node;
    }

    Node new209()
    {
        PExpr node1 = (PExpr) pop();
        AStartarg node = new AStartarg(node1);
        return node;
    }

    Node new210()
    {
        TRparen node4 = (TRparen) pop();
        PLhs node3 = (PLhs) pop();
        TLparen node2 = (TLparen) pop();
        TThreadterminated node1 = (TThreadterminated) pop();
        ATerminatedThreadtest node = new ATerminatedThreadtest(node1, node2, node3, node4);
        return node;
    }

    Node new211()
    {
        TId node6 = (TId) pop();
        TAt node5 = (TAt) pop();
        TRbrace node4 = (TRbrace) pop();
        PLhs node3 = (PLhs) pop();
        TLbrace node2 = (TLbrace) pop();
        TId node1 = (TId) pop();
        AAtlocationThreadtest node = new AAtlocationThreadtest(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new212()
    {
        XPPredicate node2 = null;
        TPredicates node1 = (TPredicates) pop();
        APredicates node = new APredicates(node1, node2);
        return node;
    }

    Node new213()
    {
        XPPredicate node2 = (XPPredicate) pop();
        TPredicates node1 = (TPredicates) pop();
        APredicates node = new APredicates(node1, node2);
        return node;
    }

    Node new214()
    {
        PPredicate node2 = (PPredicate) pop();
        XPPredicate node1 = (XPPredicate) pop();
        X1PPredicate node = new X1PPredicate(node1, node2);
        return node;
    }

    Node new215()
    {
        PPredicate node1 = (PPredicate) pop();
        X2PPredicate node = new X2PPredicate(node1);
        return node;
    }

    Node new216()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PExpr node3 = (PExpr) pop();
        TEquals node2 = (TEquals) pop();
        TId node1 = (TId) pop();
        APredicate node = new APredicate(node1, node2, node3, node4);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {34, SHIFT, 1}, },
			{{-1, ERROR, 1}, {75, SHIFT, 4}, },
			{{-1, ERROR, 2}, {78, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {4, SHIFT, 5}, },
			{{-1, ERROR, 5}, {5, SHIFT, 6}, },
			{{-1, ERROR, 6}, {35, SHIFT, 7}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 11}, },
			{{-1, ERROR, 7}, {75, SHIFT, 23}, },
			{{-1, ERROR, 8}, {51, SHIFT, 24}, },
			{{-1, ERROR, 9}, {75, SHIFT, 25}, },
			{{-1, REDUCE, 212}, {75, SHIFT, 26}, },
			{{-1, ERROR, 11}, {1, SHIFT, 29}, {21, SHIFT, 30}, {42, SHIFT, 31}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 18}, {35, SHIFT, 32}, },
			{{-1, ERROR, 19}, {35, SHIFT, 33}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 11}, },
			{{-1, ERROR, 20}, {35, SHIFT, 39}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 40}, },
			{{-1, ERROR, 21}, {35, SHIFT, 45}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 46}, },
			{{-1, ERROR, 22}, {35, SHIFT, 50}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 23}, {0, SHIFT, 53}, },
			{{-1, ERROR, 24}, {75, SHIFT, 54}, },
			{{-1, ERROR, 25}, {4, SHIFT, 55}, },
			{{-1, ERROR, 26}, {21, SHIFT, 56}, },
			{{-1, REDUCE, 215}, },
			{{-1, REDUCE, 213}, {75, SHIFT, 26}, },
			{{-1, ERROR, 29}, {30, SHIFT, 58}, {31, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {39, SHIFT, 62}, {44, SHIFT, 63}, {45, SHIFT, 64}, {46, SHIFT, 65}, {49, SHIFT, 66}, {75, SHIFT, 67}, },
			{{-1, ERROR, 30}, {30, SHIFT, 58}, {31, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {39, SHIFT, 62}, {44, SHIFT, 63}, {46, SHIFT, 65}, {49, SHIFT, 66}, {76, SHIFT, 70}, },
			{{-1, ERROR, 31}, {75, SHIFT, 72}, },
			{{-1, ERROR, 32}, {75, SHIFT, 73}, },
			{{-1, ERROR, 33}, {75, SHIFT, 74}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 35}, {35, SHIFT, 75}, },
			{{-1, ERROR, 36}, {35, SHIFT, 76}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 40}, },
			{{-1, ERROR, 37}, {35, SHIFT, 80}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 46}, },
			{{-1, ERROR, 38}, {35, SHIFT, 83}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 39}, {75, SHIFT, 85}, },
			{{-1, ERROR, 40}, {1, SHIFT, 29}, {42, SHIFT, 31}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 42}, {35, SHIFT, 86}, },
			{{-1, ERROR, 43}, {35, SHIFT, 87}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 46}, },
			{{-1, ERROR, 44}, {35, SHIFT, 90}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 45}, {75, SHIFT, 92}, },
			{{-1, ERROR, 46}, {1, SHIFT, 29}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 48}, {35, SHIFT, 93}, },
			{{-1, ERROR, 49}, {35, SHIFT, 94}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 50}, {75, SHIFT, 96}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 52}, {35, SHIFT, 97}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 54}, {4, SHIFT, 98}, },
			{{-1, ERROR, 55}, {5, SHIFT, 99}, {75, SHIFT, 100}, },
			{{-1, ERROR, 56}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, REDUCE, 214}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 60}, {75, SHIFT, 131}, {76, SHIFT, 132}, },
			{{-1, REDUCE, 59}, {38, SHIFT, 134}, {59, SHIFT, 135}, },
			{{-1, ERROR, 62}, {6, SHIFT, 136}, },
			{{-1, ERROR, 63}, {2, SHIFT, 137}, },
			{{-1, ERROR, 64}, {6, SHIFT, 138}, },
			{{-1, ERROR, 65}, {2, SHIFT, 139}, },
			{{-1, ERROR, 66}, {2, SHIFT, 140}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 69}, {0, SHIFT, 141}, {28, SHIFT, 142}, },
			{{-1, ERROR, 70}, {0, SHIFT, 144}, },
			{{-1, ERROR, 71}, {0, SHIFT, 145}, },
			{{-1, ERROR, 72}, {0, SHIFT, 146}, },
			{{-1, ERROR, 73}, {0, SHIFT, 147}, },
			{{-1, ERROR, 74}, {0, SHIFT, 148}, },
			{{-1, ERROR, 75}, {75, SHIFT, 149}, },
			{{-1, ERROR, 76}, {75, SHIFT, 150}, },
			{{-1, ERROR, 77}, {35, SHIFT, 151}, },
			{{-1, ERROR, 78}, {35, SHIFT, 152}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, {75, SHIFT, 46}, },
			{{-1, ERROR, 79}, {35, SHIFT, 155}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 80}, {75, SHIFT, 157}, },
			{{-1, ERROR, 81}, {35, SHIFT, 158}, },
			{{-1, ERROR, 82}, {35, SHIFT, 159}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 83}, {75, SHIFT, 161}, },
			{{-1, ERROR, 84}, {35, SHIFT, 162}, },
			{{-1, ERROR, 85}, {0, SHIFT, 163}, },
			{{-1, ERROR, 86}, {75, SHIFT, 164}, },
			{{-1, ERROR, 87}, {75, SHIFT, 165}, },
			{{-1, ERROR, 88}, {35, SHIFT, 166}, },
			{{-1, ERROR, 89}, {35, SHIFT, 167}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 90}, {75, SHIFT, 169}, },
			{{-1, ERROR, 91}, {35, SHIFT, 170}, },
			{{-1, ERROR, 92}, {0, SHIFT, 171}, },
			{{-1, ERROR, 93}, {75, SHIFT, 172}, },
			{{-1, ERROR, 94}, {75, SHIFT, 173}, },
			{{-1, ERROR, 95}, {35, SHIFT, 174}, },
			{{-1, ERROR, 96}, {0, SHIFT, 175}, },
			{{-1, ERROR, 97}, {75, SHIFT, 176}, },
			{{-1, ERROR, 98}, {5, SHIFT, 177}, {75, SHIFT, 100}, },
			{{-1, ERROR, 99}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, ERROR, 100}, {1, SHIFT, 184}, },
			{{-1, ERROR, 101}, {5, SHIFT, 185}, },
			{{-1, REDUCE, 78}, {10, SHIFT, 186}, },
			{{-1, ERROR, 103}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 104}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 105}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 106}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 109}, {75, SHIFT, 191}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 198}, },
			{{-1, ERROR, 112}, {4, SHIFT, 192}, },
			{{-1, REDUCE, 199}, },
			{{-1, REDUCE, 200}, },
			{{-1, REDUCE, 84}, {2, SHIFT, 193}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 119}, {0, SHIFT, 194}, },
			{{-1, REDUCE, 127}, {19, SHIFT, 195}, },
			{{-1, REDUCE, 128}, {18, SHIFT, 196}, },
			{{-1, REDUCE, 130}, {20, SHIFT, 197}, {23, SHIFT, 198}, },
			{{-1, REDUCE, 132}, {24, SHIFT, 199}, {25, SHIFT, 200}, {26, SHIFT, 201}, {27, SHIFT, 202}, },
			{{-1, REDUCE, 135}, {13, SHIFT, 203}, {14, SHIFT, 204}, },
			{{-1, REDUCE, 140}, {15, SHIFT, 205}, {16, SHIFT, 206}, {17, SHIFT, 207}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 147}, {6, SHIFT, 208}, {11, SHIFT, 209}, {43, SHIFT, 210}, },
			{{-1, REDUCE, 152}, },
			{{-1, ERROR, 129}, {4, SHIFT, 211}, },
			{{-1, REDUCE, 153}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 133}, {12, SHIFT, 212}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 60}, {38, SHIFT, 213}, },
			{{-1, ERROR, 136}, {75, SHIFT, 131}, {76, SHIFT, 132}, },
			{{-1, ERROR, 137}, {3, SHIFT, 215}, {75, SHIFT, 216}, },
			{{-1, ERROR, 138}, {75, SHIFT, 131}, {76, SHIFT, 132}, },
			{{-1, ERROR, 139}, {75, SHIFT, 220}, },
			{{-1, ERROR, 140}, {75, SHIFT, 221}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 142}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {75, SHIFT, 223}, {76, SHIFT, 116}, },
			{{-1, ERROR, 143}, {0, SHIFT, 225}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 149}, {0, SHIFT, 226}, },
			{{-1, ERROR, 150}, {0, SHIFT, 227}, },
			{{-1, ERROR, 151}, {75, SHIFT, 228}, },
			{{-1, ERROR, 152}, {75, SHIFT, 229}, },
			{{-1, ERROR, 153}, {35, SHIFT, 230}, },
			{{-1, ERROR, 154}, {35, SHIFT, 231}, {50, SHIFT, 8}, {51, SHIFT, 9}, {74, SHIFT, 10}, },
			{{-1, ERROR, 155}, {75, SHIFT, 233}, },
			{{-1, ERROR, 156}, {35, SHIFT, 234}, },
			{{-1, ERROR, 157}, {0, SHIFT, 235}, },
			{{-1, ERROR, 158}, {75, SHIFT, 236}, },
			{{-1, ERROR, 159}, {75, SHIFT, 237}, },
			{{-1, ERROR, 160}, {35, SHIFT, 238}, },
			{{-1, ERROR, 161}, {0, SHIFT, 239}, },
			{{-1, ERROR, 162}, {75, SHIFT, 240}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 164}, {0, SHIFT, 241}, },
			{{-1, ERROR, 165}, {0, SHIFT, 242}, },
			{{-1, ERROR, 166}, {75, SHIFT, 243}, },
			{{-1, ERROR, 167}, {75, SHIFT, 244}, },
			{{-1, ERROR, 168}, {35, SHIFT, 245}, },
			{{-1, ERROR, 169}, {0, SHIFT, 246}, },
			{{-1, ERROR, 170}, {75, SHIFT, 247}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 172}, {0, SHIFT, 248}, },
			{{-1, ERROR, 173}, {0, SHIFT, 249}, },
			{{-1, ERROR, 174}, {75, SHIFT, 250}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 176}, {0, SHIFT, 251}, },
			{{-1, ERROR, 177}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, ERROR, 178}, {5, SHIFT, 254}, },
			{{-1, ERROR, 179}, {75, SHIFT, 255}, },
			{{-1, ERROR, 180}, {1, SHIFT, 256}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 182}, {35, SHIFT, 257}, {52, SHIFT, 179}, },
			{{-1, ERROR, 183}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, ERROR, 184}, {30, SHIFT, 58}, {31, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {39, SHIFT, 62}, {44, SHIFT, 63}, {46, SHIFT, 65}, {49, SHIFT, 66}, {75, SHIFT, 67}, },
			{{-1, ERROR, 185}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, ERROR, 186}, {75, SHIFT, 100}, },
			{{-1, ERROR, 187}, {5, SHIFT, 266}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 192}, {75, SHIFT, 267}, },
			{{-1, ERROR, 193}, {75, SHIFT, 267}, },
			{{-1, REDUCE, 216}, },
			{{-1, ERROR, 195}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 196}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 197}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 198}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 199}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 200}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 201}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 202}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 203}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 204}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 205}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 206}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 207}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 208}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 209}, {41, SHIFT, 284}, {75, SHIFT, 285}, },
			{{-1, ERROR, 210}, {75, SHIFT, 286}, },
			{{-1, ERROR, 211}, {75, SHIFT, 267}, },
			{{-1, ERROR, 212}, {75, SHIFT, 131}, {76, SHIFT, 132}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 214}, {7, SHIFT, 289}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 216}, {1, SHIFT, 290}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 218}, {3, SHIFT, 291}, {75, SHIFT, 216}, },
			{{-1, ERROR, 219}, {7, SHIFT, 293}, },
			{{-1, ERROR, 220}, {3, SHIFT, 294}, {10, SHIFT, 295}, },
			{{-1, REDUCE, 65}, {21, SHIFT, 298}, },
			{{-1, ERROR, 222}, {3, SHIFT, 299}, {10, SHIFT, 300}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 228}, {0, SHIFT, 303}, },
			{{-1, ERROR, 229}, {0, SHIFT, 304}, },
			{{-1, ERROR, 230}, {75, SHIFT, 305}, },
			{{-1, ERROR, 231}, {75, SHIFT, 306}, },
			{{-1, ERROR, 232}, {35, SHIFT, 307}, },
			{{-1, ERROR, 233}, {0, SHIFT, 308}, },
			{{-1, ERROR, 234}, {75, SHIFT, 309}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 236}, {0, SHIFT, 310}, },
			{{-1, ERROR, 237}, {0, SHIFT, 311}, },
			{{-1, ERROR, 238}, {75, SHIFT, 312}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 240}, {0, SHIFT, 313}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 243}, {0, SHIFT, 314}, },
			{{-1, ERROR, 244}, {0, SHIFT, 315}, },
			{{-1, ERROR, 245}, {75, SHIFT, 316}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 247}, {0, SHIFT, 317}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 250}, {0, SHIFT, 318}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 252}, {35, SHIFT, 319}, {52, SHIFT, 179}, },
			{{-1, ERROR, 253}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, ERROR, 254}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, ERROR, 255}, {1, SHIFT, 324}, },
			{{-1, ERROR, 256}, {30, SHIFT, 58}, {31, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {39, SHIFT, 62}, {44, SHIFT, 63}, {46, SHIFT, 65}, {49, SHIFT, 66}, {75, SHIFT, 67}, },
			{{-1, ERROR, 257}, {75, SHIFT, 325}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 259}, {35, SHIFT, 326}, {52, SHIFT, 179}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 261}, {35, SHIFT, 328}, {52, SHIFT, 179}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 263}, {35, SHIFT, 330}, {52, SHIFT, 179}, },
			{{-1, ERROR, 264}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 160}, },
			{{-1, ERROR, 268}, {5, SHIFT, 333}, {6, SHIFT, 334}, {11, SHIFT, 335}, },
			{{-1, ERROR, 269}, {3, SHIFT, 336}, {6, SHIFT, 334}, {11, SHIFT, 335}, },
			{{-1, REDUCE, 129}, {18, SHIFT, 196}, },
			{{-1, REDUCE, 131}, {20, SHIFT, 197}, {23, SHIFT, 198}, },
			{{-1, REDUCE, 133}, {24, SHIFT, 199}, {25, SHIFT, 200}, {26, SHIFT, 201}, {27, SHIFT, 202}, },
			{{-1, REDUCE, 134}, {24, SHIFT, 199}, {25, SHIFT, 200}, {26, SHIFT, 201}, {27, SHIFT, 202}, },
			{{-1, REDUCE, 136}, {13, SHIFT, 203}, {14, SHIFT, 204}, },
			{{-1, REDUCE, 138}, {13, SHIFT, 203}, {14, SHIFT, 204}, },
			{{-1, REDUCE, 137}, {13, SHIFT, 203}, {14, SHIFT, 204}, },
			{{-1, REDUCE, 139}, {13, SHIFT, 203}, {14, SHIFT, 204}, },
			{{-1, REDUCE, 141}, {15, SHIFT, 205}, {16, SHIFT, 206}, {17, SHIFT, 207}, },
			{{-1, REDUCE, 142}, {15, SHIFT, 205}, {16, SHIFT, 206}, {17, SHIFT, 207}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 146}, },
			{{-1, ERROR, 283}, {7, SHIFT, 337}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 154}, },
			{{-1, REDUCE, 157}, },
			{{-1, ERROR, 287}, {5, SHIFT, 338}, {6, SHIFT, 334}, {11, SHIFT, 335}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 289}, {40, SHIFT, 339}, },
			{{-1, ERROR, 290}, {30, SHIFT, 58}, {31, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {39, SHIFT, 62}, {44, SHIFT, 63}, {46, SHIFT, 65}, {49, SHIFT, 66}, {75, SHIFT, 67}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 293}, {40, SHIFT, 341}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 295}, {75, SHIFT, 342}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 297}, {3, SHIFT, 343}, {10, SHIFT, 295}, },
			{{-1, ERROR, 298}, {76, SHIFT, 345}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 300}, {75, SHIFT, 221}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 302}, {3, SHIFT, 347}, {10, SHIFT, 300}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 305}, {0, SHIFT, 349}, },
			{{-1, ERROR, 306}, {0, SHIFT, 350}, },
			{{-1, ERROR, 307}, {75, SHIFT, 351}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 309}, {0, SHIFT, 352}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 312}, {0, SHIFT, 353}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 316}, {0, SHIFT, 354}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 319}, {75, SHIFT, 355}, },
			{{-1, ERROR, 320}, {35, SHIFT, 356}, {52, SHIFT, 179}, },
			{{-1, ERROR, 321}, {35, SHIFT, 357}, {52, SHIFT, 179}, },
			{{-1, ERROR, 322}, {35, SHIFT, 359}, {52, SHIFT, 179}, },
			{{-1, ERROR, 323}, {52, SHIFT, 179}, {75, SHIFT, 180}, },
			{{-1, REDUCE, 109}, {53, SHIFT, 362}, {54, SHIFT, 363}, },
			{{-1, ERROR, 325}, {0, SHIFT, 367}, },
			{{-1, ERROR, 326}, {75, SHIFT, 368}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 328}, {75, SHIFT, 369}, },
			{{-1, ERROR, 329}, {35, SHIFT, 370}, {52, SHIFT, 179}, },
			{{-1, ERROR, 330}, {75, SHIFT, 371}, },
			{{-1, ERROR, 331}, {35, SHIFT, 372}, {52, SHIFT, 179}, },
			{{-1, ERROR, 332}, {35, SHIFT, 373}, {52, SHIFT, 179}, },
			{{-1, REDUCE, 210}, },
			{{-1, ERROR, 334}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 335}, {41, SHIFT, 376}, {75, SHIFT, 377}, },
			{{-1, ERROR, 336}, {1, SHIFT, 378}, {9, SHIFT, 379}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 197}, },
			{{-1, ERROR, 339}, {30, SHIFT, 58}, {31, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {39, SHIFT, 62}, {44, SHIFT, 63}, {46, SHIFT, 65}, {49, SHIFT, 66}, {75, SHIFT, 67}, },
			{{-1, ERROR, 340}, {0, SHIFT, 381}, },
			{{-1, ERROR, 341}, {30, SHIFT, 58}, {31, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {39, SHIFT, 62}, {44, SHIFT, 63}, {46, SHIFT, 65}, {49, SHIFT, 66}, {75, SHIFT, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 351}, {0, SHIFT, 383}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 355}, {0, SHIFT, 384}, },
			{{-1, ERROR, 356}, {75, SHIFT, 385}, },
			{{-1, ERROR, 357}, {75, SHIFT, 386}, },
			{{-1, ERROR, 358}, {35, SHIFT, 387}, {52, SHIFT, 179}, },
			{{-1, ERROR, 359}, {75, SHIFT, 388}, },
			{{-1, ERROR, 360}, {35, SHIFT, 389}, {52, SHIFT, 179}, },
			{{-1, ERROR, 361}, {35, SHIFT, 390}, {52, SHIFT, 179}, },
			{{-1, ERROR, 362}, {2, SHIFT, 392}, },
			{{-1, ERROR, 363}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 110}, {54, SHIFT, 363}, },
			{{-1, REDUCE, 111}, {54, SHIFT, 363}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 368}, {0, SHIFT, 396}, },
			{{-1, ERROR, 369}, {0, SHIFT, 397}, },
			{{-1, ERROR, 370}, {75, SHIFT, 398}, },
			{{-1, ERROR, 371}, {0, SHIFT, 399}, },
			{{-1, ERROR, 372}, {75, SHIFT, 400}, },
			{{-1, ERROR, 373}, {75, SHIFT, 401}, },
			{{-1, ERROR, 374}, {35, SHIFT, 402}, {52, SHIFT, 179}, },
			{{-1, ERROR, 375}, {7, SHIFT, 403}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 161}, },
			{{-1, ERROR, 378}, {75, SHIFT, 404}, },
			{{-1, ERROR, 379}, {75, SHIFT, 405}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 382}, {0, SHIFT, 406}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 385}, {0, SHIFT, 407}, },
			{{-1, ERROR, 386}, {0, SHIFT, 408}, },
			{{-1, ERROR, 387}, {75, SHIFT, 409}, },
			{{-1, ERROR, 388}, {0, SHIFT, 410}, },
			{{-1, ERROR, 389}, {75, SHIFT, 411}, },
			{{-1, ERROR, 390}, {75, SHIFT, 412}, },
			{{-1, ERROR, 391}, {35, SHIFT, 413}, {52, SHIFT, 179}, },
			{{-1, ERROR, 392}, {3, SHIFT, 414}, {75, SHIFT, 415}, },
			{{-1, ERROR, 393}, {55, SHIFT, 416}, },
			{{-1, REDUCE, 114}, {54, SHIFT, 363}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 398}, {0, SHIFT, 417}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 400}, {0, SHIFT, 418}, },
			{{-1, ERROR, 401}, {0, SHIFT, 419}, },
			{{-1, ERROR, 402}, {75, SHIFT, 420}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 211}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 409}, {0, SHIFT, 421}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 411}, {0, SHIFT, 422}, },
			{{-1, ERROR, 412}, {0, SHIFT, 423}, },
			{{-1, ERROR, 413}, {75, SHIFT, 424}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 415}, {3, SHIFT, 425}, {10, SHIFT, 426}, },
			{{-1, ERROR, 416}, {2, SHIFT, 429}, {56, SHIFT, 430}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 420}, {0, SHIFT, 431}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 424}, {0, SHIFT, 432}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 426}, {75, SHIFT, 433}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 428}, {3, SHIFT, 434}, {10, SHIFT, 426}, },
			{{-1, ERROR, 429}, {3, SHIFT, 436}, {29, SHIFT, 437}, {37, SHIFT, 438}, {58, SHIFT, 439}, {59, SHIFT, 440}, {60, SHIFT, 441}, {61, SHIFT, 442}, {62, SHIFT, 443}, {64, SHIFT, 444}, {66, SHIFT, 445}, {73, SHIFT, 446}, {75, SHIFT, 267}, },
			{{-1, ERROR, 430}, {2, SHIFT, 459}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 436}, {57, SHIFT, 460}, },
			{{-1, ERROR, 437}, {4, SHIFT, 461}, },
			{{-1, REDUCE, 191}, },
			{{-1, REDUCE, 192}, },
			{{-1, REDUCE, 193}, },
			{{-1, REDUCE, 194}, },
			{{-1, REDUCE, 195}, },
			{{-1, REDUCE, 196}, },
			{{-1, ERROR, 444}, {75, SHIFT, 462}, },
			{{-1, ERROR, 445}, {0, SHIFT, 463}, },
			{{-1, ERROR, 446}, {4, SHIFT, 464}, },
			{{-1, ERROR, 447}, {6, SHIFT, 334}, {11, SHIFT, 335}, {28, SHIFT, 465}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 165}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 167}, },
			{{-1, REDUCE, 168}, },
			{{-1, REDUCE, 169}, },
			{{-1, ERROR, 455}, {4, SHIFT, 466}, },
			{{-1, REDUCE, 170}, },
			{{-1, ERROR, 457}, {64, SHIFT, 467}, },
			{{-1, ERROR, 458}, {3, SHIFT, 468}, {29, SHIFT, 437}, {37, SHIFT, 438}, {58, SHIFT, 439}, {59, SHIFT, 440}, {60, SHIFT, 441}, {61, SHIFT, 442}, {62, SHIFT, 443}, {64, SHIFT, 444}, {66, SHIFT, 445}, {73, SHIFT, 446}, {75, SHIFT, 267}, },
			{{-1, ERROR, 459}, {3, SHIFT, 470}, {29, SHIFT, 437}, {37, SHIFT, 438}, {58, SHIFT, 439}, {59, SHIFT, 440}, {60, SHIFT, 441}, {61, SHIFT, 442}, {62, SHIFT, 443}, {64, SHIFT, 444}, {66, SHIFT, 445}, {73, SHIFT, 446}, {75, SHIFT, 267}, },
			{{-1, ERROR, 460}, {75, SHIFT, 472}, },
			{{-1, ERROR, 461}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 462}, {4, SHIFT, 474}, },
			{{-1, REDUCE, 205}, },
			{{-1, ERROR, 464}, {5, SHIFT, 475}, {75, SHIFT, 476}, {77, SHIFT, 477}, },
			{{-1, REDUCE, 206}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {47, SHIFT, 480}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {68, SHIFT, 481}, {69, SHIFT, 482}, {70, SHIFT, 483}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 466}, {75, SHIFT, 267}, },
			{{-1, ERROR, 467}, {75, SHIFT, 486}, },
			{{-1, ERROR, 468}, {57, SHIFT, 487}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 470}, {57, SHIFT, 488}, },
			{{-1, ERROR, 471}, {3, SHIFT, 489}, {29, SHIFT, 437}, {37, SHIFT, 438}, {58, SHIFT, 439}, {59, SHIFT, 440}, {60, SHIFT, 441}, {61, SHIFT, 442}, {62, SHIFT, 443}, {64, SHIFT, 444}, {66, SHIFT, 445}, {73, SHIFT, 446}, {75, SHIFT, 267}, },
			{{-1, ERROR, 472}, {0, SHIFT, 490}, },
			{{-1, ERROR, 473}, {5, SHIFT, 491}, },
			{{-1, ERROR, 474}, {4, SHIFT, 103}, {5, SHIFT, 492}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 475}, {0, SHIFT, 496}, },
			{{-1, REDUCE, 177}, },
			{{-1, REDUCE, 176}, },
			{{-1, ERROR, 478}, {5, SHIFT, 497}, },
			{{-1, REDUCE, 174}, {10, SHIFT, 498}, },
			{{-1, ERROR, 480}, {75, SHIFT, 499}, },
			{{-1, ERROR, 481}, {4, SHIFT, 500}, },
			{{-1, ERROR, 482}, {4, SHIFT, 501}, },
			{{-1, ERROR, 483}, {4, SHIFT, 502}, },
			{{-1, ERROR, 484}, {0, SHIFT, 503}, },
			{{-1, ERROR, 485}, {5, SHIFT, 504}, {6, SHIFT, 334}, {11, SHIFT, 335}, },
			{{-1, ERROR, 486}, {4, SHIFT, 505}, },
			{{-1, ERROR, 487}, {75, SHIFT, 506}, },
			{{-1, ERROR, 488}, {75, SHIFT, 507}, },
			{{-1, ERROR, 489}, {57, SHIFT, 508}, },
			{{-1, REDUCE, 115}, },
			{{-1, ERROR, 491}, {0, SHIFT, 509}, },
			{{-1, ERROR, 492}, {0, SHIFT, 510}, },
			{{-1, REDUCE, 209}, },
			{{-1, ERROR, 494}, {5, SHIFT, 511}, },
			{{-1, REDUCE, 207}, {10, SHIFT, 512}, },
			{{-1, REDUCE, 172}, },
			{{-1, ERROR, 497}, {0, SHIFT, 513}, },
			{{-1, ERROR, 498}, {75, SHIFT, 476}, {77, SHIFT, 477}, },
			{{-1, ERROR, 499}, {0, SHIFT, 515}, {6, SHIFT, 516}, },
			{{-1, ERROR, 500}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {75, SHIFT, 223}, {76, SHIFT, 116}, },
			{{-1, ERROR, 501}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {75, SHIFT, 223}, {76, SHIFT, 116}, },
			{{-1, ERROR, 502}, {75, SHIFT, 520}, },
			{{-1, REDUCE, 171}, },
			{{-1, ERROR, 504}, {0, SHIFT, 521}, },
			{{-1, ERROR, 505}, {4, SHIFT, 103}, {5, SHIFT, 522}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 506}, {0, SHIFT, 524}, },
			{{-1, ERROR, 507}, {0, SHIFT, 525}, },
			{{-1, ERROR, 508}, {75, SHIFT, 526}, },
			{{-1, REDUCE, 178}, },
			{{-1, REDUCE, 201}, },
			{{-1, ERROR, 511}, {0, SHIFT, 527}, },
			{{-1, ERROR, 512}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 187}, },
			{{-1, ERROR, 516}, {4, SHIFT, 103}, {13, SHIFT, 104}, {14, SHIFT, 105}, {22, SHIFT, 106}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {63, SHIFT, 111}, {67, SHIFT, 112}, {71, SHIFT, 113}, {72, SHIFT, 114}, {75, SHIFT, 115}, {76, SHIFT, 116}, },
			{{-1, ERROR, 517}, {0, SHIFT, 530}, },
			{{-1, ERROR, 518}, {5, SHIFT, 531}, {10, SHIFT, 532}, },
			{{-1, ERROR, 519}, {5, SHIFT, 535}, {10, SHIFT, 532}, },
			{{-1, ERROR, 520}, {5, SHIFT, 537}, },
			{{-1, REDUCE, 190}, },
			{{-1, ERROR, 522}, {0, SHIFT, 538}, },
			{{-1, ERROR, 523}, {5, SHIFT, 539}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 526}, {0, SHIFT, 540}, },
			{{-1, REDUCE, 203}, },
			{{-1, REDUCE, 208}, },
			{{-1, ERROR, 529}, {7, SHIFT, 541}, },
			{{-1, REDUCE, 188}, },
			{{-1, ERROR, 531}, {0, SHIFT, 542}, },
			{{-1, ERROR, 532}, {32, SHIFT, 107}, {33, SHIFT, 108}, {46, SHIFT, 109}, {48, SHIFT, 110}, {75, SHIFT, 223}, {76, SHIFT, 116}, },
			{{-1, REDUCE, 182}, },
			{{-1, ERROR, 534}, {5, SHIFT, 544}, {10, SHIFT, 532}, },
			{{-1, ERROR, 535}, {0, SHIFT, 546}, },
			{{-1, ERROR, 536}, {5, SHIFT, 547}, {10, SHIFT, 532}, },
			{{-1, ERROR, 537}, {0, SHIFT, 548}, },
			{{-1, REDUCE, 202}, },
			{{-1, ERROR, 539}, {0, SHIFT, 549}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 189}, },
			{{-1, REDUCE, 179}, },
			{{-1, REDUCE, 186}, },
			{{-1, ERROR, 544}, {0, SHIFT, 550}, },
			{{-1, REDUCE, 181}, },
			{{-1, REDUCE, 183}, },
			{{-1, ERROR, 547}, {0, SHIFT, 551}, },
			{{-1, REDUCE, 185}, },
			{{-1, REDUCE, 204}, },
			{{-1, REDUCE, 180}, },
			{{-1, REDUCE, 184}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 12}, {19, 34}, },
			{{-1, 68}, {30, 71}, },
			{{-1, 69}, {184, 262}, {290, 340}, {339, 380}, {341, 382}, },
			{{-1, 222}, {300, 346}, },
			{{-1, 301}, {302, 348}, },
			{{-1, 217}, {218, 292}, },
			{{-1, 296}, {297, 344}, },
			{{-1, 133}, {136, 214}, {138, 219}, {212, 288}, },
			{{-1, 13}, {20, 41}, {36, 41}, },
			{{-1, 14}, {21, 47}, {37, 47}, {43, 47}, {78, 47}, },
			{{-1, 15}, },
			{{-1, 16}, {99, 181}, {177, 181}, {183, 260}, {185, 181}, {253, 260}, {254, 181}, {264, 260}, {323, 260}, },
			{{-1, 101}, {98, 178}, {186, 265}, },
			{{-1, 102}, },
			{{-1, 143}, },
			{{-1, 117}, {142, 224}, {500, 518}, {501, 519}, {532, 543}, },
			{{-1, 118}, },
			{{-1, 17}, {22, 51}, {38, 51}, {44, 51}, {49, 51}, {79, 51}, {82, 51}, {89, 51}, {154, 51}, },
			{{-1, 258}, {99, 182}, {177, 252}, {183, 261}, {185, 263}, {253, 321}, {254, 322}, {259, 327}, {264, 332}, {320, 327}, {323, 361}, {329, 327}, {331, 327}, {358, 327}, {360, 327}, {374, 327}, {391, 327}, },
			{{-1, 364}, {366, 395}, {394, 395}, },
			{{-1, 365}, },
			{{-1, 427}, {428, 435}, },
			{{-1, 493}, {56, 119}, {103, 187}, {208, 283}, {334, 375}, {363, 393}, {461, 473}, {465, 484}, {516, 529}, },
			{{-1, 120}, },
			{{-1, 121}, {195, 270}, },
			{{-1, 122}, {196, 271}, },
			{{-1, 123}, {197, 272}, {198, 273}, },
			{{-1, 124}, {199, 274}, {200, 275}, {201, 276}, {202, 277}, },
			{{-1, 125}, {203, 278}, {204, 279}, },
			{{-1, 126}, {104, 188}, {105, 189}, {106, 190}, {205, 280}, {206, 281}, {207, 282}, },
			{{-1, 127}, },
			{{-1, 447}, {192, 268}, {193, 269}, {211, 287}, {466, 485}, },
			{{-1, 448}, {458, 469}, {471, 469}, },
			{{-1, 449}, },
			{{-1, 450}, },
			{{-1, 478}, {498, 514}, },
			{{-1, 479}, },
			{{-1, 451}, },
			{{-1, 452}, },
			{{-1, 533}, {534, 545}, {536, 545}, },
			{{-1, 453}, },
			{{-1, 517}, },
			{{-1, 454}, },
			{{-1, 455}, },
			{{-1, 128}, },
			{{-1, 129}, },
			{{-1, 456}, },
			{{-1, 457}, },
			{{-1, 494}, {505, 523}, {512, 528}, },
			{{-1, 495}, },
			{{-1, 130}, },
			{{-1, 18}, {19, 35}, {20, 42}, {21, 48}, {22, 52}, {36, 77}, {37, 81}, {38, 84}, {43, 88}, {44, 91}, {49, 95}, {78, 153}, {79, 156}, {82, 160}, {89, 168}, {154, 232}, },
			{{-1, 27}, {28, 57}, },
			{{-1, 19}, },
			{{-1, 20}, {19, 36}, },
			{{-1, 21}, {19, 37}, {20, 43}, {36, 78}, },
			{{-1, 22}, {19, 38}, {20, 44}, {21, 49}, {36, 79}, {37, 82}, {43, 89}, {78, 154}, },
			{{-1, 302}, },
			{{-1, 218}, },
			{{-1, 297}, },
			{{-1, 183}, {177, 253}, {185, 264}, {254, 323}, },
			{{-1, 259}, {252, 320}, {261, 329}, {263, 331}, {321, 358}, {322, 360}, {332, 374}, {361, 391}, },
			{{-1, 366}, {365, 394}, },
			{{-1, 458}, {459, 471}, },
			{{-1, 428}, },
			{{-1, 534}, {519, 536}, },
			{{-1, 28}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'process'",
			"expecting: id",
			"expecting: EOF",
			"expecting: '('",
			"expecting: ')'",
			"expecting: 'end', 'main', 'thread', 'predicates', id",
			"expecting: 'thread'",
			"expecting: 'end', id",
			"expecting: ':', '=', 'extends'",
			"expecting: 'end', 'main', 'thread', 'predicates'",
			"expecting: 'end'",
			"expecting: ';'",
			"expecting: '='",
			"expecting: 'boolean', 'tid', 'range', 'lock', 'array', 'record', 'collection', 'ref', 'enum', id",
			"expecting: 'boolean', 'tid', 'range', 'lock', 'array', 'record', 'ref', 'enum', int",
			"expecting: ':', 'extends'",
			"expecting: ':'",
			"expecting: ')', id",
			"expecting: '(', '+', '-', '!', 'true', 'false', 'ref', 'null', 'lockAvailable', 'threadTerminated', 'hasLock', 'wasNotified', id, int",
			"expecting: ';', ')', ',', ':='",
			"expecting: id, int",
			"expecting: ';', ')', ',', ':=', 'reentrant', 'wait'",
			"expecting: '['",
			"expecting: '{'",
			"expecting: ';', ':='",
			"expecting: 'loc', id",
			"expecting: ')', ','",
			"expecting: ';', ')', '[', ']', ',', '.', '+', '-', '*', '/', '%', '&&', '||', '==', '!=', '<', '>', '<=', '>=', 'instanceof', 'do'",
			"expecting: ';', '{', ')', '[', ']', ',', '.', '+', '-', '*', '/', '%', '&&', '||', '==', '!=', '<', '>', '<=', '>=', 'instanceof', 'do'",
			"expecting: ';', ')', ']', ',', '||', 'do'",
			"expecting: ';', ')', ']', ',', '&&', '||', 'do'",
			"expecting: ';', ')', ']', ',', '&&', '||', '==', '!=', 'do'",
			"expecting: ';', ')', ']', ',', '&&', '||', '==', '!=', '<', '>', '<=', '>=', 'do'",
			"expecting: ';', ')', ']', ',', '+', '-', '&&', '||', '==', '!=', '<', '>', '<=', '>=', 'do'",
			"expecting: ';', ')', ']', ',', '+', '-', '*', '/', '%', '&&', '||', '==', '!=', '<', '>', '<=', '>=', 'do'",
			"expecting: ';', ')', ']', ',', '..', ':='",
			"expecting: '..'",
			"expecting: ';', ')', ',', ':=', 'reentrant'",
			"expecting: '}', id",
			"expecting: 'end', 'main', 'thread', 'loc', 'predicates', id",
			"expecting: 'true', 'false', 'ref', 'null', id, int",
			"expecting: 'end', 'loc'",
			"expecting: 'boolean', 'tid', 'range', 'lock', 'array', 'record', 'ref', 'enum', id",
			"expecting: 'length', id",
			"expecting: ']'",
			"expecting: '}', ','",
			"expecting: '}', ',', '='",
			"expecting: ';', ')', ','",
			"expecting: '}', ')', '[', '.', ':='",
			"expecting: ')', '[', '.'",
			"expecting: '}', '[', '.'",
			"expecting: 'of'",
			"expecting: int",
			"expecting: 'end', 'loc', 'live', 'when'",
			"expecting: ':', '@'",
			"expecting: 'end', 'loc', 'when'",
			"expecting: 'do'",
			"expecting: '{', 'invisible'",
			"expecting: '}', 'assert', 'lock', 'unlock', 'wait', 'unwait', 'notify', 'notifyAll', 'start', 'exit', 'println', id",
			"expecting: 'goto'",
			"expecting: '[', '.', ':='",
			"expecting: 'start'",
			"expecting: ')', id, string",
			"expecting: '(', '+', '-', '!', 'true', 'false', 'ref', 'new', 'null', 'lockAvailable', 'start', 'threadTerminated', 'internChoose', 'externChoose', 'forall', 'hasLock', 'wasNotified', id, int",
			"expecting: '(', ')', '+', '-', '!', 'true', 'false', 'ref', 'null', 'lockAvailable', 'threadTerminated', 'hasLock', 'wasNotified', id, int",
			"expecting: id, string",
			"expecting: ';', '['",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 1, 6, 1, 7, 8, 5, 5, 5, 5, 5, 9, 10, 5, 5, 5, 9, 11, 1, 3, 12, 7, 7, 13, 14, 1, 1, 1, 5, 10, 5, 5, 9, 1, 15, 5, 10, 5, 9, 1, 16, 5, 10, 9, 1, 9, 10, 2, 3, 17, 18, 7, 19, 19, 20, 21, 22, 23, 22, 23, 23, 19, 19, 24, 11, 11, 11, 11, 11, 1, 1, 10, 5, 9, 1, 10, 9, 1, 10, 11, 1, 1, 10, 9, 1, 10, 11, 1, 1, 10, 11, 1, 17, 25, 16, 4, 26, 18, 18, 18, 18, 27, 27, 1, 27, 3, 3, 3, 3, 28, 27, 27, 27, 11, 29, 30, 31, 32, 33, 34, 34, 27, 27, 3, 27, 35, 35, 36, 19, 37, 20, 38, 20, 1, 1, 39, 40, 11, 5, 5, 5, 2, 2, 11, 11, 1, 1, 10, 9, 1, 10, 11, 1, 1, 10, 11, 1, 2, 11, 11, 1, 1, 10, 11, 1, 2, 11, 11, 1, 2, 11, 25, 4, 1, 16, 25, 41, 25, 42, 25, 1, 4, 34, 34, 34, 27, 1, 1, 7, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 43, 1, 1, 20, 19, 44, 19, 16, 38, 38, 44, 45, 46, 45, 47, 11, 39, 2, 2, 11, 11, 1, 1, 10, 11, 1, 2, 11, 11, 1, 2, 11, 2, 2, 11, 11, 1, 2, 11, 2, 2, 11, 2, 41, 25, 25, 16, 42, 1, 41, 41, 25, 41, 26, 41, 25, 4, 27, 48, 49, 50, 30, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 34, 44, 27, 27, 27, 49, 19, 51, 42, 19, 38, 51, 19, 1, 45, 45, 52, 19, 1, 45, 45, 2, 2, 11, 11, 1, 2, 11, 2, 2, 11, 2, 2, 2, 11, 2, 2, 1, 41, 41, 41, 25, 53, 11, 1, 41, 1, 41, 1, 41, 41, 27, 18, 43, 54, 27, 27, 42, 11, 42, 45, 19, 45, 45, 45, 19, 45, 2, 2, 11, 2, 2, 2, 11, 1, 1, 41, 1, 41, 41, 23, 18, 55, 55, 55, 9, 11, 11, 1, 11, 1, 1, 41, 44, 48, 48, 1, 1, 19, 38, 11, 2, 9, 11, 11, 1, 11, 1, 1, 41, 38, 56, 55, 55, 9, 9, 11, 9, 11, 11, 1, 48, 27, 27, 5, 9, 9, 11, 9, 11, 11, 1, 55, 45, 57, 9, 9, 9, 11, 9, 9, 9, 11, 55, 1, 45, 45, 58, 23, 9, 9, 45, 55, 45, 59, 3, 3, 3, 3, 3, 3, 3, 1, 11, 3, 60, 58, 58, 58, 58, 58, 58, 58, 3, 58, 61, 58, 58, 1, 18, 3, 58, 62, 63, 1, 1, 59, 58, 59, 58, 11, 4, 64, 11, 26, 26, 4, 26, 1, 3, 3, 3, 11, 49, 3, 1, 1, 59, 55, 11, 11, 26, 4, 26, 58, 11, 65, 66, 40, 40, 1, 58, 11, 64, 11, 11, 1, 58, 58, 11, 18, 58, 4, 58, 18, 11, 26, 26, 4, 58, 11, 4, 55, 55, 11, 58, 4, 44, 58, 11, 40, 26, 26, 11, 26, 11, 58, 11, 55, 11, 58, 26, 11, 26, 58, 11, 58, 58, 58, 58, 
        };*/
}
