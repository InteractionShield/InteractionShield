/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class AThread extends PThread
{
    private TMain _main_;
    private TThread _thread_;
    private TId _startname_;
    private TLparen _lparen_;
    private PParameters _parameters_;
    private TRparen _rparen_;
    private final LinkedList _locals_ = new TypedLinkedList(new Locals_Cast());
    private PLocation _startloc_;
    private final LinkedList _locations_ = new TypedLinkedList(new Locations_Cast());
    private TEnd _end_;
    private TId _endname_;
    private TSemicolon _semicolon_;

    public AThread()
    {
    }

    public AThread(
        TMain _main_,
        TThread _thread_,
        TId _startname_,
        TLparen _lparen_,
        PParameters _parameters_,
        TRparen _rparen_,
        List _locals_,
        PLocation _startloc_,
        List _locations_,
        TEnd _end_,
        TId _endname_,
        TSemicolon _semicolon_)
    {
        setMain(_main_);

        setThread(_thread_);

        setStartname(_startname_);

        setLparen(_lparen_);

        setParameters(_parameters_);

        setRparen(_rparen_);

        {
            this._locals_.clear();
            this._locals_.addAll(_locals_);
        }

        setStartloc(_startloc_);

        {
            this._locations_.clear();
            this._locations_.addAll(_locations_);
        }

        setEnd(_end_);

        setEndname(_endname_);

        setSemicolon(_semicolon_);

    }

    public AThread(
        TMain _main_,
        TThread _thread_,
        TId _startname_,
        TLparen _lparen_,
        PParameters _parameters_,
        TRparen _rparen_,
        XPVariable _locals_,
        PLocation _startloc_,
        XPLocation _locations_,
        TEnd _end_,
        TId _endname_,
        TSemicolon _semicolon_)
    {
        setMain(_main_);

        setThread(_thread_);

        setStartname(_startname_);

        setLparen(_lparen_);

        setParameters(_parameters_);

        setRparen(_rparen_);

        if(_locals_ != null)
        {
            while(_locals_ instanceof X1PVariable)
            {
                this._locals_.addFirst(((X1PVariable) _locals_).getPVariable());
                _locals_ = ((X1PVariable) _locals_).getXPVariable();
            }
            this._locals_.addFirst(((X2PVariable) _locals_).getPVariable());
        }

        setStartloc(_startloc_);

        if(_locations_ != null)
        {
            while(_locations_ instanceof X1PLocation)
            {
                this._locations_.addFirst(((X1PLocation) _locations_).getPLocation());
                _locations_ = ((X1PLocation) _locations_).getXPLocation();
            }
            this._locations_.addFirst(((X2PLocation) _locations_).getPLocation());
        }

        setEnd(_end_);

        setEndname(_endname_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AThread(
            (TMain) cloneNode(_main_),
            (TThread) cloneNode(_thread_),
            (TId) cloneNode(_startname_),
            (TLparen) cloneNode(_lparen_),
            (PParameters) cloneNode(_parameters_),
            (TRparen) cloneNode(_rparen_),
            cloneList(_locals_),
            (PLocation) cloneNode(_startloc_),
            cloneList(_locations_),
            (TEnd) cloneNode(_end_),
            (TId) cloneNode(_endname_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAThread(this);
    }

    public TMain getMain()
    {
        return _main_;
    }

    public void setMain(TMain node)
    {
        if(_main_ != null)
        {
            _main_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _main_ = node;
    }

    public TThread getThread()
    {
        return _thread_;
    }

    public void setThread(TThread node)
    {
        if(_thread_ != null)
        {
            _thread_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _thread_ = node;
    }

    public TId getStartname()
    {
        return _startname_;
    }

    public void setStartname(TId node)
    {
        if(_startname_ != null)
        {
            _startname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _startname_ = node;
    }

    public TLparen getLparen()
    {
        return _lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lparen_ = node;
    }

    public PParameters getParameters()
    {
        return _parameters_;
    }

    public void setParameters(PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _parameters_ = node;
    }

    public TRparen getRparen()
    {
        return _rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rparen_ = node;
    }

    public LinkedList getLocals()
    {
        return _locals_;
    }

    public void setLocals(List list)
    {
        _locals_.clear();
        _locals_.addAll(list);
    }

    public PLocation getStartloc()
    {
        return _startloc_;
    }

    public void setStartloc(PLocation node)
    {
        if(_startloc_ != null)
        {
            _startloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _startloc_ = node;
    }

    public LinkedList getLocations()
    {
        return _locations_;
    }

    public void setLocations(List list)
    {
        _locations_.clear();
        _locations_.addAll(list);
    }

    public TEnd getEnd()
    {
        return _end_;
    }

    public void setEnd(TEnd node)
    {
        if(_end_ != null)
        {
            _end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _end_ = node;
    }

    public TId getEndname()
    {
        return _endname_;
    }

    public void setEndname(TId node)
    {
        if(_endname_ != null)
        {
            _endname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _endname_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_main_)
            + toString(_thread_)
            + toString(_startname_)
            + toString(_lparen_)
            + toString(_parameters_)
            + toString(_rparen_)
            + toString(_locals_)
            + toString(_startloc_)
            + toString(_locations_)
            + toString(_end_)
            + toString(_endname_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_main_ == child)
        {
            _main_ = null;
            return;
        }

        if(_thread_ == child)
        {
            _thread_ = null;
            return;
        }

        if(_startname_ == child)
        {
            _startname_ = null;
            return;
        }

        if(_lparen_ == child)
        {
            _lparen_ = null;
            return;
        }

        if(_parameters_ == child)
        {
            _parameters_ = null;
            return;
        }

        if(_rparen_ == child)
        {
            _rparen_ = null;
            return;
        }

        if(_locals_.remove(child))
        {
            return;
        }

        if(_startloc_ == child)
        {
            _startloc_ = null;
            return;
        }

        if(_locations_.remove(child))
        {
            return;
        }

        if(_end_ == child)
        {
            _end_ = null;
            return;
        }

        if(_endname_ == child)
        {
            _endname_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_main_ == oldChild)
        {
            setMain((TMain) newChild);
            return;
        }

        if(_thread_ == oldChild)
        {
            setThread((TThread) newChild);
            return;
        }

        if(_startname_ == oldChild)
        {
            setStartname((TId) newChild);
            return;
        }

        if(_lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(_parameters_ == oldChild)
        {
            setParameters((PParameters) newChild);
            return;
        }

        if(_rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        for(ListIterator i = _locals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_startloc_ == oldChild)
        {
            setStartloc((PLocation) newChild);
            return;
        }

        for(ListIterator i = _locations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(_endname_ == oldChild)
        {
            setEndname((TId) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }

    private class Locals_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PVariable node = (PVariable) o;

            if((node.parent() != null) &&
                (node.parent() != AThread.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AThread.this))
            {
                node.parent(AThread.this);
            }

            return node;
        }
    }

    private class Locations_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PLocation node = (PLocation) o;

            if((node.parent() != null) &&
                (node.parent() != AThread.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AThread.this))
            {
                node.parent(AThread.this);
            }

            return node;
        }
    }
}
