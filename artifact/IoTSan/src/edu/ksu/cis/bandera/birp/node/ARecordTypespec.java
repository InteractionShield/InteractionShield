/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class ARecordTypespec extends PTypespec
{
    private TRecord _record_;
    private TLbrace _lbrace_;
    private final LinkedList _fields_ = new TypedLinkedList(new Fields_Cast());
    private TRbrace _rbrace_;

    public ARecordTypespec()
    {
    }

    public ARecordTypespec(
        TRecord _record_,
        TLbrace _lbrace_,
        List _fields_,
        TRbrace _rbrace_)
    {
        setRecord(_record_);

        setLbrace(_lbrace_);

        {
            this._fields_.clear();
            this._fields_.addAll(_fields_);
        }

        setRbrace(_rbrace_);

    }

    public ARecordTypespec(
        TRecord _record_,
        TLbrace _lbrace_,
        XPField _fields_,
        TRbrace _rbrace_)
    {
        setRecord(_record_);

        setLbrace(_lbrace_);

        if(_fields_ != null)
        {
            while(_fields_ instanceof X1PField)
            {
                this._fields_.addFirst(((X1PField) _fields_).getPField());
                _fields_ = ((X1PField) _fields_).getXPField();
            }
            this._fields_.addFirst(((X2PField) _fields_).getPField());
        }

        setRbrace(_rbrace_);

    }
    public Object clone()
    {
        return new ARecordTypespec(
            (TRecord) cloneNode(_record_),
            (TLbrace) cloneNode(_lbrace_),
            cloneList(_fields_),
            (TRbrace) cloneNode(_rbrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARecordTypespec(this);
    }

    public TRecord getRecord()
    {
        return _record_;
    }

    public void setRecord(TRecord node)
    {
        if(_record_ != null)
        {
            _record_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _record_ = node;
    }

    public TLbrace getLbrace()
    {
        return _lbrace_;
    }

    public void setLbrace(TLbrace node)
    {
        if(_lbrace_ != null)
        {
            _lbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lbrace_ = node;
    }

    public LinkedList getFields()
    {
        return _fields_;
    }

    public void setFields(List list)
    {
        _fields_.clear();
        _fields_.addAll(list);
    }

    public TRbrace getRbrace()
    {
        return _rbrace_;
    }

    public void setRbrace(TRbrace node)
    {
        if(_rbrace_ != null)
        {
            _rbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rbrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_record_)
            + toString(_lbrace_)
            + toString(_fields_)
            + toString(_rbrace_);
    }

    void removeChild(Node child)
    {
        if(_record_ == child)
        {
            _record_ = null;
            return;
        }

        if(_lbrace_ == child)
        {
            _lbrace_ = null;
            return;
        }

        if(_fields_.remove(child))
        {
            return;
        }

        if(_rbrace_ == child)
        {
            _rbrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_record_ == oldChild)
        {
            setRecord((TRecord) newChild);
            return;
        }

        if(_lbrace_ == oldChild)
        {
            setLbrace((TLbrace) newChild);
            return;
        }

        for(ListIterator i = _fields_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rbrace_ == oldChild)
        {
            setRbrace((TRbrace) newChild);
            return;
        }

    }

    private class Fields_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PField node = (PField) o;

            if((node.parent() != null) &&
                (node.parent() != ARecordTypespec.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ARecordTypespec.this))
            {
                node.parent(ARecordTypespec.this);
            }

            return node;
        }
    }
}
