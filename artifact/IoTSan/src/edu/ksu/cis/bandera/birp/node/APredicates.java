/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class APredicates extends PPredicates
{
    private TPredicates _predicates_;
    private final LinkedList _predicate_ = new TypedLinkedList(new Predicate_Cast());

    public APredicates()
    {
    }

    public APredicates(
        TPredicates _predicates_,
        List _predicate_)
    {
        setPredicates(_predicates_);

        {
            this._predicate_.clear();
            this._predicate_.addAll(_predicate_);
        }

    }

    public APredicates(
        TPredicates _predicates_,
        XPPredicate _predicate_)
    {
        setPredicates(_predicates_);

        if(_predicate_ != null)
        {
            while(_predicate_ instanceof X1PPredicate)
            {
                this._predicate_.addFirst(((X1PPredicate) _predicate_).getPPredicate());
                _predicate_ = ((X1PPredicate) _predicate_).getXPPredicate();
            }
            this._predicate_.addFirst(((X2PPredicate) _predicate_).getPPredicate());
        }

    }
    public Object clone()
    {
        return new APredicates(
            (TPredicates) cloneNode(_predicates_),
            cloneList(_predicate_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPredicates(this);
    }

    public TPredicates getPredicates()
    {
        return _predicates_;
    }

    public void setPredicates(TPredicates node)
    {
        if(_predicates_ != null)
        {
            _predicates_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _predicates_ = node;
    }

    public LinkedList getPredicate()
    {
        return _predicate_;
    }

    public void setPredicate(List list)
    {
        _predicate_.clear();
        _predicate_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_predicates_)
            + toString(_predicate_);
    }

    void removeChild(Node child)
    {
        if(_predicates_ == child)
        {
            _predicates_ = null;
            return;
        }

        if(_predicate_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_predicates_ == oldChild)
        {
            setPredicates((TPredicates) newChild);
            return;
        }

        for(ListIterator i = _predicate_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Predicate_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PPredicate node = (PPredicate) o;

            if((node.parent() != null) &&
                (node.parent() != APredicates.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != APredicates.this))
            {
                node.parent(APredicates.this);
            }

            return node;
        }
    }
}
