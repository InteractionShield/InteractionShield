/* This file was generated by SableCC (http://www.sablecc.org/). */

package edu.ksu.cis.bandera.birp.node;

import java.util.*;
import edu.ksu.cis.bandera.birp.analysis.*;

public final class AAssertaction extends PAssertaction
{
    private TAssert _assert_;
    private TLparen _lparen_;
    private PExpr _expr_;
    private TRparen _rparen_;
    private TSemicolon _semicolon_;

    public AAssertaction()
    {
    }

    public AAssertaction(
        TAssert _assert_,
        TLparen _lparen_,
        PExpr _expr_,
        TRparen _rparen_,
        TSemicolon _semicolon_)
    {
        setAssert(_assert_);

        setLparen(_lparen_);

        setExpr(_expr_);

        setRparen(_rparen_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AAssertaction(
            (TAssert) cloneNode(_assert_),
            (TLparen) cloneNode(_lparen_),
            (PExpr) cloneNode(_expr_),
            (TRparen) cloneNode(_rparen_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssertaction(this);
    }

    public TAssert getAssert()
    {
        return _assert_;
    }

    public void setAssert(TAssert node)
    {
        if(_assert_ != null)
        {
            _assert_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assert_ = node;
    }

    public TLparen getLparen()
    {
        return _lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lparen_ = node;
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public TRparen getRparen()
    {
        return _rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rparen_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_assert_)
            + toString(_lparen_)
            + toString(_expr_)
            + toString(_rparen_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_assert_ == child)
        {
            _assert_ = null;
            return;
        }

        if(_lparen_ == child)
        {
            _lparen_ = null;
            return;
        }

        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

        if(_rparen_ == child)
        {
            _rparen_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_assert_ == oldChild)
        {
            setAssert((TAssert) newChild);
            return;
        }

        if(_lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(_rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }
}
