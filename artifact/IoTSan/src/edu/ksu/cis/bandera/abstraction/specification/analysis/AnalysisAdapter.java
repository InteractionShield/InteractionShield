package edu.ksu.cis.bandera.abstraction.specification.analysis;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import java.util.*;
import edu.ksu.cis.bandera.abstraction.specification.node.*;

public class AnalysisAdapter implements Analysis
{
	private Hashtable in;
	private Hashtable out;

	public void caseAAbstractFunction(AAbstractFunction node)
	{
		defaultCase(node);
	}
	public void caseAAddExpShiftExp(AAddExpShiftExp node)
	{
		defaultCase(node);
	}
	public void caseAAndAndExp(AAndAndExp node)
	{
		defaultCase(node);
	}
	public void caseAAndBitAndExp(AAndBitAndExp node)
	{
		defaultCase(node);
	}
	public void caseAAndExclusiveOrExp(AAndExclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseAAndOrExp(AAndOrExp node)
	{
		defaultCase(node);
	}
	public void caseAAnyAbstractDef(AAnyAbstractDef node)
	{
		defaultCase(node);
	}
	public void caseAAnyAnyId(AAnyAnyId node)
	{
		defaultCase(node);
	}
	public void caseAAnyPattern(AAnyPattern node)
	{
		defaultCase(node);
	}
	public void caseABitComplementUnaryNotPlusMinusExp(ABitComplementUnaryNotPlusMinusExp node)
	{
		defaultCase(node);
	}
	public void caseAComplementUnaryNotPlusMinusExp(AComplementUnaryNotPlusMinusExp node)
	{
		defaultCase(node);
	}
	public void caseADecIntLiteral(ADecIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseADecLongLiteral(ADecLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseADefaultToken(ADefaultToken node)
	{
		defaultCase(node);
	}
	public void caseADivMultExp(ADivMultExp node)
	{
		defaultCase(node);
	}
	public void caseADivOp(ADivOp node)
	{
		defaultCase(node);
	}
	public void caseADoubleLiteral(ADoubleLiteral node)
	{
		defaultCase(node);
	}
	public void caseAEqBitAndExp(AEqBitAndExp node)
	{
		defaultCase(node);
	}
	public void caseAEqEqExp(AEqEqExp node)
	{
		defaultCase(node);
	}
	public void caseAEqualTOp(AEqualTOp node)
	{
		defaultCase(node);
	}
	public void caseAExp(AExp node)
	{
		defaultCase(node);
	}
	public void caseAExpAbstractDef(AExpAbstractDef node)
	{
		defaultCase(node);
	}
	public void caseAFloatLiteral(AFloatLiteral node)
	{
		defaultCase(node);
	}
	public void caseAGreaterEqualRelExp(AGreaterEqualRelExp node)
	{
		defaultCase(node);
	}
	public void caseAGreaterEqualTOp(AGreaterEqualTOp node)
	{
		defaultCase(node);
	}
	public void caseAGreaterRelExp(AGreaterRelExp node)
	{
		defaultCase(node);
	}
	public void caseAGreaterTOp(AGreaterTOp node)
	{
		defaultCase(node);
	}
	public void caseAHexIntLiteral(AHexIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseAHexLongLiteral(AHexLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseAIdAnyId(AIdAnyId node)
	{
		defaultCase(node);
	}
	public void caseAIdIdList(AIdIdList node)
	{
		defaultCase(node);
	}
	public void caseAIdPrimaryExp(AIdPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAIdSet(AIdSet node)
	{
		defaultCase(node);
	}
	public void caseAIdsIdList(AIdsIdList node)
	{
		defaultCase(node);
	}
	public void caseAInclusiveOrAndExp(AInclusiveOrAndExp node)
	{
		defaultCase(node);
	}
	public void caseAIntegralType(AIntegralType node)
	{
		defaultCase(node);
	}
	public void caseALeftShiftExp(ALeftShiftExp node)
	{
		defaultCase(node);
	}
	public void caseALessEqualRelExp(ALessEqualRelExp node)
	{
		defaultCase(node);
	}
	public void caseALessEqualTOp(ALessEqualTOp node)
	{
		defaultCase(node);
	}
	public void caseALessRelExp(ALessRelExp node)
	{
		defaultCase(node);
	}
	public void caseALessTOp(ALessTOp node)
	{
		defaultCase(node);
	}
	public void caseALiteralPrimaryExp(ALiteralPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAMinusAddExp(AMinusAddExp node)
	{
		defaultCase(node);
	}
	public void caseAMinusOp(AMinusOp node)
	{
		defaultCase(node);
	}
	public void caseAMinusUnaryExp(AMinusUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseAModMultExp(AModMultExp node)
	{
		defaultCase(node);
	}
	public void caseAModOp(AModOp node)
	{
		defaultCase(node);
	}
	public void caseAMultAddExp(AMultAddExp node)
	{
		defaultCase(node);
	}
	public void caseANeqEqExp(ANeqEqExp node)
	{
		defaultCase(node);
	}
	public void caseANotEqualTOp(ANotEqualTOp node)
	{
		defaultCase(node);
	}
	public void caseAOctIntLiteral(AOctIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseAOctLongLiteral(AOctLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseAOne2oneSet(AOne2oneSet node)
	{
		defaultCase(node);
	}
	public void caseAOperator(AOperator node)
	{
		defaultCase(node);
	}
	public void caseAOperatorOperatorTest(AOperatorOperatorTest node)
	{
		defaultCase(node);
	}
	public void caseAOrConditionalExp(AOrConditionalExp node)
	{
		defaultCase(node);
	}
	public void caseAOrInclusiveOrExp(AOrInclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseAOrOrExp(AOrOrExp node)
	{
		defaultCase(node);
	}
	public void caseAParenPrimaryExp(AParenPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAPatternPattern(APatternPattern node)
	{
		defaultCase(node);
	}
	public void caseAPlusAddExp(APlusAddExp node)
	{
		defaultCase(node);
	}
	public void caseAPlusOp(APlusOp node)
	{
		defaultCase(node);
	}
	public void caseAPlusUnaryExp(APlusUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseAPrimaryUnaryNotPlusMinusExp(APrimaryUnaryNotPlusMinusExp node)
	{
		defaultCase(node);
	}
	public void caseAQuestionConditionalExp(AQuestionConditionalExp node)
	{
		defaultCase(node);
	}
	public void caseARealType(ARealType node)
	{
		defaultCase(node);
	}
	public void caseARelEqExp(ARelEqExp node)
	{
		defaultCase(node);
	}
	public void caseAShiftRelExp(AShiftRelExp node)
	{
		defaultCase(node);
	}
	public void caseASignedRightShiftExp(ASignedRightShiftExp node)
	{
		defaultCase(node);
	}
	public void caseATest(ATest node)
	{
		defaultCase(node);
	}
	public void caseATestOperatorTest(ATestOperatorTest node)
	{
		defaultCase(node);
	}
	public void caseATimesMultExp(ATimesMultExp node)
	{
		defaultCase(node);
	}
	public void caseATimesOp(ATimesOp node)
	{
		defaultCase(node);
	}
	public void caseATokenSet(ATokenSet node)
	{
		defaultCase(node);
	}
	public void caseATokenSetTokenTokenSet(ATokenSetTokenTokenSet node)
	{
		defaultCase(node);
	}
	public void caseATokenTokenTokenSet(ATokenTokenTokenSet node)
	{
		defaultCase(node);
	}
	public void caseAUnaryExpMultExp(AUnaryExpMultExp node)
	{
		defaultCase(node);
	}
	public void caseAUnaryNotPlusMinusUnaryExp(AUnaryNotPlusMinusUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseAUnit(AUnit node)
	{
		defaultCase(node);
	}
	public void caseAUnsignedRightShiftExp(AUnsignedRightShiftExp node)
	{
		defaultCase(node);
	}
	public void caseAXorExclusiveOrExp(AXorExclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseAXorInclusiveOrExp(AXorInclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseEOF(EOF node)
	{
		defaultCase(node);
	}
	public void caseStart(Start node)
	{
		defaultCase(node);
	}
	public void caseTAbstract(TAbstract node)
	{
		defaultCase(node);
	}
	public void caseTAbstraction(TAbstraction node)
	{
		defaultCase(node);
	}
	public void caseTAbtract(TAbtract node)
	{
		defaultCase(node);
	}
	public void caseTAnd(TAnd node)
	{
		defaultCase(node);
	}
	public void caseTAny(TAny node)
	{
		defaultCase(node);
	}
	public void caseTBegin(TBegin node)
	{
		defaultCase(node);
	}
	public void caseTBitAnd(TBitAnd node)
	{
		defaultCase(node);
	}
	public void caseTBitComplement(TBitComplement node)
	{
		defaultCase(node);
	}
	public void caseTBitOr(TBitOr node)
	{
		defaultCase(node);
	}
	public void caseTBitXor(TBitXor node)
	{
		defaultCase(node);
	}
	public void caseTColon(TColon node)
	{
		defaultCase(node);
	}
	public void caseTComma(TComma node)
	{
		defaultCase(node);
	}
	public void caseTDecIntLiteral(TDecIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseTDecLongLiteral(TDecLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseTDefault(TDefault node)
	{
		defaultCase(node);
	}
	public void caseTDiv(TDiv node)
	{
		defaultCase(node);
	}
	public void caseTDocumentationComment(TDocumentationComment node)
	{
		defaultCase(node);
	}
	public void caseTDot(TDot node)
	{
		defaultCase(node);
	}
	public void caseTDoubleLiteral(TDoubleLiteral node)
	{
		defaultCase(node);
	}
	public void caseTEnd(TEnd node)
	{
		defaultCase(node);
	}
	public void caseTEndOfLineComment(TEndOfLineComment node)
	{
		defaultCase(node);
	}
	public void caseTEq(TEq node)
	{
		defaultCase(node);
	}
	public void caseTEqual(TEqual node)
	{
		defaultCase(node);
	}
	public void caseTExtends(TExtends node)
	{
		defaultCase(node);
	}
	public void caseTFloatLiteral(TFloatLiteral node)
	{
		defaultCase(node);
	}
	public void caseTGreater(TGreater node)
	{
		defaultCase(node);
	}
	public void caseTGreaterEqual(TGreaterEqual node)
	{
		defaultCase(node);
	}
	public void caseTHexIntLiteral(THexIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseTHexLongLiteral(THexLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseTId(TId node)
	{
		defaultCase(node);
	}
	public void caseTIntegral(TIntegral node)
	{
		defaultCase(node);
	}
	public void caseTLBrace(TLBrace node)
	{
		defaultCase(node);
	}
	public void caseTLess(TLess node)
	{
		defaultCase(node);
	}
	public void caseTLessEqual(TLessEqual node)
	{
		defaultCase(node);
	}
	public void caseTLParen(TLParen node)
	{
		defaultCase(node);
	}
	public void caseTMinus(TMinus node)
	{
		defaultCase(node);
	}
	public void caseTMod(TMod node)
	{
		defaultCase(node);
	}
	public void caseTNot(TNot node)
	{
		defaultCase(node);
	}
	public void caseTNotEqual(TNotEqual node)
	{
		defaultCase(node);
	}
	public void caseTOctIntLiteral(TOctIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseTOctLongLiteral(TOctLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseTOne2one(TOne2one node)
	{
		defaultCase(node);
	}
	public void caseTOperator(TOperator node)
	{
		defaultCase(node);
	}
	public void caseTOr(TOr node)
	{
		defaultCase(node);
	}
	public void caseTPlus(TPlus node)
	{
		defaultCase(node);
	}
	public void caseTQuestion(TQuestion node)
	{
		defaultCase(node);
	}
	public void caseTRBrace(TRBrace node)
	{
		defaultCase(node);
	}
	public void caseTReal(TReal node)
	{
		defaultCase(node);
	}
	public void caseTRightarrow(TRightarrow node)
	{
		defaultCase(node);
	}
	public void caseTRParen(TRParen node)
	{
		defaultCase(node);
	}
	public void caseTSemicolon(TSemicolon node)
	{
		defaultCase(node);
	}
	public void caseTShiftLeft(TShiftLeft node)
	{
		defaultCase(node);
	}
	public void caseTSignedShiftRight(TSignedShiftRight node)
	{
		defaultCase(node);
	}
	public void caseTTest(TTest node)
	{
		defaultCase(node);
	}
	public void caseTTimes(TTimes node)
	{
		defaultCase(node);
	}
	public void caseTTokens(TTokens node)
	{
		defaultCase(node);
	}
	public void caseTTraditionalComment(TTraditionalComment node)
	{
		defaultCase(node);
	}
	public void caseTUnsignedShiftRight(TUnsignedShiftRight node)
	{
		defaultCase(node);
	}
	public void caseTWhiteSpace(TWhiteSpace node)
	{
		defaultCase(node);
	}
	public void defaultCase(Node node)
	{
	}
	public Object getIn(Node node)
	{
		if(in == null)
		{
			return null;
		}

		return in.get(node);
	}
	public Object getOut(Node node)
	{
		if(out == null)
		{
			return null;
		}

		return out.get(node);
	}
	public void setIn(Node node, Object in)
	{
		if(this.in == null)
		{
			this.in = new Hashtable(1);
		}

		if(in != null)
		{
			this.in.put(node, in);
		}
		else
		{
			this.in.remove(node);
		}
	}
	public void setOut(Node node, Object out)
	{
		if(this.out == null)
		{
			this.out = new Hashtable(1);
		}

		if(out != null)
		{
			this.out.put(node, out);
		}
		else
		{
			this.out.remove(node);
		}
	}
}
