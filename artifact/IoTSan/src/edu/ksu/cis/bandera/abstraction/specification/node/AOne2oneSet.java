package edu.ksu.cis.bandera.abstraction.specification.node;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import java.util.*;
import edu.ksu.cis.bandera.abstraction.specification.analysis.*;

public final class AOne2oneSet extends POne2oneSet
{
	private TOne2one _one2one_;
	private TEq _eq_;
	private TLBrace _lBrace_;
	private PIdList _idList_;
	private TRBrace _rBrace_;
	private TSemicolon _semicolon_;

	public AOne2oneSet()
	{
	}
	public AOne2oneSet(
		TOne2one _one2one_,
		TEq _eq_,
		TLBrace _lBrace_,
		PIdList _idList_,
		TRBrace _rBrace_,
		TSemicolon _semicolon_)
	{
		setOne2one(_one2one_);

		setEq(_eq_);

		setLBrace(_lBrace_);

		setIdList(_idList_);

		setRBrace(_rBrace_);

		setSemicolon(_semicolon_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAOne2oneSet(this);
	}
	public Object clone()
	{
		return new AOne2oneSet(
			(TOne2one) cloneNode(_one2one_),
			(TEq) cloneNode(_eq_),
			(TLBrace) cloneNode(_lBrace_),
			(PIdList) cloneNode(_idList_),
			(TRBrace) cloneNode(_rBrace_),
			(TSemicolon) cloneNode(_semicolon_));
	}
	public TEq getEq()
	{
		return _eq_;
	}
	public PIdList getIdList()
	{
		return _idList_;
	}
	public TLBrace getLBrace()
	{
		return _lBrace_;
	}
	public TOne2one getOne2one()
	{
		return _one2one_;
	}
	public TRBrace getRBrace()
	{
		return _rBrace_;
	}
	public TSemicolon getSemicolon()
	{
		return _semicolon_;
	}
	void removeChild(Node child)
	{
		if(_one2one_ == child)
		{
			_one2one_ = null;
			return;
		}

		if(_eq_ == child)
		{
			_eq_ = null;
			return;
		}

		if(_lBrace_ == child)
		{
			_lBrace_ = null;
			return;
		}

		if(_idList_ == child)
		{
			_idList_ = null;
			return;
		}

		if(_rBrace_ == child)
		{
			_rBrace_ = null;
			return;
		}

		if(_semicolon_ == child)
		{
			_semicolon_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_one2one_ == oldChild)
		{
			setOne2one((TOne2one) newChild);
			return;
		}

		if(_eq_ == oldChild)
		{
			setEq((TEq) newChild);
			return;
		}

		if(_lBrace_ == oldChild)
		{
			setLBrace((TLBrace) newChild);
			return;
		}

		if(_idList_ == oldChild)
		{
			setIdList((PIdList) newChild);
			return;
		}

		if(_rBrace_ == oldChild)
		{
			setRBrace((TRBrace) newChild);
			return;
		}

		if(_semicolon_ == oldChild)
		{
			setSemicolon((TSemicolon) newChild);
			return;
		}

	}
	public void setEq(TEq node)
	{
		if(_eq_ != null)
		{
			_eq_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_eq_ = node;
	}
	public void setIdList(PIdList node)
	{
		if(_idList_ != null)
		{
			_idList_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_idList_ = node;
	}
	public void setLBrace(TLBrace node)
	{
		if(_lBrace_ != null)
		{
			_lBrace_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_lBrace_ = node;
	}
	public void setOne2one(TOne2one node)
	{
		if(_one2one_ != null)
		{
			_one2one_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_one2one_ = node;
	}
	public void setRBrace(TRBrace node)
	{
		if(_rBrace_ != null)
		{
			_rBrace_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_rBrace_ = node;
	}
	public void setSemicolon(TSemicolon node)
	{
		if(_semicolon_ != null)
		{
			_semicolon_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_semicolon_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_one2one_)
			+ toString(_eq_)
			+ toString(_lBrace_)
			+ toString(_idList_)
			+ toString(_rBrace_)
			+ toString(_semicolon_);
	}
}
