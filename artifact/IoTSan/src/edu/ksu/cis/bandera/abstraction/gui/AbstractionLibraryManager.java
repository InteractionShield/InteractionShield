package edu.ksu.cis.bandera.abstraction.gui;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 2000   Robby (robby@cis.ksu.edu)                    *
 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import edu.ksu.cis.bandera.bui.*;
import edu.ksu.cis.bandera.abstraction.*;
import edu.ksu.cis.bandera.abstraction.pvs.*;
import edu.ksu.cis.bandera.abstraction.util.*;
import edu.ksu.cis.bandera.abstraction.lib.integral.*;
import edu.ksu.cis.bandera.abstraction.specification.*;
import edu.ksu.cis.bandera.util.*;

@SuppressWarnings("serial")
public class AbstractionLibraryManager extends JDialog {
	private static final Object[] columnNames = new String[] {"Name", "Tokens", "Type"};
	@SuppressWarnings("rawtypes")
	private static TreeSet abstractions = new TreeSet();
	public static String abstractionPackage;
	public static String abstractionPath;
	private static String abstractionListPath;
	static {
		init();
	}
	private JPanel ivjJDialogContentPane = null;
	private JButton ivjAddToLibraryButton = null;
	private JScrollPane ivjBASLCodeScrollPane = null;
	private JTextArea ivjBASLCodeTextArea = null;
	private JLabel ivjBASLLabel = null;
	private JScrollPane ivjLibraryScrollPane = null;
	private JButton ivjNewButton = null;
	private JButton ivjOpenButton = null;
	private JButton ivjPVSButton = null;
	private JLabel ivjPVSLogoLabel = null;
	private JButton ivjRemoveButton = null;
	private JButton ivjSaveAsButton = null;
	private JTable ivjScrollPaneTable = null;
	private JButton ivjShowButton = null;
	private JLabel ivjAbstractionsLabel = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == AbstractionLibraryManager.this.getNewButton())
				connEtoM1(e);
			if (e.getSource() == AbstractionLibraryManager.this.getAddToLibraryButton())
				connEtoC1();
			if (e.getSource() == AbstractionLibraryManager.this.getPVSButton())
				connEtoC2();
			if (e.getSource() == AbstractionLibraryManager.this.getSaveAsButton())
				connEtoC3();
			if (e.getSource() == AbstractionLibraryManager.this.getOpenButton())
				connEtoC4();
			if (e.getSource() == AbstractionLibraryManager.this.getShowButton())
				connEtoC5();
			if (e.getSource() == AbstractionLibraryManager.this.getRemoveButton())
				connEtoC6();
		};
	};
/**
 * AbtractionLibraryManager constructor comment.
 */
public AbstractionLibraryManager() {
	super();
	initialize();
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Dialog
 */
public AbstractionLibraryManager(java.awt.Dialog owner) {
	super(owner);
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Dialog
 * @param title java.lang.String
 */
public AbstractionLibraryManager(java.awt.Dialog owner, String title) {
	super(owner, title);
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Dialog
 * @param title java.lang.String
 * @param modal boolean
 */
public AbstractionLibraryManager(java.awt.Dialog owner, String title, boolean modal) {
	super(owner, title, modal);
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Dialog
 * @param modal boolean
 */
public AbstractionLibraryManager(java.awt.Dialog owner, boolean modal) {
	super(owner, modal);
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Frame
 */
public AbstractionLibraryManager(java.awt.Frame owner) {
	super(owner);
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Frame
 * @param title java.lang.String
 */
public AbstractionLibraryManager(java.awt.Frame owner, String title) {
	super(owner, title);
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Frame
 * @param title java.lang.String
 * @param modal boolean
 */
public AbstractionLibraryManager(java.awt.Frame owner, String title, boolean modal) {
	super(owner, title, modal);
}
/**
 * AbtractionLibraryManager constructor comment.
 * @param owner java.awt.Frame
 * @param modal boolean
 */
public AbstractionLibraryManager(java.awt.Frame owner, boolean modal) {
	super(owner, modal);
}
/**
 * Comment
 */
public void addToLibraryButton_ActionEvents() {
	try {
		AbstractionGenerator ag = new AbstractionGenerator(new StringReader(getBASLCodeTextArea().getText()));
		String result = ag.generate(abstractionPackage);
		if (ag.getErrors().size() > 0) {
			StringBuffer buffer = new StringBuffer("Errors:\n");
			for (Iterator i = ag.getErrors().iterator(); i.hasNext();) {
				buffer.append("- " + i.next() + "\n");
			}
			if (ag.getWarnings().size() > 0) {
				buffer.append("Warnings:\n");
				for (Iterator i = ag.getWarnings().iterator(); i.hasNext();) {
					buffer.append("- " + i.next() + "\n");
				}
			}
			JOptionPane.showMessageDialog(this, buffer.toString(), "Cannnot generate abstraction", JOptionPane.ERROR_MESSAGE);
		} else {
			if (ag.getWarnings().size() > 0) {
				StringBuffer buffer = new StringBuffer();
				for (Iterator i = ag.getWarnings().iterator(); i.hasNext();) {
					buffer.append(i.next() + "\n");
				}
				JOptionPane.showMessageDialog(this, buffer.toString(), "Warnings", JOptionPane.INFORMATION_MESSAGE);
			}
			String filename = abstractionPath + File.separator + ag.getAbstractionType() + File.separator + ag.getAbstractionName();
			new File(filename + ".java").delete();
			new File(filename + ".class").delete();
			filename += ".java";
			PrintWriter pw = new PrintWriter(new FileWriter(filename));
			pw.write(result);
			pw.flush();
			pw.close();
			runJavac(System.getProperty("java.class.path"), filename);
			try {
				abstractions.add(AbstractionClassLoader.getClass(ag.getAbstractionFullyQualifiedName()).getName());
				updateAbstractionList();
			} catch (Exception e2) {
				e2.printStackTrace();
				JOptionPane.showMessageDialog(this, e2.getMessage(), "Abstraction installation failed", JOptionPane.ERROR_MESSAGE);
			}
		}
	} catch (Exception e) {
		e.printStackTrace();
		JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
	}
}
/**
 * connEtoC1:  (AddToLibraryButton.action. --> AbtractionLibraryManager.addToLibraryButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1() {
	try {
		// user code begin {1}
		// user code end
		this.addToLibraryButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (PVSButton.action. --> AbtractionLibraryManager.pVSButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2() {
	try {
		// user code begin {1}
		// user code end
		this.pVSButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (SaveAsButton.action. --> AbtractionLibraryManager.saveAsButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3() {
	try {
		// user code begin {1}
		// user code end
		this.saveAsButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (OpenButton.action. --> AbtractionLibraryManager.openButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4() {
	try {
		// user code begin {1}
		// user code end
		this.openButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC5:  (ShowButton.action. --> AbtractionLibraryManager.showButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5() {
	try {
		// user code begin {1}
		// user code end
		this.showButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC6:  (RemoveButton.action. --> AbtractionLibraryManager.removeButton_ActionEvents()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6() {
	try {
		// user code begin {1}
		// user code end
		this.removeButton_ActionEvents();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM1:  (NewButton.action.actionPerformed(java.awt.event.ActionEvent) --> BASLCodeTextArea.setText(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getBASLCodeTextArea().setText(new java.lang.String());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * 
 * @return java.util.Set
 */
public static java.util.Set getAbstractions() {
	Set set = new HashSet(abstractions);
	set.add(Signs.class.getName());
	set.add(Point.class.getName());
	set.add(Set0.class.getName());
	set.add(Range01.class.getName());
	set.add(Range02.class.getName());
	set.add(Range03.class.getName());
	set.add(Range04.class.getName());
	set.add(edu.ksu.cis.bandera.abstraction.lib.real.Signs.class.getName());
	set.add(edu.ksu.cis.bandera.abstraction.lib.real.Point.class.getName());
	return set;
}
/**
 * Return the AbstractionsLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getAbstractionsLabel() {
	if (ivjAbstractionsLabel == null) {
		try {
			ivjAbstractionsLabel = new javax.swing.JLabel();
			ivjAbstractionsLabel.setName("AbstractionsLabel");
			ivjAbstractionsLabel.setText("Abstractions:");
			ivjAbstractionsLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAbstractionsLabel;
}
/**
 * Return the JButton2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAddToLibraryButton() {
	if (ivjAddToLibraryButton == null) {
		try {
			ivjAddToLibraryButton = new javax.swing.JButton();
			ivjAddToLibraryButton.setName("AddToLibraryButton");
			ivjAddToLibraryButton.setMnemonic('a');
			ivjAddToLibraryButton.setText("Add");
			ivjAddToLibraryButton.setBackground(new java.awt.Color(204,204,255));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAddToLibraryButton;
}
/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getBASLCodeScrollPane() {
	if (ivjBASLCodeScrollPane == null) {
		try {
			ivjBASLCodeScrollPane = new javax.swing.JScrollPane();
			ivjBASLCodeScrollPane.setName("BASLCodeScrollPane");
			ivjBASLCodeScrollPane.setBorder(BorderFactory.createLoweredBevelBorder());
			getBASLCodeScrollPane().setViewportView(getBASLCodeTextArea());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBASLCodeScrollPane;
}
/**
 * Return the JTextArea1 property value.
 * @return javax.swing.JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextArea getBASLCodeTextArea() {
	if (ivjBASLCodeTextArea == null) {
		try {
			ivjBASLCodeTextArea = new javax.swing.JTextArea();
			ivjBASLCodeTextArea.setName("BASLCodeTextArea");
			ivjBASLCodeTextArea.setFont(new java.awt.Font("monospaced", 0, 12));
			ivjBASLCodeTextArea.setBounds(0, 0, 157, 117);
			ivjBASLCodeTextArea.setFocusAccelerator('b');
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBASLCodeTextArea;
}
/**
 * Return the BASLLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getBASLLabel() {
	if (ivjBASLLabel == null) {
		try {
			ivjBASLLabel = new javax.swing.JLabel();
			ivjBASLLabel.setName("BASLLabel");
			ivjBASLLabel.setDisplayedMnemonic('b');
			ivjBASLLabel.setText("BASL Code:");
			ivjBASLLabel.setForeground(java.awt.Color.black);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBASLLabel;
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G0ED1CCA9GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E14DFD8DD81457153F5D1A46BCEB3BA60B8DE9CCEA3A7CD33B65E9CD7F26F59336359B730FE9ED57D4B6A58DCDCC0311CDB0A55134A4A11B4B57004817020802BAA0A2888E9F62C791A38898B0888808E0686A403C4048B0B34E3C23181A66FF6E3D6F39734E4CBBFCE41B67D91E67784E7B3B771CFB6E3D671EFB6E470CA4E75F622438789CC262120872F7BC0E106689C2CE365D5D00D874AF74C47DD788
	340D84F6A75217DF6A49E0DDA149A27135A9701A836FE3C78A49CE781CCD12EBDBA58AEA172307347716DFFAF66AF236A6E1B9496C7DE1C39ABCB30072G2B871A8714C5FEEC48D3702B701E21FC269497CFC87D3F53BCDB4A72D478EAA5DF96249583D52D21F91EB394A869F381DB849485C456703CF9705C42343B5EF9C2499712321018EA666A52E9D9AA79C8138A6FA265C9C8050EB6C48209B69F03E7FD577868871249E598F73A8C43E627E148E8B5C98E23E148E52E2BEB9C129D46E159EC33361B079CC6
	472D73C62BF1D4F29012768C553737AC0549A2A4946487B2ECF599ED23AE78BC86B46799547975737558C69B3FC574AFFC552F4E614FA83A7E4A2DF37B870F24AE7D95159FDF192670B5407BA4902F4F3E1BCDD35547B864443A98C6F95D1CFEAA476BF62E926B3679D7D8B7FB91AD3BE22D1EB4838D2EC57C78FE0A4B70BE9FA8E8AD5679F727314E163107C9C465BD3ACCBFF58ED94B6B9A3156DD67658FF7A66FE2F6F72F0E5A0EBE944A856A873A8D3488A884A81F59FBF752A1F8C20FB559A6A6EC56C63B7D
	0C4564B8EFB3C996784C7AD2413A25E11B43C4941B9EA82B505087A9B4D46F03713ADDA2E8030171771349FD8FB03B722EDB7308C3972948088DF5576D6AFF50F68BBAC45B2DGBED33EBD54B6987EB84303D4B86F7BDFB15B226F1110967AAC36F3C0A96A12F64F5DE45168273AE48DDD3A1E3ACF376257DC0730DF3BF561EDFCBD0536F1E2181E6801CEGF58159019604E19BAFCABAB2DD9B37D9E549E1B5DAFADCC3F623C3BE63B2DB407E1436CE291C2A2D350873654E1A0F374B12A36ABE0AF96CCB1A6DE2
	8F792AAEB80C37474AB0F73B7032BB7D169D9166EB9B99228FA358D8098963FD18A07057991E721C9B67FDFB036174BD8F52EE83A936404656BAA5FF261073F306277C460DF3B92798CE5F2BA0AD980877EFE6AA752D254F4398829A841201820016822DFC9E7BF8C3D2658C47D1172AFFB96FE2DDAEBC25C9F0ACEDD627EC348ECBFDC60759B8E4111CC449739D562EC39EFC5FE363FB984A78D032023722CE89249BA7A4B0A6A74F73A35DB61A47A13154DE73048485CC58894A7D09AE9B1E9623D33EE8B799E5
	491D0327BF2523B6F143588792C1GFC4E89E7BE0D79708828BF8947362A5FCA31FEF83707E33B1CC95E8E4F0F4038A5CBDDDD3319F9CE701AE8237FFC085A5ADC489F85547FDBE8D7202C97744482348A2874C5BDD98214338E64822D812AF889665017449C510F769A337EFE326A07FF5534D7CA11AFA9F67ABBEFFB7DA953239470D620B120F9C0CB00D681C582253C8C3AG35820D814D83DA82346AE51C67434A56294A1A7712271D533A51A72DA72D073FB1C86B4A66F8258D347250761A6918DE23AA2B42
	CB27253F5516036D1E2321A72FEB76A1F5DD77E86421CF6A5BF7CE21DB36725C8A146EA7CF428C6BC9E9176AF33ED75A96BFBC192CBE046C70A38FECB40D7A06C868674488083BA25036BFCD5693B6664F981D920E72CE878CD0496436F41E771394DA0EF4C3324A4D12DD026842AABB95B9DFCA213AA963FF44C6F0EC5E49F0BA9FB441GF58A7C2BA95BB88EB2545E84539732F423ACBB4CC3AED96A11E459EC9DF573BF40F4F1FACCB5CE252E4169342E75D047DEA01328EB49965AD7B80E5BED36F1173D17FA
	A8459F0C3038E79272AF08407170EA910D031709774D6C5D1DFE3B28FF067DCAE54C5486BC6DF4610C4B180D1DF91671537DF40E40F9A9C94137286C1A67FB06658B033A1075B03E003A00A60196832DDA0F6D52345FBE0D3C596AB9733A8C31327D151B7985154DEDECD72A7FB122CF559EA3A5295AE324A2F56AB1D01B2AB586F85A49D4DAF75BCD2BEACCB52452F9EC58E635CAECE08B96E59D71FAAF2D0759EA16AF19CD23125CE37E84560AF92F5031F1A71BAB2321FF93DF41B96B66FE1C33CCFDDFA7D51F
	DAB56360855B6E558D3E42ED5F2EBC691C45F5EA5CCA472AE411A620211AECAE2B4C718F59BC2C604E8406FD306FB2BC75259D524DB3AED936D9AB14D58DFFF4C90E911BE3C2B215DEB35E00E54FCD59407A41504812DB6867B27D61439F684FB47634B7C148518BFD5188E1C5058C9F4A2A384DC03CD1745F2C1CC6132957262C10BC8BE4D27CAD91AB0CBEFCD7D4AAB8CB4B7A4A2A312C3BAC6D2C2C2E3E1E5994E1476CBE12EB385CE7F33B195C9E638D2951B99B51CE95070F74A328F7451FBB187CCE307159
	C837097CBE32EBD1F65391AE3BE74CF6F3D61A0B7CBE320F226CD5753CDD3A25895B8DE9B6529DAA8E9F7947D07ED3D50EAF48C61D12CCBF1736B3CE0B51BAEA68814FE09DBD89658B5BDD5BFBE5E6366BE78BE0E6462B58586479A9ED57DF91D398AF41FA988F76CCE73F7E44CFE340DC7E710FBA2736DFFF5227B4E045CF59BA2736DF3F1ACFE540DC76F714F61942FE7DC91F4600F96C74E28675478B40CF8781053C02315393DBE9BA46CECA0058E433D878D482E9B99B68BC717E219C156F8FFD056F95E608
	7472F2F57A60861E3E841EBCBDD8B3BDC4249F2E50CADFA3523F27199EA152AB8FEB25470874251A69E91118DEED183AFEFFB6E8716B857F8B1A6935A27DCA25D6FA2BC8DF2719BEA8520DD5DA69F6117EBB4D743911584FCB5332E8CCA1DDF7C93004274171C752ADDC0727ED77CA6BB3DADC6E757DCF52E80CE5D145559C7FC13A769C3FBC1D465263C2FEC83A0E50F5BA1749E31225C6AA536EB0CF00A553050232277CE925FACFB99074277B4FAB60999A097B22670BE99EFF8EBD78BF291C14E25CF70E823E
	C4400A01CCC0F37F13772B7CAA5B5B9579E2A89FE0D52F72B21BDFD5673B63G66DB816FE12AFCB19E797ED40279742F694909575C797ADFD3675BA8724D81BCD015EF39C73E078EE23EF50047287265C52973DDAC45FC8D0077C73973CDAA7996C751FC8F0A7D6DCA01BD4A305FC3C07DF4A26E331D4FD26F478FBE73D54D9810D204A2BFA64A9D83F21F1313C56566ED047544C63443E3996A35DA2353E99BB6336D9FA5FDFD06BABE64582B9929709CB1BB1CF29B845E13E8175199D4D73ABF24400AFDF4FD28
	352759E2B24BB687AE051BEEB29F59A40266BE33F4D3297BB7EA547B7A37876D3A2DFE6ADE3F1157F9F0233B6EA7BEF8A4156B715D72D3B3552357C6E302D698E2DE9A613944D0B9765BA2A80BE3AF8BACD4E0268A4452DEC7EC3D401A85B6F298315B825BA030E5828BB0A096A5309D629C21787708FDDDE003825BD905D80040828536DAE03B2A91CB0C46B15EFD1D5A90BB7B20F1512441F993C2223A3AF34DE62345B6AA5AE583AB1776DBFDB41EDDFC23061DDD407BFC20A0A03E0FDADD1C2658C888E01B23
	51F7BED527761D95EF68C9AF50A4901F1B830BE97CB27BF88F670E5A86357C79A0F799D0589BD8572FF595B07F6BBF8ED44EDEF29B9499414D8F10B50FFEC3736CA56B057BF4D1EFA8F3571BEE3BECDF7BFA5CD5A05E96EF09369804BC81EF0AF97612D6DB2CFE935BE270C0323BAD947D1F7B2808E253861868DBC8173A9E7D073E2CD90F55665B3AF50A7EA91B5C75188FF5D8AC6A713D83D80FDE48B3FF9356639E4DFA2C5C04EDDEF80A5A175F0815605E7BD0894A8F835E2C4DA83F2DDECBFE6BE614EF5331
	BE1DA2E46572F38F0AFEG5EGA17F23131A7DA06467105D70749F34227EBF93725781EF5EDBA81F64EB496FFA8B656FCF22727D872EA87F2F25A85F843C0B047CB6CD7DC3057C1D8534FD268ADD15B3399A0FF9683D6F7A1D07A25F62B6927B1677BC543A1D4DC3FF50130ABF60BCB41EC977E0F09E6A860F8B834EC20F57157D1EACEA6F9043A86FFB32E839AC06A13877FAC7B62DE383489C8412016683850BB2023226BDDBEB191C62ECED34FCB6E7E42B7F00FBF4113362DBA7784C9533615BAC78DE1D95DF
	4A9F11EF7C70EC788A84DF542C782A845FFD065970B58B3E5D33BA2B6C97FC774F0A4FA2788A2AE643B7C770BDB0AB3EG413737FAB6FCCB5C7D406A9772C73DE63EB58A9E21BCE37E08671F99C7284FC80B71BEC74DE3F8C10C77B96A629ABCC72D003485B1D87E71E2EF3DB747F86A12753667BB67EB7161B3F83D57FA71F11F155963A7A6618E0C603D184EA36AB5CC7B5B7C5C418E4F39EFE34C73DFF59837ACFA9BFD62AFBE4D57160FFBC50A7C6CF8357C503739EFA56F006FFD87650FB724A8752DF8874F
	C01F4F21BE57846FF300820116810581ED864AFB977D561BD9A749F4FE0B872D5CE5B7F96FBCAB6D7C6E676C1FAD87266B1F936FFA72A9F16EA5EC532EF7314E5D39344E7360BD88A884A88CA896A8AF96564831D86726EDDA313AD61DFD83F577999757FF190F7EB32B773FCDDB6F41D82DFABFAD6AAD47625898AB79FCBA5C70617356A1D8D307B9752843CA21C341414F2743A19FBEEF9DE2B5F5783B1328C34EFB28431A4F29438B536A507E1E168E4773D1871350E1EE696753619E9FBEEF9D96E96AB0C734
	433277F09C5C3313E2D1709E7B9E5A7C62ED745C8CE320AE1B59AA930CFF4EEF27FBB6B607F954ECC52C1BE143B687BBFCD24EFB337D1F0B85E4EB1F0BFDA3DB7BDCECF17654E747CB327D1D1B71F35E3F3275F05AFF69C9A990475E97D83D4066D4A056A530384308198476F7821B94D80281317982DBAA3045822B2EC4EC1940FEA030D582BBD205D838401689ACDAE0C72B91CBFCDF6842726541FB3D40AEB32C8B5E4784769C631D8F6F0B85D6D4C331E5703E6AFD34531CA3F45FAED43C6FE56FF4EED16E0A
	564C743CFA26C44B7234791F7C4D4BD01F1D6FE16FCF67E6B2BBF3BAA5A7F36A4DC6592824ED10F7900D33548E6304C4708C43DA3CC54953A25B4ED7930C8FB6317B309A73F71791C6989F1B27EAF1ECEEFE9F77AB7E52476EE012C2528CB488445BA26124777817A1ED9E50A22025C05EF565FA0C366C515623E758E133D828B642D7FC941F22702D84F9DC1F4FCED3FDE261BDA72E10D44421BE768635BE4DF11E6577433B458BD37674F27C7B08289CED9F71E68E75CDCE1B4BB1ACF97B0137F372C41AFB96EE
	1325895ACDBCCF7C8E4AAF9B9D23120F9F5932A3CF2479635F3E431F2F61B6D0F3C0E583CD5542FEDF3D645DE7F320CD820016G0544797699AFEFB057FF9B8D67EA3711B957FF9B59F327EF23DB397E5BE8CE6E74EDF4D76E54ED741AC79B5508B67A25CF9B2D01F609G0A81CA0B77EDA3AE6F1BA5EAF9C7043CBB6A3D6569C1C6ADD0AB5020DFF9BD875572EA053CBBFD461D9DE44C858A848A76ABAF39D4AD6F2810D71F6FADEF854888850A840A75AB6FF18FF9475C757551AFAB211094831DGEACF70E7E3
	776E246B2AC971FEBFFB3FC550EFC80D99224FDB2CA6A5A060E7848B59BCFA9EB22E0DC7AC174D2387G3345A1F6AF430EGF6C4E0F9EC9EAD87EC93C16CBE06158156140058EEB60FD683F617401EE258954AAB4AEDE573E88B4DA74AF81AE11DD41E404E313970C340628476F3061D824CA84AE82FC6F98FA4E05B6F2E227300C99AB13AAC9026581CD227DD39468AF8E0827D0E4651AA741DD7611D3761A3B769D9410843B881C32147AE8D93FBA24DFB3D8A57EC6110B71A7283DE855485444B0C26D5A793B6
	1351A24AC82E413D7165A25F1FEAE8BE59AC337D2AD509741B9DBF23AEDFC98F515373BCE5279C862F4C62A96A74397D1C29D55BCFDAD2A151A7F11B2905E7EB122F7D70757949CBF4DE9804F4EAB73B845E4570C0954E576DDFE2739AFD8F0534453AC2A576584D62D3CBF2A119130C58FFB3ACG5E0384769306AD0577D5827B2699631B70E41C173A62557529C871543FA145DFFDB631F92EB72550EB9F62BD061BD4B82F4F9D27F19FC2063430945469CE36562E5F82E3EF8BE20E8654732A409EE82458DCF8
	DFAC3038FEEC0BE582EB694736D8A530077B31ADC285F6208D4B089498DF83D3F9A7D2918B98C0F96D82FBFBG65758B6C72G4A3388ECD1BD4A8B91583AFA1437C6E00D27D0DE38402E38D0DE34409E94FD5F309531F7C45F778A6C63FA14F7D5E04BE414A78B2CA79F652D94583D79A8AFCCE0B179A8AFC2E0B689654588EC11502FB5CD54D768B7A830C6215F1840AE087A5ECE43315A4E7664D4E118611259EA325D04E1C9EF534BCEC3F3DBCFD7E7CF4B154E0EABCD6D70016FFB3FC4547B5EA4A4486F3E77
	6AB4EE5F6B14E7CC767AA49E5B5D4B7C936549CB87BF13CE7D497EEA753EBC557151843E2E646997BD52697C3E1F28536F74C8273A36A42A537F45A31D6ADC267073FA15FF0CE72B3D473ECDCA3F7C095F6FCC8526737A04A84F200C75C901F3AB93F83B6E2D21EB93596112385C4A936A76DA36673AAE4E0F5C4D0ABC1221BCC9050E775FG0B4DEB81EF4D40BE8DBB4A6C815E67886C52F16C7BA0013575E15FAF4FC03F54F8298A1E61703E19664B041884289D4884F49BA8GA898E8A5D0B8D0ECA67276B1DE
	FA4F005EC920670585D9056CBE81BD5B277785681D06FA40681D00C1F84E49C25EBB7BD6E8545B1B42B35CFE116AC21FABB3BDFDE50E729E2C680CF80072F9F3062FEF1DAD552A64367B3443E3B32A0BFA0D0777003D6F4C633DFFFA7FC0FDCFF91B4AD67F27F5D15F6327F1G7DFE41AE0273F2AC734D93D6E942E6B58F73793D0979165F82AD4EC21F715D81E65B907073395D350F8899566374AE4410F1F8FC54E1F3D9CD98A7C4723992E404GD5ED23588F4D4D0AAE11D95AB1261AE2A1CF96706DD05A22F8
	9B1F7FA8F19B9F0D4771B1398D6D7E7F46235D4F5B06FD7676E92AFF18F8CFE8206F746E8DFF7F7B535EEBFC1A77FF5A766AFE5EC602FC4A78BCF768273237EC72A02B578884D83C8F1631B9FFB35405ECAFD4623E3B9AB06E2B852C95E88CE89E50126D585F4B9A33181CE11733F1F8D83250B8536660B2FF41E206A701D6C1FE0E9DE2314093345DG63B6F2DECFED04277FBBCB0F04344D5B51966A5B509674595A3610293285EA871476A936D01B6D3685DEC6B6ABE3BDD0C3B66AF020502DC351E5E69710B6
	180DBADC9FC09D667951E10B068EE80F0BFCF4F8124D419B0016889DAA0B5CBADCE3B149F2C8DBA9F43861C29D227D6810BC058E09B95EBABC45465D0BB4EF8E6A103C5F2D43DC26239E52AAF2D0071F4B28C3FF0E368EC9D368E0715161B60BED1E811A94BA3C2852213000264F0334G2143D7A454E1059F9D322750A154C707A7D9BBBC8F34CE687023E2D5DF30F6080634D8214318680B529D5ABA6C1CC2077A9DEE9D789E3769GAD2395F09390DF63E66EAD07E71F711A6F6DABG3B9CB6D8554937B84AEE
	BDAA7E631DD91D25226F073E6F4578A6607B7710FE4BF53FF74766AAF58ED21ED5E4FDD206284BAFCB285F880534E8201CDC309F2086207EDC2CDB5FDE2AA3BD1982759BE559B8BC46EE4D6101953DC0660669E2144BFE63A055D4797E6F5E837E5A87A41C033835F3681AB4AC779AC705DD58EB69B940104D41B60CA2F2D9DCD80BFE4E826FF30116832D866A957728FEFF1472D90C37ECAE9979F447102FE2E7A1E98632G4D594979386DFC0545DB010085812D59C9312BFDF99AED6AE93F23FFE6E701F847C7
	601339F4FD6CFB13DEFCCF6198CD470B7A6ACDD31E5E477A1A26379B07A40B10DB54CD57076A1B6D9C7FE98E4555B73BB97EE49D1D4B5DB755D14E9B9729FC71CD83A15F5515466B53EE9B353122B9FE2F054AF15FCA97FB9899B436D12A6831774B53DFBE350D590F38D86E447A70BBBC6FB42AE3793CBC5EA7757064694F16E825F741131FD3BF3EDB6B1C5A846913C2C62BC5CB4602BC1C9BAF1F244F0356030ACFA920BF8920248518697CE415EE6A45A53CA61B4566A82D292A2DE0F474E8995E93B463DECD
	D09E1F5728FFCBA16EBFAD0C173919154947F7019347F75407779153EF676B767B995F61F9FCDCD76CF22FB3825BA36382F7D17BDD904FE222DD688BFF960F3EB0FC172FAF44FD881C2723A1CF62EE6E8B59774BF73BFDA1EF1B3201AC158D638582DE1FED556EB6149ACA3C5B70AC84B425C590235A1CF66330E4AA2A50D7D5682BEB4A704C607B8D5816453BF1DD392141FBDD799AD12F8BF7B5FA2FAB63BC52BFEA74DED71E0CD327FF5A683D2EC4FEDE0F08C6E6A7C387157746FE76EEC43BB9D7632E736E36
	195B4DC49B56F5F0B74EEBC5C75C328E71F29CD8CEFE2DBB2DF3E06665FCEBG4B899065ECD2498A2FE765B8311C28236E34DE574C4B79368B4BD9AD4AD9F94CAD6B85BE5EECD84E3F9EF727FDC71EF9B931B21613180F65ACBC6116750F792C1CB1AC67EBFFF2271924191773A3894B2997650C54295A0D57E7824B39F2521DF6F6966DF61FE8B7D914F31C3A82BC0BB9C06DD21C0570D0824FE28ED05B255F3FB49BAD66CF58A6B23F5A4B676364D3B4BD184A850A82A285609F8BF01E5FFC00863574D79AFC67
	7896532804FBC9D85E2FCB7C1FA53DD0B27D6FB9ECA8E1EBCC9B4CA593D4BE629BCBE8ECA45B6C8CD44E6958190C43BCBAA6732C8A9ED34276CD249186737D536F57627EE99554ED2CG774C1374B48671BE2FB470G232E2EC59E9E13CCE714F0C3690FBF56625E566282BC37BCF0144A8F0377E82014BD050A4F7EA481FDF6EC59BF910B6E6B1AFBCE850F4F556977F05F5B3C476D33EFBF5C194C75B79C435F691983694B77207E55D78B547AD3C32A2B7B50E1B61DB10E3633E8076BFC63986A9C3D87F58EE2
	B2CB77C2EC87543F97ED6B318F5CF67AC15FCC6C1457751747547393555F5F7E1AFDAF2FE340DEF7DD5137A610CDA3FE4E32D908406BD3FD864F32C3C18647528FA216368F31CD3B71AEDA73BE2C7732B1DA6F5B709EG94AC72FEE6413CAB77617EC114D99D0B47821E251FFA3F000F2BCD27691CDA8CF99B00CCC0370196GAD818A81DA839481948B14D3D8C8CA016A013A002E8249C0738AF19C7E291C6EE57ADBCBA89D4E862343486F52707EFBB83E941E5C004FC224E5F35CB230DFBD115AEDB769776D4E
	40D835707452B25E0F730E2877B3A35ABE55A5786947C5054A9EDD21777E6F3B62ECBF3CD0AB6609BE2D05F17B7B280B90F11F4D635CBF27885A29E86A7667FC0EB6B5DFBD70F44D086F5B83EABE9370CC4E08AF5825661B8FBC0BE744976741378CF8D64D08AFC4D2730583CF740C789E74A8AFF1FFA1495BBFB51F3216BD655F2F671E1A5E2F6FE37BA19278635EDBF6658C3F78943B67B5B26214447CD1F6AACBE0ED4EAE1B53CCE7AC2E7B2335532D0BAB3C6A42791E1816EF2FE6DB45CE4B67CD7C8C6FBEB6
	97346EF747459C7F9643FBD5B8776D65C75137DF053415C05C0798AED0BFD8DA8CEBD320C1A099A8GE8E9B17A059F1F22FB75D35E9D6D35595B69A0D7DDEB63752BBD7679FEBF6B4C67647B4B2C79143B5947E97B2CAC76EE4FC2062FA976EE4FFF96F3E5B824B59C40761C57CD5BB3885ED7GC5G4582E51500CFA941760CBBCD83ECFFFE365BE6E3275974E09B5C2C64D0F9DC45E61ABD7CCE893747AE65E90267E409160DEEE7F7BE67ABE90B1567B265392A44F70CF23E185DD8DEB86409764A17F8505F79
	F3291936D15EC16F73679A06179E74BEFFFEEC8C632793103668A04E0FF3ADDAFD8A1399FB66403334546BDC075F9F3C464E2DCB8BD5FB7CA98C6BD5B05E9F498D7E7D4EBD9D537B1D7BBB34634907BAFC634907BB346349608EF5BC4931C7BA685CB68A73EE3F4877C3018D886CF1A613E2174CA6F9CC60BFE5FAD13CD52285A27E94536BA6437A95EC358A9BD030E7BA286F04AA0F5944FD58E7BB58190059E2616F3FE1F94CD6F02522BDDEE4BA1A6DC6155E918223FA7331725D9EAA4BDE0A634259D9B44538
	E0FBD5ECD501F6C99254F6B197648416CEBD4FF09B78F9835A85DD03F3ECCD835A45EBA25FDDED3E767335B6357DF06C47833E791E98704D77044BB75FAA17EF3EBC0DFCFBB4722D15FC7305C93E799E5510771807BCFEB7F4C5F6BA6BCB0B19FA9F764BF64287FC132D477967A52A4F55C77F5677D9FD7D4F39AF348CEEFB47AF7877819FDC503E1F58FCC17B1E77398BD37F7ED177857F3FFFB4F0C17D7BC74ABD65636E76BE287A3C7458975F76CFFF21E570BA5F5D6D3F6D833B27773F8FF5EB7B5FEFF77B7A
	5F60EEED7F7B03EE357F65E3A43B05E241B0C6D6170ABBBFADF8D7E61D40D6346099F114409CECFF283E2C107416A1D646560EE370BEA930D29D1EB94F97182C43B29689EC238E4BD8A230CCF6AE96836F8507909BE3D8953C778B6C5F72453D27C3B8279A4C5477060877936CBDCC3C2F98D377BB4D7737372D67BC4A78DB1EDFD362F53F5F02ED99AB5AA356026D11D20ED8E29176D7FFB96EFB9859F72315FDADB635F23CE0B25D0D63542A585177FB68FC68D466A9AEFBE7022F7FADC8D07BDFE52F35057A8D
	1359E93798EFC926734AC58A02E70C4DADF8D6EEA947FD147F57CBE8FF33BD76DF37609E7B6DF26DBDF6CAF8763AG7284153B77581717FB6F315FA5335F2530B9A44F3B988FB15BDE8979571463B9C643C1EABF66E11B156769E3369E8D6931C07CCC60020E1D89D4206E8FDEF46B1E180C3A87D6E81F15EEA55A6777D45F608AEF5DCB7269596A8D49A11B070D96FEB8F446686832D94C433714FAB432F1F118563D826B71D9BE0DCDA060B1FFC263EF9FCEEC037B996FE9BA7EAA700C6339FC2C4309435A6D0F
	E74E548735C31E2B075D6DAF9F762E4360956A975D87DB7C37E9785913592CBEFB1A833C740ED490BC179F46763D5167EE5F6C8954ED0D9F5D3629ECA38272449CF61FC527993C4F438F97218D6499306DBEEE41B38A3EBF13F29677E7CE98E63ABF03E7D29D175C1FBF26EEC2A923127DAE0167BE21E148E29C9E67F9DF9AF0674D508D92773EA2EE3B36CD98C725B6B054D2FA751FCE5C25E5867858AD71EF931496D5CAA6D7653853D5B9ECF6D6AA3FC6DEB964B2D71AA92B33322B2F47B0EA9EA9AAABD34EE1
	F57440D9EB7F2B5BE8F6FAEDFFA9EDF3B4995B46EE407E7A174BEE5D7B732B09673DCA5537DB8CFDAD5D3DEDCD0D6DD7FA1A3ABB5B5B4FB4F6DFE9EC3F54B850A378FF10DFB385FFEBE7F75B654E0EDE8F899DADA096771FD38BD03FA5B36EBB5CDB3B7BE3A2EC695ADF7C6C33B2E366E5BDE446BD51F5865CBFDDB84E560E15B03600DAABF17F34F982753ADAB9DB1BFAFD505D3EFDC57E6C084FCD69E755EB0BC0A8AB38F2A6FBDFF549EA3E954093BAA33E0505EA3EC860091D915F43EC6FB82BCABBEF3197FE
	825E799AFC0B0536EFFB1577FE47F60677D7F96FF75CBF0E7B9DA6C8DBD505F1C25B04475D746AC252D0BD13B5D871D95FB9316C2C6F5A65C232EF3E3EE45FFC41053E799EA9744D772F4C56FAC1C7FBB54E7DB957B09E18AB30236394DB826FEB2A312E19746A0072B9CF75792171AFBE8EFF6C8BAD0357796A04EF9BCA933EF1CA28197298DD328DFC267993096E84623C30D15CC3082846BB026557F02EAA2EA9A4A7007A01A60182EB44BD72715D0A4CA666B9E1C03AA62C4E338E5B845BE8C479E32CDFD83C
	A2F8932F7978CA66DD8C0D97FBBB2FF4377434DDEE3952F371CCCF4B050BAD9D3DD71ABA5BAF1E6F203E127B148B57705CEAD58D1E77FFF64D7B3C7FEE0F737AC72ECDFD5E7F72B56F73FECF7E9D63D31F77FFB60E773F157B5257E63B2F497FCF1587BAB7C0C09A3C11A449A4DFF595C62FDC1B51AB3FAAA713048E69A67C5BE8B249A4395BE55543B4A713D4FA5DC7EFF49A8C8619A4523BBC7020D7F1E42263B7FE1C8E126169C7637E4F4EAFE77D4391D7BC511DA53A912345BEE6ECA3C96C47E55AC97C3093
	D4E13F82D589AC1543142512B176507B98A7BFA6DBC69C23C3AC3BCC62BFBE7BB188E1EF5749DFC9EABBC91547586EA82C8AE53253AD290B6E11AA89A7A769EFA91377D72FFE5F8EFF20E426D0320D6DD62D3BF124AE6165FFCA08A709EDC447D70FEDA411AE81C1D936C2ECA38930FA641260AFD521A410166EF11D6449070E3E327A05BEE782513511DD7446EC0F64E007611209FE79D679857F33E40B1DFE690C7EC0B19465E40FA427FC4B826D12B352CDFF2150A9CB26C65CBA00165A416B67124D164AD623
	F3CC2616FD321DA4DA697FB5C03673E47AF3DA154A4FE9B1FD639A9B184E54EB9350B71B69CB259804146C47B38F941E0BD81EC0624F12D40B4DE86251CB9B59A20FB9A467184DE21A341F6602D2EE52C14202F09017AF2ACFABEBE077EFD0697149876627C7261F0DA7E452C1AAD9CE5AA586114354B4E624F6A8B95AE4FE9938D824FDE92FDC720B8FF78E4613B82512345737CD5AE5EACA93E64BADB04A7362720E13266E10C1E307516A243FD9865A693D3443A4D108619F1F2EDA781DF7AE33C25C2CB25967
	3626D149B6D159B8B2E206409BB3C05B0278BDC2BC4DE3704A33FD726E9D677E637DA13005E612B0D1D5457E2DE67F5650FF2B99D24D106A9AE860E8B2651FF77AA45619991030EC760BEAE72197655FECFC7ADB4F57C7C7C16D4EAA438EBAA24B1D2B43B5B1A4B93E923CF04F5600F5FFCF7B49CE4DE5124A5D454527F80C9E0A24FB0D02549966CB7ADF18AFF51672689FB850D4FA5FCCCF37C66BE47AE575F4755D423AE9DB89C871C57B0741EE4CC39386570D8903F1C8B6C8A633EC205FBCB609654965A72E
	AE9FFBFAC7D1BCC9EAA3DBC74C1245544396A86DA40B3DB5CB4EE10759CE8BE7C3241DECE3B8AEE4BAF06C3413EC957BD933C5323A13B2D4C9973B5BE512410700D512AB61DD71A6B229B698864F703550A02C0F86E1FDB4886B23C1E5FDB4886B23C13EBE9AD456C7B2B9B8431594D5255E335571AF53274F0868B31F36D66E080434286F9694645C61773BE50B6B14B330BA779D91FEB6718FBDEC7F82703413F8BE71E2B75DAB70F71738E742E83148C64BF82355C46F951F39A5CB6EBD5F009EAA5F09F914C4
	657C28076AFDCD45737F81D0CB87884D019C7B19A4GGECEDGGD0CB818294G94G88G88G0ED1CCA94D019C7B19A4GGECEDGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG53A4GGGG
**end of data**/
}
/**
 * Return the JDialogContentPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJDialogContentPane() {
	if (ivjJDialogContentPane == null) {
		try {
			ivjJDialogContentPane = new javax.swing.JPanel();
			ivjJDialogContentPane.setName("JDialogContentPane");
			ivjJDialogContentPane.setBorder(new javax.swing.border.EtchedBorder());
			ivjJDialogContentPane.setLayout(new java.awt.GridBagLayout());
			ivjJDialogContentPane.setBackground(new java.awt.Color(204,204,255));

			java.awt.GridBagConstraints constraintsPVSButton = new java.awt.GridBagConstraints();
			constraintsPVSButton.gridx = 1; constraintsPVSButton.gridy = 4;
			constraintsPVSButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsPVSButton.insets = new java.awt.Insets(5, 10, 0, 10);
			getJDialogContentPane().add(getPVSButton(), constraintsPVSButton);

			java.awt.GridBagConstraints constraintsAddToLibraryButton = new java.awt.GridBagConstraints();
			constraintsAddToLibraryButton.gridx = 1; constraintsAddToLibraryButton.gridy = 7;
			constraintsAddToLibraryButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAddToLibraryButton.anchor = java.awt.GridBagConstraints.SOUTH;
			constraintsAddToLibraryButton.insets = new java.awt.Insets(10, 10, 0, 10);
			getJDialogContentPane().add(getAddToLibraryButton(), constraintsAddToLibraryButton);

			java.awt.GridBagConstraints constraintsBASLCodeScrollPane = new java.awt.GridBagConstraints();
			constraintsBASLCodeScrollPane.gridx = 0; constraintsBASLCodeScrollPane.gridy = 1;
constraintsBASLCodeScrollPane.gridheight = 7;
			constraintsBASLCodeScrollPane.fill = java.awt.GridBagConstraints.BOTH;
			constraintsBASLCodeScrollPane.weightx = 1.0;
			constraintsBASLCodeScrollPane.weighty = 1.0;
			constraintsBASLCodeScrollPane.insets = new java.awt.Insets(5, 10, 0, 0);
			getJDialogContentPane().add(getBASLCodeScrollPane(), constraintsBASLCodeScrollPane);

			java.awt.GridBagConstraints constraintsBASLLabel = new java.awt.GridBagConstraints();
			constraintsBASLLabel.gridx = 0; constraintsBASLLabel.gridy = 0;
			constraintsBASLLabel.gridwidth = 2;
			constraintsBASLLabel.fill = java.awt.GridBagConstraints.BOTH;
			constraintsBASLLabel.weightx = 1.0;
			constraintsBASLLabel.insets = new java.awt.Insets(10, 10, 0, 10);
			getJDialogContentPane().add(getBASLLabel(), constraintsBASLLabel);

			java.awt.GridBagConstraints constraintsSaveAsButton = new java.awt.GridBagConstraints();
			constraintsSaveAsButton.gridx = 1; constraintsSaveAsButton.gridy = 3;
			constraintsSaveAsButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsSaveAsButton.insets = new java.awt.Insets(5, 10, 0, 10);
			getJDialogContentPane().add(getSaveAsButton(), constraintsSaveAsButton);

			java.awt.GridBagConstraints constraintsRemoveButton = new java.awt.GridBagConstraints();
			constraintsRemoveButton.gridx = 1; constraintsRemoveButton.gridy = 11;
			constraintsRemoveButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsRemoveButton.insets = new java.awt.Insets(5, 10, 10, 10);
			getJDialogContentPane().add(getRemoveButton(), constraintsRemoveButton);

			java.awt.GridBagConstraints constraintsOpenButton = new java.awt.GridBagConstraints();
			constraintsOpenButton.gridx = 1; constraintsOpenButton.gridy = 2;
			constraintsOpenButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsOpenButton.insets = new java.awt.Insets(5, 10, 0, 10);
			getJDialogContentPane().add(getOpenButton(), constraintsOpenButton);

			java.awt.GridBagConstraints constraintsNewButton = new java.awt.GridBagConstraints();
			constraintsNewButton.gridx = 1; constraintsNewButton.gridy = 1;
			constraintsNewButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsNewButton.insets = new java.awt.Insets(5, 10, 0, 10);
			getJDialogContentPane().add(getNewButton(), constraintsNewButton);

			java.awt.GridBagConstraints constraintsPVSLogoLabel = new java.awt.GridBagConstraints();
			constraintsPVSLogoLabel.gridx = 1; constraintsPVSLogoLabel.gridy = 5;
			constraintsPVSLogoLabel.anchor = java.awt.GridBagConstraints.SOUTH;
			constraintsPVSLogoLabel.insets = new java.awt.Insets(15, 0, 0, 0);
			getJDialogContentPane().add(getPVSLogoLabel(), constraintsPVSLogoLabel);

			java.awt.GridBagConstraints constraintsShowButton = new java.awt.GridBagConstraints();
			constraintsShowButton.gridx = 1; constraintsShowButton.gridy = 9;
			constraintsShowButton.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsShowButton.insets = new java.awt.Insets(5, 10, 0, 10);
			getJDialogContentPane().add(getShowButton(), constraintsShowButton);

			java.awt.GridBagConstraints constraintsLibraryScrollPane = new java.awt.GridBagConstraints();
			constraintsLibraryScrollPane.gridx = 0; constraintsLibraryScrollPane.gridy = 9;
constraintsLibraryScrollPane.gridheight = 4;
			constraintsLibraryScrollPane.fill = java.awt.GridBagConstraints.BOTH;
			constraintsLibraryScrollPane.weightx = 1.0;
			constraintsLibraryScrollPane.weighty = 1.0;
			constraintsLibraryScrollPane.insets = new java.awt.Insets(5, 10, 10, 0);
			getJDialogContentPane().add(getLibraryScrollPane(), constraintsLibraryScrollPane);

			java.awt.GridBagConstraints constraintsAbstractionsLabel = new java.awt.GridBagConstraints();
			constraintsAbstractionsLabel.gridx = 0; constraintsAbstractionsLabel.gridy = 8;
			constraintsAbstractionsLabel.gridwidth = 2;
			constraintsAbstractionsLabel.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsAbstractionsLabel.weightx = 1.0;
			constraintsAbstractionsLabel.insets = new java.awt.Insets(10, 10, 0, 10);
			getJDialogContentPane().add(getAbstractionsLabel(), constraintsAbstractionsLabel);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJDialogContentPane;
}
/**
 * Return the LibraryScrollPane property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getLibraryScrollPane() {
	if (ivjLibraryScrollPane == null) {
		try {
			ivjLibraryScrollPane = new javax.swing.JScrollPane();
			ivjLibraryScrollPane.setName("LibraryScrollPane");
			ivjLibraryScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			ivjLibraryScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			getLibraryScrollPane().setViewportView(getScrollPaneTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLibraryScrollPane;
}
/**
 * Return the NewButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getNewButton() {
	if (ivjNewButton == null) {
		try {
			ivjNewButton = new javax.swing.JButton();
			ivjNewButton.setName("NewButton");
			ivjNewButton.setMnemonic('n');
			ivjNewButton.setText("New");
			ivjNewButton.setBackground(new java.awt.Color(204,204,255));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNewButton;
}
/**
 * Return the OpenButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getOpenButton() {
	if (ivjOpenButton == null) {
		try {
			ivjOpenButton = new javax.swing.JButton();
			ivjOpenButton.setName("OpenButton");
			ivjOpenButton.setMnemonic('o');
			ivjOpenButton.setText("Open");
			ivjOpenButton.setBackground(new java.awt.Color(204,204,255));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOpenButton;
}
/**
 * Return the JButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getPVSButton() {
	if (ivjPVSButton == null) {
		try {
			ivjPVSButton = new javax.swing.JButton();
			ivjPVSButton.setName("PVSButton");
			ivjPVSButton.setMnemonic('r');
			ivjPVSButton.setText("Run PVS");
			ivjPVSButton.setBackground(new java.awt.Color(204,204,255));
			// user code begin {1}
			if (System.getProperty("os.name").indexOf("Windows") >= 0) {
				ivjPVSButton.setEnabled(false);
				ivjPVSButton.setToolTipText("PVS is not available for Windows-based system");
			}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPVSButton;
}
/**
 * Return the PVSLogoLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getPVSLogoLabel() {
	if (ivjPVSLogoLabel == null) {
		try {
			ivjPVSLogoLabel = new javax.swing.JLabel();
			ivjPVSLogoLabel.setName("PVSLogoLabel");
			ivjPVSLogoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ksu/cis/bandera/bui/images/PVS.gif")));
			ivjPVSLogoLabel.setBorder(BorderFactory.createRaisedBevelBorder());
			ivjPVSLogoLabel.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPVSLogoLabel;
}
/**
 * Return the RemoveButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRemoveButton() {
	if (ivjRemoveButton == null) {
		try {
			ivjRemoveButton = new javax.swing.JButton();
			ivjRemoveButton.setName("RemoveButton");
			ivjRemoveButton.setMnemonic('m');
			ivjRemoveButton.setText("Remove");
			ivjRemoveButton.setBackground(new java.awt.Color(204,204,255));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRemoveButton;
}
/**
 * Return the SaveAsButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getSaveAsButton() {
	if (ivjSaveAsButton == null) {
		try {
			ivjSaveAsButton = new javax.swing.JButton();
			ivjSaveAsButton.setName("SaveAsButton");
			ivjSaveAsButton.setMnemonic('s');
			ivjSaveAsButton.setText("Save as...");
			ivjSaveAsButton.setBackground(new java.awt.Color(204,204,255));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSaveAsButton;
}
/**
 * Return the ScrollPaneTable property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getScrollPaneTable() {
	if (ivjScrollPaneTable == null) {
		try {
			ivjScrollPaneTable = new javax.swing.JTable();
			ivjScrollPaneTable.setName("ScrollPaneTable");
			getLibraryScrollPane().setColumnHeaderView(ivjScrollPaneTable.getTableHeader());
			getLibraryScrollPane().getViewport().setBackingStoreEnabled(true);
			ivjScrollPaneTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
			ivjScrollPaneTable.setBounds(0, 0, 200, 200);
			ivjScrollPaneTable.setAutoCreateColumnsFromModel(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjScrollPaneTable;
}
/**
 * Return the ShowButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getShowButton() {
	if (ivjShowButton == null) {
		try {
			ivjShowButton = new javax.swing.JButton();
			ivjShowButton.setName("ShowButton");
			ivjShowButton.setMnemonic('h');
			ivjShowButton.setText("Show");
			ivjShowButton.setBackground(new java.awt.Color(204,204,255));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjShowButton;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * 
 */
private static void init() {
	try {
		abstractionPackage = Preferences.getAbstractionPackage();
		abstractionPath = Preferences.getAbstractionPath();
		abstractionListPath = abstractionPath + File.separator + "Abstractions";
		LineNumberReader r = new LineNumberReader(new FileReader(abstractionListPath));
		String abstraction;
		while ((abstraction = r.readLine()) != null) {
			abstraction = abstraction.trim();
			if (!"".equals(abstraction))
				abstractions.add(abstraction);
		}
		r.close();
	} catch (Throwable e) {
		System.out.println("Cannot load abstractions...");
		e.printStackTrace();
	}
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getNewButton().addActionListener(ivjEventHandler);
	getAddToLibraryButton().addActionListener(ivjEventHandler);
	getPVSButton().addActionListener(ivjEventHandler);
	getSaveAsButton().addActionListener(ivjEventHandler);
	getOpenButton().addActionListener(ivjEventHandler);
	getShowButton().addActionListener(ivjEventHandler);
	getRemoveButton().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("AbtractionLibraryManager");
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setSize(546, 474);
		setModal(true);
		setTitle("Abstraction Library Manager");
		setContentPane(getJDialogContentPane());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	updateAbstractionTable();
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		AbstractionLibraryManager aAbstractionLibraryManager;
		aAbstractionLibraryManager = new AbstractionLibraryManager();
		aAbstractionLibraryManager.setModal(true);
		aAbstractionLibraryManager.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aAbstractionLibraryManager.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JDialog");
		exception.printStackTrace(System.out);
	}
}
/**
 * Comment
 */
public void newButton_ActionEvents() {
	return;
}
/**
 * Comment
 */
public void openButton_ActionEvents() {
	FileChooser.chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
	FileChooser.chooser.setFileFilter(FileChooser.BASL);
	FileChooser.chooser.setSelectedFile(new File(""));
	FileChooser.chooser.setFileSelectionMode(FileChooser.FILES_ONLY);
	if (FileChooser.chooser.showOpenDialog(this) == FileChooser.APPROVE_OPTION) {
		File file = FileChooser.chooser.getSelectedFile();
		if (!file.exists()) {
				JOptionPane.showMessageDialog(this, "File is not exist", "Open Error", JOptionPane.ERROR_MESSAGE);
				return;
		}
		try {
			FileReader r = new FileReader(file);
			AbstractionGenerator ag = new AbstractionGenerator(new PushbackReader(r));
			getBASLCodeTextArea().setText(AbstractionPrinter.print(ag.getNode(), true));
			r.close();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage(), "Open Error", JOptionPane.ERROR_MESSAGE);
		}
	}
}
/**
 * Comment
 */
public void pVSButton_ActionEvents() {
	try {
		AbstractionGenerator ag = new AbstractionGenerator(new StringReader(getBASLCodeTextArea().getText()));
		String s = ag.generate(abstractionPackage);
		ag.getErrors().remove("Default token is undefined");
		if (ag.getErrors().size() > 0) {
			StringBuffer buffer = new StringBuffer("Errors:\n");
			for (Iterator i = ag.getErrors().iterator(); i.hasNext();) {
				buffer.append("- " + i.next() + "\n");
			}
			if (ag.getWarnings().size() > 0) {
				buffer.append("Warnings:\n");
				for (Iterator i = ag.getWarnings().iterator(); i.hasNext();) {
					buffer.append("- " + i.next() + "\n");
				}
			}
			JOptionPane.showMessageDialog(this, buffer.toString(), "Cannnot run PVS", JOptionPane.ERROR_MESSAGE);
			return;
		}
		Reader r = new StringReader(AbstractionPrinter.print(ag.getNode(), false));
		parser parserObj = new parser(new Yylex(r));
		parserObj.parse();
		r.close();
		if (parserObj.npredicates != parserObj.tokens.size()) {
			JOptionPane.showMessageDialog(this, "Wrong token set", "Cannnot run PVS", JOptionPane.ERROR_MESSAGE);
			return;
		}
		new File("abstraction.pvs").delete();
		new File("abstraction.prf").delete();
		new File("abstraction.el").delete();
		PrintWriter pwPVS = new PrintWriter(new FileWriter("abstraction.pvs"));
		PrintWriter pwPRF = new PrintWriter(new FileWriter("abstraction.prf"));
		PrintWriter pwEL = new PrintWriter(new FileWriter("abstraction.el"));
		if (pwPVS == null || pwPRF == null || pwEL == null) {
			JOptionPane.showMessageDialog(this, "Unable to create temporary files", "Cannnot run PVS", JOptionPane.ERROR_MESSAGE);
			return;
		}
		if (parserObj.basic_type == sym.INT)
			PVS.begin_int(pwPVS);
		else
			PVS.begin_float(pwPVS);
		parserObj.tree.print_PVS(pwPVS);
		PVS.check(pwPVS, parserObj.npredicates);
		PVS.rest(pwPVS, parserObj.npredicates, parserObj.basic_type);
		PVS.prf(pwPRF, parserObj.npredicates, parserObj.basic_type);
		pwEL.println("(prove-pvs-file \"abstraction\")");
		pwPRF.close();
		pwPVS.close();
		pwEL.close();
		PVS.execAndWait("pvs -batch -q -l abstraction.el -v 1");
		StringWriter sw = new StringWriter();
		PrintWriter pwSpec = new PrintWriter(sw);
		if (parserObj.basic_type == sym.INT)
			pwSpec.print("abstraction " + parserObj.name + " extends integral\n begin\n");
		else
			pwSpec.print("abstraction " + parserObj.name + " extends real\n begin\n");
		pwSpec.print("  TOKENS = { ");
		for (int i = 0; i < parserObj.npredicates - 1; i++)
			pwSpec.print(parserObj.tokens.elementAt(i) + " , ");
		pwSpec.print(parserObj.tokens.elementAt(parserObj.npredicates - 1) + " }; ");
		PVS.check_BASL(pwSpec, parserObj.npredicates, parserObj.tokens);
		pwSpec.print("\n\n  abstract(" + parserObj.variable + ")\n  begin\n");
		parserObj.tree.print_BASL(pwSpec);
		pwSpec.print("  end\n\n");
		PVS.rest_BASL(pwSpec, parserObj.npredicates, parserObj.basic_type, parserObj.tokens);
		getBASLCodeTextArea().setText(sw.toString());
		pwSpec.close();
	} catch (Throwable e) {
		JOptionPane.showMessageDialog(this, e.getMessage(), "Cannnot run PVS", JOptionPane.ERROR_MESSAGE);
		e.printStackTrace();
	}
	new File("abstraction.pvs").delete();
	new File("abstraction.prf").delete();
	new File("abstraction.el").delete();
}
/**
 * Comment
 */
public void removeButton_ActionEvents() {
	int index = getScrollPaneTable().getSelectedRow();
	if (index >= 0) {
		String name = (String) abstractions.toArray()[index];
		boolean t = "".equals(abstractionPackage) ? name.startsWith(abstractionPackage + "integral.") : name.startsWith(abstractionPackage + ".");
		if (t) {
			if (JOptionPane.showConfirmDialog(this, "Do you want to delete the Java source and class files also?", "Question", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
				AbstractionClassLoader.removeClass(name);
				
				String filename = "".equals(abstractionPackage) ? abstractionPath + File.separator + name.replace('.', File.separatorChar) : abstractionPath + File.separator + name.substring(name.indexOf(abstractionPackage) + 1).replace('.', File.separatorChar);
				new File(filename + ".java").delete();
				new File(filename + ".class").delete();
			}
		}
		abstractions.remove(name);
		try {
			updateAbstractionList();
		} catch (Exception e) {
		}
	}
}

private void runJavac(String classpath, String filename) {
}
/**
 * Comment
 */
public void saveAsButton_ActionEvents() {
	FileChooser.chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
	FileChooser.chooser.setFileFilter(FileChooser.BASL);
	FileChooser.chooser.setSelectedFile(new File(""));
	FileChooser.chooser.setFileSelectionMode(FileChooser.FILES_ONLY);
	if (FileChooser.chooser.showSaveDialog(this) == FileChooser.APPROVE_OPTION) {
		File file = FileChooser.chooser.getSelectedFile();
		if (file.exists()) {
			if (JOptionPane.showConfirmDialog(this, "Do you want to overwrite the file?", "Confirm", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
				file.delete();
			} else {
				return;
			}
		}
		try {
			PrintWriter pw = new PrintWriter(new FileWriter(file));
			pw.print(getBASLCodeTextArea().getText());
			pw.flush();
			pw.close();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage(), "Saving Error", JOptionPane.ERROR_MESSAGE);
		}
	}
}
/**
 * Comment
 */
public void showButton_ActionEvents() {
	int index = getScrollPaneTable().getSelectedRow();
	if (index >= 0) {
		getBASLCodeTextArea().setText((String) AbstractionClassLoader.invokeMethod((String) abstractions.toArray()[index], "getBASLRepresentation", new Class[0], null, new Object[0]));
	}
}
/**
 * 
 */
private synchronized void updateAbstractionList() throws Exception {
	File f = new File(abstractionListPath);
	if (f.exists()) f.delete();
	PrintWriter pw = new PrintWriter(new FileWriter(abstractionListPath));
	for (Iterator i = abstractions.iterator(); i.hasNext();) {
		pw.println(i.next().toString());
	}
	pw.flush();
	pw.close();
	updateAbstractionTable();
}
/**
 * 
 */
private void updateAbstractionTable() {
	JTreeTable.processAbstractions(getAbstractions());
	if (TypeGUI.typeGUI != null) TypeGUI.typeGUI.reset();
	Object[][] data = new Object[abstractions.size()][3];
	String[] abstractions = new String[data.length];
	System.arraycopy(this.abstractions.toArray(), 0, abstractions, 0, data.length);
	for (int i = 0; i < data.length; i++) {
		data[i][0] = AbstractionClassLoader.invokeMethod(abstractions[i], "getName", new Class[0], null, new Object[0]);
		int numTokens = ((Integer) AbstractionClassLoader.invokeMethod(abstractions[i], "getNumOfTokens", new Class[0], null, new Object[0])).intValue();
		HashSet tokens = new HashSet();
		for (int j = 0; j < numTokens; j++) {
			String token = (String) AbstractionClassLoader.invokeMethod(abstractions[i], "getToken", new Class[] {int.class}, null, new Object[] {new Integer(j)});
			tokens.add(token.substring(token.indexOf(".") + 1));
		}
		data[i][1] = tokens.toString().replace('[', '{').replace(']', '}');
		data[i][2] = "integral";
	}
	getScrollPaneTable().setModel(new DefaultTableModel(data, columnNames));
	getScrollPaneTable().sizeColumnsToFit(0);
}
}
