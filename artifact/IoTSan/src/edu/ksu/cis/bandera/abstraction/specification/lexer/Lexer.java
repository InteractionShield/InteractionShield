package edu.ksu.cis.bandera.abstraction.specification.lexer;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import java.io.*;
import java.util.*;
import edu.ksu.cis.bandera.abstraction.specification.node.*;

public class Lexer
{
	protected Token token;
	protected State state = State.INITIAL;

	private PushbackReader in;
	private int line;
	private int pos;
	private boolean cr;
	private boolean eof;
	private final StringBuffer text = new StringBuffer();

	private static int[][][][] gotoTable;
/*  {
		{ // INITIAL
			{{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {33, 33, 6}, {36, 36, 7}, {37, 37, 8}, {38, 38, 9}, {40, 40, 10}, {41, 41, 11}, {42, 42, 12}, {43, 43, 13}, {44, 44, 14}, {45, 45, 15}, {46, 46, 16}, {47, 47, 17}, {48, 48, 18}, {49, 57, 19}, {58, 58, 20}, {59, 59, 21}, {60, 60, 22}, {61, 61, 23}, {62, 62, 24}, {63, 63, 25}, {65, 67, 26}, {68, 68, 27}, {69, 78, 26}, {79, 79, 28}, {80, 83, 26}, {84, 84, 29}, {85, 90, 26}, {94, 94, 30}, {95, 95, 31}, {97, 97, 32}, {98, 98, 33}, {99, 100, 26}, {101, 101, 34}, {102, 104, 26}, {105, 105, 35}, {106, 110, 26}, {111, 111, 36}, {112, 113, 26}, {114, 114, 37}, {115, 115, 26}, {116, 116, 38}, {117, 122, 26}, {123, 123, 39}, {124, 124, 40}, {125, 125, 41}, {126, 126, 42}, },
			{{9, 32, -2}, },
			{{9, 32, -2}, },
			{{9, 32, -2}, },
			{{9, 9, 1}, {10, 10, 43}, {12, 32, -2}, },
			{{9, 32, -2}, },
			{{61, 61, 44}, },
			{{36, 36, 45}, {48, 57, 46}, {65, 90, 47}, {95, 95, 48}, {97, 122, 47}, },
			{},
			{{38, 38, 49}, },
			{},
			{},
			{},
			{},
			{},
			{{62, 62, 50}, },
			{{48, 57, 51}, },
			{{42, 42, 52}, {47, 47, 53}, },
			{{46, 46, 54}, {48, 55, 55}, {56, 57, 56}, {69, 69, 57}, {70, 70, 58}, {76, 76, 59}, {88, 88, 60}, {101, 101, 61}, {102, 102, 62}, {108, 108, 63}, {120, 120, 64}, },
			{{46, 46, 54}, {48, 57, 65}, {69, 76, -20}, {101, 108, -20}, },
			{},
			{},
			{{60, 60, 66}, {61, 61, 67}, },
			{{61, 61, 68}, },
			{{61, 61, 69}, {62, 62, 70}, },
			{},
			{{36, 122, -9}, },
			{{36, 57, -9}, {65, 68, 47}, {69, 69, 71}, {70, 90, 47}, {95, 122, -9}, },
			{{36, 57, -9}, {65, 77, 47}, {78, 78, 72}, {79, 90, 47}, {95, 122, -9}, },
			{{36, 57, -9}, {65, 78, 47}, {79, 79, 73}, {80, 90, 47}, {95, 122, -9}, },
			{},
			{{36, 122, -9}, },
			{{36, 95, -9}, {97, 97, 47}, {98, 98, 74}, {99, 122, 47}, },
			{{36, 95, -9}, {97, 100, 47}, {101, 101, 75}, {102, 122, 47}, },
			{{36, 95, -9}, {97, 109, 47}, {110, 110, 76}, {111, 119, 47}, {120, 120, 77}, {121, 122, 47}, },
			{{36, 109, -36}, {110, 110, 78}, {111, 122, 47}, },
			{{36, 95, -9}, {97, 111, 47}, {112, 112, 79}, {113, 122, 47}, },
			{{36, 100, -35}, {101, 101, 80}, {102, 122, 47}, },
			{{36, 100, -35}, {101, 101, 81}, {102, 122, 47}, },
			{},
			{{124, 124, 82}, },
			{},
			{},
			{{9, 32, -2}, },
			{},
			{{36, 122, -9}, },
			{{36, 122, -9}, },
			{{36, 122, -9}, },
			{{36, 122, -9}, },
			{},
			{},
			{{48, 57, 51}, {69, 69, 83}, {70, 70, 84}, {101, 101, 85}, {102, 102, 86}, },
			{{0, 9, 87}, {10, 10, 88}, {11, 12, 87}, {13, 13, 89}, {14, 41, 87}, {42, 42, 90}, {43, 255, 87}, },
			{{0, 9, 91}, {10, 10, 92}, {11, 12, 91}, {13, 13, 93}, {14, 255, 91}, },
			{{48, 57, 94}, {69, 69, 95}, {70, 70, 96}, {101, 101, 97}, {102, 102, 98}, },
			{{46, 70, -20}, {76, 76, 99}, {101, 102, -20}, {108, 108, 100}, },
			{{46, 46, 54}, {48, 57, 56}, {69, 70, -20}, {101, 102, -20}, },
			{{43, 43, 101}, {45, 45, 102}, {48, 57, 103}, },
			{},
			{},
			{{48, 57, 104}, {65, 70, 105}, {97, 102, 106}, },
			{{43, 57, -59}, },
			{},
			{},
			{{48, 102, -62}, },
			{{46, 108, -21}, },
			{},
			{},
			{},
			{},
			{{62, 62, 107}, },
			{{36, 57, -9}, {65, 69, 47}, {70, 70, 108}, {71, 90, 47}, {95, 122, -9}, },
			{{36, 68, -29}, {69, 69, 109}, {70, 122, -29}, },
			{{36, 57, -9}, {65, 74, 47}, {75, 75, 110}, {76, 90, 47}, {95, 122, -9}, },
			{{36, 95, -9}, {97, 114, 47}, {115, 115, 111}, {116, 122, 47}, },
			{{36, 95, -9}, {97, 102, 47}, {103, 103, 112}, {104, 122, 47}, },
			{{36, 95, -9}, {97, 99, 47}, {100, 100, 113}, {101, 122, 47}, },
			{{36, 95, -9}, {97, 115, 47}, {116, 116, 114}, {117, 122, 47}, },
			{{36, 115, -79}, {116, 116, 115}, {117, 122, 47}, },
			{{36, 100, -35}, {101, 101, 116}, {102, 122, 47}, },
			{{36, 95, -9}, {97, 97, 117}, {98, 122, 47}, },
			{{36, 114, -76}, {115, 115, 118}, {116, 122, 47}, },
			{},
			{{43, 43, 119}, {45, 45, 120}, {48, 57, 121}, },
			{},
			{{43, 57, -85}, },
			{},
			{{0, 41, -54}, {42, 42, 122}, {43, 255, 87}, },
			{{0, 255, -89}, },
			{{0, 9, 87}, {10, 10, 123}, {11, 255, -89}, },
			{{0, 9, 124}, {10, 10, 125}, {11, 12, 124}, {13, 13, 126}, {14, 41, 124}, {42, 42, 127}, {43, 46, 124}, {47, 47, 128}, {48, 255, 124}, },
			{{0, 255, -55}, },
			{},
			{{10, 10, 129}, },
			{{48, 102, -56}, },
			{{43, 43, 130}, {45, 45, 131}, {48, 57, 132}, },
			{},
			{{43, 57, -97}, },
			{},
			{},
			{},
			{{48, 57, 103}, },
			{{48, 57, 103}, },
			{{48, 57, 103}, {70, 70, 133}, {102, 102, 134}, },
			{{48, 70, -62}, {76, 76, 135}, {97, 102, 106}, {108, 108, 136}, },
			{{48, 108, -106}, },
			{{48, 108, -106}, },
			{},
			{{36, 57, -9}, {65, 65, 137}, {66, 90, 47}, {95, 122, -9}, },
			{{36, 36, 45}, {48, 49, 46}, {50, 50, 138}, {51, 57, 46}, {65, 122, -9}, },
			{{36, 68, -29}, {69, 69, 139}, {70, 122, -29}, },
			{{36, 115, -79}, {116, 116, 140}, {117, 122, 47}, },
			{{36, 95, -9}, {97, 104, 47}, {105, 105, 141}, {106, 122, 47}, },
			{{36, 122, -9}, },
			{{36, 100, -35}, {101, 101, 142}, {102, 122, 47}, },
			{{36, 100, -35}, {101, 101, 143}, {102, 122, 47}, },
			{{36, 95, -9}, {97, 113, 47}, {114, 114, 144}, {115, 122, 47}, },
			{{36, 95, -9}, {97, 107, 47}, {108, 108, 145}, {109, 122, 47}, },
			{{36, 115, -79}, {116, 116, 146}, {117, 122, 47}, },
			{{48, 57, 121}, },
			{{48, 57, 121}, },
			{{48, 57, 121}, {70, 70, 84}, {102, 102, 86}, },
			{{0, 9, 147}, {10, 10, 148}, {11, 12, 147}, {13, 13, 149}, {14, 41, 147}, {42, 42, 122}, {43, 46, 147}, {47, 47, 150}, {48, 255, 147}, },
			{{0, 255, -89}, },
			{{0, 9, 151}, {10, 10, 152}, {11, 12, 151}, {13, 13, 153}, {14, 41, 151}, {42, 42, 154}, {43, 255, 151}, },
			{{0, 255, -126}, },
			{{0, 9, 151}, {10, 10, 155}, {11, 255, -126}, },
			{{0, 255, -92}, },
			{},
			{},
			{{48, 57, 132}, },
			{{48, 57, 132}, },
			{{48, 57, 132}, {70, 70, 96}, {102, 102, 98}, },
			{},
			{},
			{},
			{},
			{{36, 57, -9}, {65, 84, 47}, {85, 85, 156}, {86, 90, 47}, {95, 122, -9}, },
			{{36, 78, -31}, {79, 79, 157}, {80, 122, -31}, },
			{{36, 77, -30}, {78, 78, 158}, {79, 122, -30}, },
			{{36, 113, -118}, {114, 114, 159}, {115, 122, 47}, },
			{{36, 109, -36}, {110, 110, 160}, {111, 122, 47}, },
			{{36, 109, -36}, {110, 110, 161}, {111, 122, 47}, },
			{{36, 102, -77}, {103, 103, 162}, {104, 122, 47}, },
			{{36, 95, -9}, {97, 97, 163}, {98, 122, 47}, },
			{{36, 122, -9}, },
			{{36, 122, -9}, },
			{{0, 9, 164}, {10, 10, 165}, {11, 12, 164}, {13, 13, 166}, {14, 41, 164}, {42, 42, 167}, {43, 255, 164}, },
			{{0, 255, -149}, },
			{{0, 9, 164}, {10, 10, 168}, {11, 255, -149}, },
			{},
			{{0, 255, -126}, },
			{{0, 255, -126}, },
			{{0, 9, 151}, {10, 10, 169}, {11, 255, -126}, },
			{{0, 41, -92}, {42, 42, 154}, {43, 255, -92}, },
			{{0, 255, -126}, },
			{{36, 57, -9}, {65, 75, 47}, {76, 76, 170}, {77, 90, 47}, {95, 122, -9}, },
			{{36, 77, -30}, {78, 78, 171}, {79, 122, -30}, },
			{{36, 57, -9}, {65, 82, 47}, {83, 83, 172}, {84, 90, 47}, {95, 122, -9}, },
			{{36, 95, -9}, {97, 97, 173}, {98, 122, 47}, },
			{{36, 122, -9}, },
			{{36, 99, -78}, {100, 100, 174}, {101, 122, 47}, },
			{{36, 113, -118}, {114, 114, 175}, {115, 122, 47}, },
			{{36, 115, -79}, {116, 116, 176}, {117, 122, 47}, },
			{{0, 255, -149}, },
			{{0, 255, -149}, },
			{{0, 9, 164}, {10, 10, 177}, {11, 255, -149}, },
			{{0, 41, -124}, {42, 42, 167}, {43, 255, -124}, },
			{{0, 255, -149}, },
			{{0, 255, -126}, },
			{{36, 57, -9}, {65, 83, 47}, {84, 84, 178}, {85, 90, 47}, {95, 122, -9}, },
			{{36, 68, -29}, {69, 69, 179}, {70, 122, -29}, },
			{{36, 122, -9}, },
			{{36, 95, -9}, {97, 98, 47}, {99, 99, 180}, {100, 122, 47}, },
			{{36, 114, -76}, {115, 115, 181}, {116, 122, 47}, },
			{{36, 95, -9}, {97, 97, 182}, {98, 122, 47}, },
			{{36, 95, -9}, {97, 110, 47}, {111, 111, 183}, {112, 122, 47}, },
			{{0, 255, -149}, },
			{{36, 122, -9}, },
			{{36, 122, -9}, },
			{{36, 115, -79}, {116, 116, 184}, {117, 122, 47}, },
			{{36, 122, -9}, },
			{{36, 107, -119}, {108, 108, 185}, {109, 122, 47}, },
			{{36, 113, -118}, {114, 114, 186}, {115, 122, 47}, },
			{{36, 104, -114}, {105, 105, 187}, {106, 122, 47}, },
			{{36, 122, -9}, },
			{{36, 122, -9}, },
			{{36, 110, -178}, {111, 111, 188}, {112, 122, 47}, },
			{{36, 109, -36}, {110, 110, 189}, {111, 122, 47}, },
			{{36, 122, -9}, },
		}
	};*/

	private static int[][] accept;
/*  {
		// INITIAL
		{0, 0, 0, 0, 0, 0, 24, 58, 31, 34, 4, 5, 29, 27, 10, 28, 11, 30, 50, 50, 9, 8, 14, 13, 15, 26, 58, 58, 58, 58, 32, 36, 58, 58, 58, 58, 58, 58, 58, 6, 33, 7, 25, 0, 18, 58, 58, 58, 58, 19, 35, 56, -1, 3, 56, 52, 56, -1, 57, 53, -1, -1, 57, 53, -1, 50, 21, 16, 12, 17, 22, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 20, -1, 57, -1, 57, -1, -1, -1, -1, 3, 3, 3, 56, -1, 57, -1, 57, 55, 55, -1, -1, 56, 51, 51, 51, 23, 58, 58, 58, 58, 58, 40, 58, 58, 58, 58, 58, -1, -1, 56, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, 56, 57, 57, 54, 54, 58, 58, 58, 58, 58, 58, 58, 58, 47, 46, -1, -1, -1, 1, -1, -1, -1, -1, -1, 58, 58, 58, 58, 39, 58, 58, 58, -1, -1, -1, -1, -1, -1, 58, 58, 42, 58, 58, 58, 58, -1, 43, 44, 58, 37, 58, 58, 41, 48, 49, 58, 58, 38, },

	};*/

	public static class State
	{
		public final static State INITIAL = new State(0);

		private int id;

		private State(int id)
		{
			this.id = id;
		}

		public int id()
		{
			return id;
		}
	}
	public Lexer(PushbackReader in)
	{
		this.in = in;

		if(gotoTable == null)
		{
			try
			{
				DataInputStream s = new DataInputStream(
					new BufferedInputStream(
					Lexer.class.getResourceAsStream("lexer.dat")));

				// read gotoTable
				int length = s.readInt();
				gotoTable = new int[length][][][];
				for(int i = 0; i < gotoTable.length; i++)
				{
					length = s.readInt();
					gotoTable[i] = new int[length][][];
					for(int j = 0; j < gotoTable[i].length; j++)
					{
						length = s.readInt();
						gotoTable[i][j] = new int[length][3];
						for(int k = 0; k < gotoTable[i][j].length; k++)
						{
							for(int l = 0; l < 3; l++)
							{
								gotoTable[i][j][k][l] = s.readInt();
							}
						}
					}
				}

				// read accept
				length = s.readInt();
				accept = new int[length][];
				for(int i = 0; i < accept.length; i++)
				{
					length = s.readInt();
					accept[i] = new int[length];
					for(int j = 0; j < accept[i].length; j++)
					{
						accept[i][j] = s.readInt();
					}
				}

				s.close();
			}
			catch(Exception e)
			{
				throw new RuntimeException("Unable to read lexer.dat.");
			}
		}
	}
	protected void filter() throws LexerException, IOException
	{
	}
	private int getChar() throws IOException
	{
		if(eof)
		{
			return -1;
		}

		int result = in.read();

		if(result == -1)
		{
			eof = true;
		}

		return result;
	}
	private String getText(int acceptLength)
	{
		StringBuffer s = new StringBuffer(acceptLength);
		for(int i = 0; i < acceptLength; i++)
		{
			s.append(text.charAt(i));
		}

		return s.toString();
	}
	protected Token getToken() throws IOException, LexerException
	{
		int dfa_state = 0;

		int start_pos = pos;
		int start_line = line;

		int accept_state = -1;
		int accept_token = -1;
		int accept_length = -1;
		int accept_pos = -1;
		int accept_line = -1;

		int[][][] gotoTable = this.gotoTable[state.id()];
		int[] accept = this.accept[state.id()];
		text.setLength(0);

		while(true)
		{
			int c = getChar();

			if(c != -1)
			{
				switch(c)
				{
				case 10:
					if(cr)
					{
						cr = false;
					}
					else
					{
						line++;
						pos = 0;
					}
					break;
				case 13:
					line++;
					pos = 0;
					cr = true;
					break;
				default:
					pos++;
					cr = false;
					break;
				};

				text.append((char) c);

				do
				{
					int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

					dfa_state = -1;

					int[][] tmp1 =  gotoTable[oldState];
					int low = 0;
					int high = tmp1.length - 1;

					while(low <= high)
					{
						int middle = (low + high) / 2;
						int[] tmp2 = tmp1[middle];

						if(c < tmp2[0])
						{
							high = middle - 1;
						}
						else if(c > tmp2[1])
						{
							low = middle + 1;
						}
						else
						{
							dfa_state = tmp2[2];
							break;
						}
					}
				}while(dfa_state < -1);
			}
			else
			{
				dfa_state = -1;
			}

			if(dfa_state >= 0)
			{
				if(accept[dfa_state] != -1)
				{
					accept_state = dfa_state;
					accept_token = accept[dfa_state];
					accept_length = text.length();
					accept_pos = pos;
					accept_line = line;
				}
			}
			else
			{
				if(accept_state != -1)
				{
					switch(accept_token)
					{
					case 0:
						{
							Token token = new0(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 1:
						{
							Token token = new1(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 2:
						{
							Token token = new2(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 3:
						{
							Token token = new3(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 4:
						{
							Token token = new4(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 5:
						{
							Token token = new5(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 6:
						{
							Token token = new6(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 7:
						{
							Token token = new7(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 8:
						{
							Token token = new8(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 9:
						{
							Token token = new9(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 10:
						{
							Token token = new10(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 11:
						{
							Token token = new11(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 12:
						{
							Token token = new12(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 13:
						{
							Token token = new13(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 14:
						{
							Token token = new14(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 15:
						{
							Token token = new15(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 16:
						{
							Token token = new16(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 17:
						{
							Token token = new17(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 18:
						{
							Token token = new18(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 19:
						{
							Token token = new19(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 20:
						{
							Token token = new20(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 21:
						{
							Token token = new21(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 22:
						{
							Token token = new22(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 23:
						{
							Token token = new23(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 24:
						{
							Token token = new24(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 25:
						{
							Token token = new25(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 26:
						{
							Token token = new26(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 27:
						{
							Token token = new27(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 28:
						{
							Token token = new28(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 29:
						{
							Token token = new29(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 30:
						{
							Token token = new30(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 31:
						{
							Token token = new31(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 32:
						{
							Token token = new32(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 33:
						{
							Token token = new33(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 34:
						{
							Token token = new34(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 35:
						{
							Token token = new35(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 36:
						{
							Token token = new36(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 37:
						{
							Token token = new37(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 38:
						{
							Token token = new38(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 39:
						{
							Token token = new39(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 40:
						{
							Token token = new40(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 41:
						{
							Token token = new41(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 42:
						{
							Token token = new42(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 43:
						{
							Token token = new43(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 44:
						{
							Token token = new44(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 45:
						{
							Token token = new45(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 46:
						{
							Token token = new46(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 47:
						{
							Token token = new47(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 48:
						{
							Token token = new48(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 49:
						{
							Token token = new49(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 50:
						{
							Token token = new50(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 51:
						{
							Token token = new51(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 52:
						{
							Token token = new52(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 53:
						{
							Token token = new53(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 54:
						{
							Token token = new54(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 55:
						{
							Token token = new55(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 56:
						{
							Token token = new56(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 57:
						{
							Token token = new57(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 58:
						{
							Token token = new58(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					}
				}
				else
				{
					if(text.length() > 0)
					{
						throw new LexerException(
							"[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
							" Unknown token: " + text);
					}
					else
					{
						EOF token = new EOF(
							start_line + 1,
							start_pos + 1);
						return token;
					}
				}
			}
		}
	}
	Token new0(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }
	Token new1(String text, int line, int pos) { return new TTraditionalComment(text, line, pos); }
	Token new10(int line, int pos) { return new TComma(line, pos); }
	Token new11(int line, int pos) { return new TDot(line, pos); }
	Token new12(int line, int pos) { return new TEqual(line, pos); }
	Token new13(int line, int pos) { return new TEq(line, pos); }
	Token new14(int line, int pos) { return new TLess(line, pos); }
	Token new15(int line, int pos) { return new TGreater(line, pos); }
	Token new16(int line, int pos) { return new TLessEqual(line, pos); }
	Token new17(int line, int pos) { return new TGreaterEqual(line, pos); }
	Token new18(int line, int pos) { return new TNotEqual(line, pos); }
	Token new19(int line, int pos) { return new TAnd(line, pos); }
	Token new2(String text, int line, int pos) { return new TDocumentationComment(text, line, pos); }
	Token new20(int line, int pos) { return new TOr(line, pos); }
	Token new21(int line, int pos) { return new TShiftLeft(line, pos); }
	Token new22(int line, int pos) { return new TSignedShiftRight(line, pos); }
	Token new23(int line, int pos) { return new TUnsignedShiftRight(line, pos); }
	Token new24(int line, int pos) { return new TNot(line, pos); }
	Token new25(int line, int pos) { return new TBitComplement(line, pos); }
	Token new26(int line, int pos) { return new TQuestion(line, pos); }
	Token new27(int line, int pos) { return new TPlus(line, pos); }
	Token new28(int line, int pos) { return new TMinus(line, pos); }
	Token new29(int line, int pos) { return new TTimes(line, pos); }
	Token new3(String text, int line, int pos) { return new TEndOfLineComment(text, line, pos); }
	Token new30(int line, int pos) { return new TDiv(line, pos); }
	Token new31(int line, int pos) { return new TMod(line, pos); }
	Token new32(int line, int pos) { return new TBitXor(line, pos); }
	Token new33(int line, int pos) { return new TBitOr(line, pos); }
	Token new34(int line, int pos) { return new TBitAnd(line, pos); }
	Token new35(int line, int pos) { return new TRightarrow(line, pos); }
	Token new36(int line, int pos) { return new TAny(line, pos); }
	Token new37(int line, int pos) { return new TExtends(line, pos); }
	Token new38(int line, int pos) { return new TAbstraction(line, pos); }
	Token new39(int line, int pos) { return new TBegin(line, pos); }
	Token new4(int line, int pos) { return new TLParen(line, pos); }
	Token new40(int line, int pos) { return new TEnd(line, pos); }
	Token new41(int line, int pos) { return new TAbstract(line, pos); }
	Token new42(int line, int pos) { return new TTokens(line, pos); }
	Token new43(int line, int pos) { return new TDefault(line, pos); }
	Token new44(int line, int pos) { return new TOne2one(line, pos); }
	Token new45(int line, int pos) { return new TAbtract(line, pos); }
	Token new46(int line, int pos) { return new TTest(line, pos); }
	Token new47(int line, int pos) { return new TReal(line, pos); }
	Token new48(int line, int pos) { return new TIntegral(line, pos); }
	Token new49(int line, int pos) { return new TOperator(line, pos); }
	Token new5(int line, int pos) { return new TRParen(line, pos); }
	Token new50(String text, int line, int pos) { return new TDecIntLiteral(text, line, pos); }
	Token new51(String text, int line, int pos) { return new THexIntLiteral(text, line, pos); }
	Token new52(String text, int line, int pos) { return new TOctIntLiteral(text, line, pos); }
	Token new53(String text, int line, int pos) { return new TDecLongLiteral(text, line, pos); }
	Token new54(String text, int line, int pos) { return new THexLongLiteral(text, line, pos); }
	Token new55(String text, int line, int pos) { return new TOctLongLiteral(text, line, pos); }
	Token new56(String text, int line, int pos) { return new TDoubleLiteral(text, line, pos); }
	Token new57(String text, int line, int pos) { return new TFloatLiteral(text, line, pos); }
	Token new58(String text, int line, int pos) { return new TId(text, line, pos); }
	Token new6(int line, int pos) { return new TLBrace(line, pos); }
	Token new7(int line, int pos) { return new TRBrace(line, pos); }
	Token new8(int line, int pos) { return new TSemicolon(line, pos); }
	Token new9(int line, int pos) { return new TColon(line, pos); }
	public Token next() throws LexerException, IOException
	{
		while(token == null)
		{
			token = getToken();
			filter();
		}

		Token result = token;
		token = null;
		return result;
	}
	public Token peek() throws LexerException, IOException
	{
		while(token == null)
		{
			token = getToken();
			filter();
		}

		return token;
	}
	private void pushBack(int acceptLength) throws IOException
	{
		int length = text.length();
		for(int i = length - 1; i >= acceptLength; i--)
		{
			eof = false;

			in.unread(text.charAt(i));
		}
	}
	protected void unread(Token token) throws IOException
	{
		String text = token.getText();
		int length = text.length();

		for(int i = length - 1; i >= 0; i--)
		{
			eof = false;

			in.unread(text.charAt(i));
		}

		pos = token.getPos() - 1;
		line = token.getLine() - 1;
	}
}
