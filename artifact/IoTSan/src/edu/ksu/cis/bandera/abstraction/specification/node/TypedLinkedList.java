package edu.ksu.cis.bandera.abstraction.specification.node;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import java.util.*;

public class TypedLinkedList extends LinkedList
{
	Cast cast;

	private class TypedLinkedListIterator implements ListIterator
	{
		ListIterator iterator;

		TypedLinkedListIterator(ListIterator iterator)
		{
			this.iterator = iterator;
		}

		public boolean hasNext()
		{
			return iterator.hasNext();
		}

		public Object next()
		{
			return iterator.next();
		}

		public boolean hasPrevious()
		{
			return iterator.hasPrevious();
		}

		public Object previous()
		{
			return iterator.previous();
		}

		public int nextIndex()
		{
			return iterator.nextIndex();
		}

		public int previousIndex()
		{
			return iterator.previousIndex();
		}

		public void remove()
		{
			iterator.remove();
		}

		public void set(Object o)
		{
			iterator.set(cast.cast(o));
		}

		public void add(Object o)
		{
			iterator.add(cast.cast(o));
		}
	}
	public TypedLinkedList()
	{
		super();

		cast = NoCast.instance;
	}
	public TypedLinkedList(Cast cast)
	{
		super();

		this.cast = cast;
	}
	public TypedLinkedList(Collection c)
	{
		super(c);

		cast = NoCast.instance;
	}
	public TypedLinkedList(Collection c, Cast cast)
	{
		super(c);

		this.cast = cast;
	}
	public void add(int index, Object element)
	{
		super.add(index, cast.cast(element));
	}
	public boolean add(Object o)
	{
		return super.add(cast.cast(o));
	}
	public boolean addAll(int index, Collection c)
	{
		int pos = index;
		for(Iterator i = c.iterator(); i.hasNext(); )
		{
			super.add(pos++, cast.cast(i.next()));
		}
		return true;
	}
	public boolean addAll(Collection c)
	{
		for(Iterator i = c.iterator(); i.hasNext(); )
		{
			super.add(cast.cast(i.next()));
		}
		return true;
	}
	public void addFirst(Object o)
	{
		super.addFirst(cast.cast(o));
	}
	public void addLast(Object o)
	{
		super.addLast(cast.cast(o));
	}
	public Cast getCast()
	{
		return cast;
	}
	public ListIterator listIterator(int index)
	{
		return new TypedLinkedListIterator(super.listIterator(index));
	}
}
