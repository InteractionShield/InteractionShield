package edu.ksu.cis.bandera.abstraction.options.analysis;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import java.util.*;
import edu.ksu.cis.bandera.abstraction.options.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
	public void caseAClassOption(AClassOption node)
	{
		inAClassOption(node);
		if(node.getCls() != null)
		{
			node.getCls().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		if(node.getLBrace() != null)
		{
			node.getLBrace().apply(this);
		}
		{
			Object temp[] = node.getFieldOption().toArray();
			for(int i = 0; i < temp.length; i++)
			{
				((PFieldOption) temp[i]).apply(this);
			}
		}
		{
			Object temp[] = node.getMethodOption().toArray();
			for(int i = 0; i < temp.length; i++)
			{
				((PMethodOption) temp[i]).apply(this);
			}
		}
		if(node.getRBrace() != null)
		{
			node.getRBrace().apply(this);
		}
		outAClassOption(node);
	}
	public void caseAFieldOption(AFieldOption node)
	{
		inAFieldOption(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		if(node.getSemicolon() != null)
		{
			node.getSemicolon().apply(this);
		}
		outAFieldOption(node);
	}
	public void caseALocalOption(ALocalOption node)
	{
		inALocalOption(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		if(node.getSemicolon() != null)
		{
			node.getSemicolon().apply(this);
		}
		outALocalOption(node);
	}
	public void caseAMethodOption(AMethodOption node)
	{
		inAMethodOption(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getLParen() != null)
		{
			node.getLParen().apply(this);
		}
		if(node.getParams() != null)
		{
			node.getParams().apply(this);
		}
		if(node.getRParen() != null)
		{
			node.getRParen().apply(this);
		}
		if(node.getLBrace() != null)
		{
			node.getLBrace().apply(this);
		}
		{
			Object temp[] = node.getLocalOption().toArray();
			for(int i = 0; i < temp.length; i++)
			{
				((PLocalOption) temp[i]).apply(this);
			}
		}
		if(node.getRBrace() != null)
		{
			node.getRBrace().apply(this);
		}
		outAMethodOption(node);
	}
	public void caseAParamParams(AParamParams node)
	{
		inAParamParams(node);
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		{
			Object temp[] = node.getDim().toArray();
			for(int i = 0; i < temp.length; i++)
			{
				((TDim) temp[i]).apply(this);
			}
		}
		outAParamParams(node);
	}
	public void caseAParamsParams(AParamsParams node)
	{
		inAParamsParams(node);
		if(node.getParams() != null)
		{
			node.getParams().apply(this);
		}
		if(node.getComma() != null)
		{
			node.getComma().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		{
			Object temp[] = node.getDim().toArray();
			for(int i = 0; i < temp.length; i++)
			{
				((TDim) temp[i]).apply(this);
			}
		}
		outAParamsParams(node);
	}
	public void caseAQualifiedName(AQualifiedName node)
	{
		inAQualifiedName(node);
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		if(node.getDot() != null)
		{
			node.getDot().apply(this);
		}
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		outAQualifiedName(node);
	}
	public void caseASimpleName(ASimpleName node)
	{
		inASimpleName(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		outASimpleName(node);
	}
	public void caseAUnit(AUnit node)
	{
		inAUnit(node);
		{
			Object temp[] = node.getClassOption().toArray();
			for(int i = 0; i < temp.length; i++)
			{
				((PClassOption) temp[i]).apply(this);
			}
		}
		outAUnit(node);
	}
	public void caseStart(Start node)
	{
		inStart(node);
		node.getPUnit().apply(this);
		node.getEOF().apply(this);
		outStart(node);
	}
	public void defaultIn(Node node)
	{
	}
	public void defaultOut(Node node)
	{
	}
	public void inAClassOption(AClassOption node)
	{
		defaultIn(node);
	}
	public void inAFieldOption(AFieldOption node)
	{
		defaultIn(node);
	}
	public void inALocalOption(ALocalOption node)
	{
		defaultIn(node);
	}
	public void inAMethodOption(AMethodOption node)
	{
		defaultIn(node);
	}
	public void inAParamParams(AParamParams node)
	{
		defaultIn(node);
	}
	public void inAParamsParams(AParamsParams node)
	{
		defaultIn(node);
	}
	public void inAQualifiedName(AQualifiedName node)
	{
		defaultIn(node);
	}
	public void inASimpleName(ASimpleName node)
	{
		defaultIn(node);
	}
	public void inAUnit(AUnit node)
	{
		defaultIn(node);
	}
	public void inStart(Start node)
	{
		defaultIn(node);
	}
	public void outAClassOption(AClassOption node)
	{
		defaultOut(node);
	}
	public void outAFieldOption(AFieldOption node)
	{
		defaultOut(node);
	}
	public void outALocalOption(ALocalOption node)
	{
		defaultOut(node);
	}
	public void outAMethodOption(AMethodOption node)
	{
		defaultOut(node);
	}
	public void outAParamParams(AParamParams node)
	{
		defaultOut(node);
	}
	public void outAParamsParams(AParamsParams node)
	{
		defaultOut(node);
	}
	public void outAQualifiedName(AQualifiedName node)
	{
		defaultOut(node);
	}
	public void outASimpleName(ASimpleName node)
	{
		defaultOut(node);
	}
	public void outAUnit(AUnit node)
	{
		defaultOut(node);
	}
	public void outStart(Start node)
	{
		defaultOut(node);
	}
}
