package edu.ksu.cis.bandera.abstraction.lib.integral;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// This file was generated by Bandera (http://www.cis.ksu.edu/santos/bandera).
import edu.ksu.cis.bandera.abstraction.*;
public class Signs extends IntegralAbstraction {
  private static final Signs v = new Signs();
  public static final int ZERO = 0;
  public static final int NEG = 1;
  public static final int POS = 2;
  private Signs() {
  }  
  public static int abs(long n) {
	if (n < 0) return NEG;
	if (n == 0) return ZERO;
	if (n > 0) return POS;
	throw new RuntimeException("Signs cannot abstract value '" + n + "'");
  }  
  public static int add(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return NEG;
	if (left$ == NEG && right$ == ZERO) return NEG;
	if (left$ == NEG && right$ == POS) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == ZERO && right$ == NEG) return NEG;
	if (left$ == ZERO && right$ == ZERO) return ZERO;
	if (left$ == ZERO && right$ == POS) return POS;
	if (left$ == POS && right$ == NEG) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == POS && right$ == ZERO) return POS;
	if (left$ == POS && right$ == POS) return POS;
	throw new RuntimeException("Signs.add(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static int addNoChoose(int left, int right) {
	int result = 0;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 4;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 2;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 7;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 4;
			break;
		  case 1:
			result = 7;
			break;
		  case 2:
			result = 4;
			break;
		}
		break;
	}
	if (result == 0) throw new RuntimeException("Signs.addNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static int addSet(int leftTokens, int rightTokens) {
	int result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = addNoChoose(left, right);
		  else result = Abstraction.meetArith(result, addNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static int div(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == NEG && right$ == ZERO) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == NEG && right$ == POS) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == ZERO && right$ == NEG) return ZERO;
	if (left$ == ZERO && right$ == ZERO) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == ZERO && right$ == POS) return ZERO;
	if (left$ == POS && right$ == NEG) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == POS && right$ == ZERO) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == POS && right$ == POS) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	throw new RuntimeException("Signs.div(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static int divNoChoose(int left, int right) {
	int result = 0;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 7;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 7;
			break;
		  case 1:
			result = 7;
			break;
		  case 2:
			result = 7;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 7;
			break;
		  case 1:
			result = 7;
			break;
		  case 2:
			result = 7;
			break;
		}
		break;
	}
	if (result == 0) throw new RuntimeException("Signs.divNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static int divSet(int leftTokens, int rightTokens) {
	int result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = divNoChoose(left, right);
		  else result = Abstraction.meetArith(result, divNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static boolean eq(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose();
	if (left$ == NEG && right$ == ZERO) return false;
	if (left$ == NEG && right$ == POS) return false;
	if (left$ == ZERO && right$ == NEG) return false;
	if (left$ == ZERO && right$ == ZERO) return true;
	if (left$ == ZERO && right$ == POS) return false;
	if (left$ == POS && right$ == NEG) return false;
	if (left$ == POS && right$ == ZERO) return false;
	if (left$ == POS && right$ == POS) return Abstraction.choose();
	throw new RuntimeException("Signs.eq(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static byte eqNoChoose(int left, int right) {
	byte result = -1;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 0;
			break;
		  case 2:
			result = 0;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 0;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 0;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	}
	if (result == -1) throw new RuntimeException("Signs.eqNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static byte eqSet(int leftTokens, int rightTokens) {
	byte result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = eqNoChoose(left, right);
		  else result = Abstraction.meetTest(result, eqNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static boolean ge(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose();
	if (left$ == NEG && right$ == ZERO) return false;
	if (left$ == NEG && right$ == POS) return false;
	if (left$ == ZERO && right$ == NEG) return true;
	if (left$ == ZERO && right$ == ZERO) return true;
	if (left$ == ZERO && right$ == POS) return false;
	if (left$ == POS && right$ == NEG) return true;
	if (left$ == POS && right$ == ZERO) return true;
	if (left$ == POS && right$ == POS) return Abstraction.choose();
	throw new RuntimeException("Signs.ge(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static byte geNoChoose(int left, int right) {
	byte result = -1;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 0;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 0;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	}
	if (result == -1) throw new RuntimeException("Signs.geNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static byte geSet(int leftTokens, int rightTokens) {
	byte result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = geNoChoose(left, right);
		  else result = Abstraction.meetTest(result, geNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static String getBASLRepresentation() {
	return
	  "abstraction Signs extends integral \n"
	  + "  begin\n"
	  + "    TOKENS = {NEG, ZERO, POS};\n"
	  + "    DEFAULT = ZERO;\n"
	  + "    ONE2ONE = {ZERO};\n"
	  + "    abstract (n)\n"
	  + "      begin\n"
	  + "        n < 0 -> NEG;\n"
	  + "        n == 0 -> ZERO;\n"
	  + "        n > 0 -> POS;\n"
	  + "      end\n"
	  + "    operator + add \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> NEG;\n"
	  + "        (NEG, ZERO) -> NEG;\n"
	  + "        (NEG, POS) -> {NEG, ZERO, POS};\n"
	  + "        (ZERO, NEG) -> NEG;\n"
	  + "        (ZERO, ZERO) -> ZERO;\n"
	  + "        (ZERO, POS) -> POS;\n"
	  + "        (POS, NEG) -> {NEG, ZERO, POS};\n"
	  + "        (POS, ZERO) -> POS;\n"
	  + "        (POS, POS) -> POS;\n"
	  + "      end\n"
	  + "    operator - sub \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {NEG, ZERO, POS};\n"
	  + "        (NEG, ZERO) -> NEG;\n"
	  + "        (NEG, POS) -> NEG;\n"
	  + "        (ZERO, NEG) -> POS;\n"
	  + "        (ZERO, ZERO) -> ZERO;\n"
	  + "        (ZERO, POS) -> NEG;\n"
	  + "        (POS, NEG) -> POS;\n"
	  + "        (POS, ZERO) -> POS;\n"
	  + "        (POS, POS) -> {NEG, ZERO, POS};\n"
	  + "      end\n"
	  + "    operator * mul \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> POS;\n"
	  + "        (NEG, ZERO) -> ZERO;\n"
	  + "        (NEG, POS) -> NEG;\n"
	  + "        (ZERO, NEG) -> ZERO;\n"
	  + "        (ZERO, ZERO) -> ZERO;\n"
	  + "        (ZERO, POS) -> ZERO;\n"
	  + "        (POS, NEG) -> NEG;\n"
	  + "        (POS, ZERO) -> ZERO;\n"
	  + "        (POS, POS) -> POS;\n"
	  + "      end\n"
	  + "    operator / div \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {NEG, ZERO, POS};\n"
	  + "        (NEG, ZERO) -> T;\n"
	  + "        (NEG, POS) -> {NEG, ZERO, POS};\n"
	  + "        (ZERO, NEG) -> ZERO;\n"
	  + "        (ZERO, ZERO) -> T;\n"
	  + "        (ZERO, POS) -> ZERO;\n"
	  + "        (POS, NEG) -> {NEG, ZERO, POS};\n"
	  + "        (POS, ZERO) -> T;\n"
	  + "        (POS, POS) -> {NEG, ZERO, POS};\n"
	  + "      end\n"
	  + "    operator % rem \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {NEG, ZERO, POS};\n"
	  + "        (NEG, ZERO) -> T;\n"
	  + "        (NEG, POS) -> {NEG, ZERO, POS};\n"
	  + "        (ZERO, NEG) -> ZERO;\n"
	  + "        (ZERO, ZERO) -> T;\n"
	  + "        (ZERO, POS) -> ZERO;\n"
	  + "        (POS, NEG) -> {NEG, ZERO, POS};\n"
	  + "        (POS, ZERO) -> T;\n"
	  + "        (POS, POS) -> {NEG, ZERO, POS};\n"
	  + "      end\n"
	  + "    test == eq \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {TRUE, FALSE};\n"
	  + "        (NEG, ZERO) -> FALSE;\n"
	  + "        (NEG, POS) -> FALSE;\n"
	  + "        (ZERO, NEG) -> FALSE;\n"
	  + "        (ZERO, ZERO) -> TRUE;\n"
	  + "        (ZERO, POS) -> FALSE;\n"
	  + "        (POS, NEG) -> FALSE;\n"
	  + "        (POS, ZERO) -> FALSE;\n"
	  + "        (POS, POS) -> {TRUE, FALSE};\n"
	  + "      end\n"
	  + "    test != neq \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {TRUE, FALSE};\n"
	  + "        (NEG, ZERO) -> TRUE;\n"
	  + "        (NEG, POS) -> TRUE;\n"
	  + "        (ZERO, NEG) -> TRUE;\n"
	  + "        (ZERO, ZERO) -> FALSE;\n"
	  + "        (ZERO, POS) -> TRUE;\n"
	  + "        (POS, NEG) -> TRUE;\n"
	  + "        (POS, ZERO) -> TRUE;\n"
	  + "        (POS, POS) -> {TRUE, FALSE};\n"
	  + "      end\n"
	  + "    test < lt \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {TRUE, FALSE};\n"
	  + "        (NEG, ZERO) -> TRUE;\n"
	  + "        (NEG, POS) -> TRUE;\n"
	  + "        (ZERO, NEG) -> FALSE;\n"
	  + "        (ZERO, ZERO) -> FALSE;\n"
	  + "        (ZERO, POS) -> TRUE;\n"
	  + "        (POS, NEG) -> FALSE;\n"
	  + "        (POS, ZERO) -> FALSE;\n"
	  + "        (POS, POS) -> {TRUE, FALSE};\n"
	  + "      end\n"
	  + "    test <= le \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {TRUE, FALSE};\n"
	  + "        (NEG, ZERO) -> TRUE;\n"
	  + "        (NEG, POS) -> TRUE;\n"
	  + "        (ZERO, NEG) -> FALSE;\n"
	  + "        (ZERO, ZERO) -> TRUE;\n"
	  + "        (ZERO, POS) -> TRUE;\n"
	  + "        (POS, NEG) -> FALSE;\n"
	  + "        (POS, ZERO) -> FALSE;\n"
	  + "        (POS, POS) -> {TRUE, FALSE};\n"
	  + "      end\n"
	  + "    test > gt \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {TRUE, FALSE};\n"
	  + "        (NEG, ZERO) -> FALSE;\n"
	  + "        (NEG, POS) -> FALSE;\n"
	  + "        (ZERO, NEG) -> TRUE;\n"
	  + "        (ZERO, ZERO) -> FALSE;\n"
	  + "        (ZERO, POS) -> FALSE;\n"
	  + "        (POS, NEG) -> TRUE;\n"
	  + "        (POS, ZERO) -> TRUE;\n"
	  + "        (POS, POS) -> {TRUE, FALSE};\n"
	  + "      end\n"
	  + "    test >= ge \n"
	  + "      begin\n"
	  + "        (NEG, NEG) -> {TRUE, FALSE};\n"
	  + "        (NEG, ZERO) -> FALSE;\n"
	  + "        (NEG, POS) -> FALSE;\n"
	  + "        (ZERO, NEG) -> TRUE;\n"
	  + "        (ZERO, ZERO) -> TRUE;\n"
	  + "        (ZERO, POS) -> FALSE;\n"
	  + "        (POS, NEG) -> TRUE;\n"
	  + "        (POS, ZERO) -> TRUE;\n"
	  + "        (POS, POS) -> {TRUE, FALSE};\n"
	  + "      end\n"
	  + "  end\n"
	;
  }  
  public static String getName() {
	return "Signs";
  }  
  public static int getNumOfTokens() {
	return 3;
  }  
  public static String getToken(int value) {
	switch(value) {
	  case ZERO: return "Signs.ZERO";
	  case NEG: return "Signs.NEG";
	  case POS: return "Signs.POS";
	}
	return "Signs.???";
  }  
  public static boolean gt(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose();
	if (left$ == NEG && right$ == ZERO) return false;
	if (left$ == NEG && right$ == POS) return false;
	if (left$ == ZERO && right$ == NEG) return true;
	if (left$ == ZERO && right$ == ZERO) return false;
	if (left$ == ZERO && right$ == POS) return false;
	if (left$ == POS && right$ == NEG) return true;
	if (left$ == POS && right$ == ZERO) return true;
	if (left$ == POS && right$ == POS) return Abstraction.choose();
	throw new RuntimeException("Signs.gt(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static byte gtNoChoose(int left, int right) {
	byte result = -1;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 0;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 0;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	}
	if (result == -1) throw new RuntimeException("Signs.gtNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static byte gtSet(int leftTokens, int rightTokens) {
	byte result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = gtNoChoose(left, right);
		  else result = Abstraction.meetTest(result, gtNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static boolean isOne2One(int value) {
	switch(value) {
	  case ZERO: return true;
	}
	return false;
  }  
  public static boolean le(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose();
	if (left$ == NEG && right$ == ZERO) return true;
	if (left$ == NEG && right$ == POS) return true;
	if (left$ == ZERO && right$ == NEG) return false;
	if (left$ == ZERO && right$ == ZERO) return true;
	if (left$ == ZERO && right$ == POS) return true;
	if (left$ == POS && right$ == NEG) return false;
	if (left$ == POS && right$ == ZERO) return false;
	if (left$ == POS && right$ == POS) return Abstraction.choose();
	throw new RuntimeException("Signs.le(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static byte leNoChoose(int left, int right) {
	byte result = -1;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 0;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 0;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	}
	if (result == -1) throw new RuntimeException("Signs.leNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static byte leSet(int leftTokens, int rightTokens) {
	byte result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = leNoChoose(left, right);
		  else result = Abstraction.meetTest(result, leNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static boolean lt(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose();
	if (left$ == NEG && right$ == ZERO) return true;
	if (left$ == NEG && right$ == POS) return true;
	if (left$ == ZERO && right$ == NEG) return false;
	if (left$ == ZERO && right$ == ZERO) return false;
	if (left$ == ZERO && right$ == POS) return true;
	if (left$ == POS && right$ == NEG) return false;
	if (left$ == POS && right$ == ZERO) return false;
	if (left$ == POS && right$ == POS) return Abstraction.choose();
	throw new RuntimeException("Signs.lt(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static byte ltNoChoose(int left, int right) {
	byte result = -1;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 0;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 0;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	}
	if (result == -1) throw new RuntimeException("Signs.ltNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static byte ltSet(int leftTokens, int rightTokens) {
	byte result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = ltNoChoose(left, right);
		  else result = Abstraction.meetTest(result, ltNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static int mul(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return POS;
	if (left$ == NEG && right$ == ZERO) return ZERO;
	if (left$ == NEG && right$ == POS) return NEG;
	if (left$ == ZERO && right$ == NEG) return ZERO;
	if (left$ == ZERO && right$ == ZERO) return ZERO;
	if (left$ == ZERO && right$ == POS) return ZERO;
	if (left$ == POS && right$ == NEG) return NEG;
	if (left$ == POS && right$ == ZERO) return ZERO;
	if (left$ == POS && right$ == POS) return POS;
	throw new RuntimeException("Signs.mul(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static int mulNoChoose(int left, int right) {
	int result = 0;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 4;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 4;
			break;
		}
		break;
	}
	if (result == 0) throw new RuntimeException("Signs.mulNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static int mulSet(int leftTokens, int rightTokens) {
	int result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = mulNoChoose(left, right);
		  else result = Abstraction.meetArith(result, mulNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static boolean ne(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose();
	if (left$ == NEG && right$ == ZERO) return true;
	if (left$ == NEG && right$ == POS) return true;
	if (left$ == ZERO && right$ == NEG) return true;
	if (left$ == ZERO && right$ == ZERO) return false;
	if (left$ == ZERO && right$ == POS) return true;
	if (left$ == POS && right$ == NEG) return true;
	if (left$ == POS && right$ == ZERO) return true;
	if (left$ == POS && right$ == POS) return Abstraction.choose();
	throw new RuntimeException("Signs.ne(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static byte neNoChoose(int left, int right) {
	byte result = -1;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 0;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 2;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	}
	if (result == -1) throw new RuntimeException("Signs.neNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static byte neSet(int leftTokens, int rightTokens) {
	byte result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = neNoChoose(left, right);
		  else result = Abstraction.meetTest(result, neNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static int rem(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == NEG && right$ == ZERO) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == NEG && right$ == POS) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == ZERO && right$ == NEG) return ZERO;
	if (left$ == ZERO && right$ == ZERO) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == ZERO && right$ == POS) return ZERO;
	if (left$ == POS && right$ == NEG) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == POS && right$ == ZERO) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == POS && right$ == POS) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	throw new RuntimeException("Signs.rem(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static int remNoChoose(int left, int right) {
	int result = 0;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 7;
			break;
		  case 1:
			result = 1;
			break;
		  case 2:
			result = 1;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 7;
			break;
		  case 1:
			result = 7;
			break;
		  case 2:
			result = 7;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 7;
			break;
		  case 1:
			result = 7;
			break;
		  case 2:
			result = 7;
			break;
		}
		break;
	}
	if (result == 0) throw new RuntimeException("Signs.remNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static int remSet(int leftTokens, int rightTokens) {
	int result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = remNoChoose(left, right);
		  else result = Abstraction.meetArith(result, remNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public static int sub(int left$, int right$) {
	if (left$ == NEG && right$ == NEG) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	if (left$ == NEG && right$ == ZERO) return NEG;
	if (left$ == NEG && right$ == POS) return NEG;
	if (left$ == ZERO && right$ == NEG) return POS;
	if (left$ == ZERO && right$ == ZERO) return ZERO;
	if (left$ == ZERO && right$ == POS) return NEG;
	if (left$ == POS && right$ == NEG) return POS;
	if (left$ == POS && right$ == ZERO) return POS;
	if (left$ == POS && right$ == POS) return Abstraction.choose((1 << ZERO) | (1 << POS) | (1 << NEG));
	throw new RuntimeException("Signs.sub(" + left$ + ", " + right$ + ") is undefined");
  }  
  private static int subNoChoose(int left, int right) {
	int result = 0;
	switch (left) {
	  case 0:
		switch (right) {
		  case 0:
			result = 1;
			break;
		  case 1:
			result = 4;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	  case 1:
		switch (right) {
		  case 0:
			result = 2;
			break;
		  case 1:
			result = 7;
			break;
		  case 2:
			result = 2;
			break;
		}
		break;
	  case 2:
		switch (right) {
		  case 0:
			result = 4;
			break;
		  case 1:
			result = 4;
			break;
		  case 2:
			result = 7;
			break;
		}
		break;
	}
	if (result == 0) throw new RuntimeException("Signs.subNoChoose(" + left + ", " + right + ") is undefined");
	return result;
  }  
  public static int subSet(int leftTokens, int rightTokens) {
	int result = -1;
	for (int left = 0; (1 << left) <= leftTokens; left++) {
	  if ((leftTokens & (1 << left)) == 0) continue;
	  for (int right = 0; (1 << right) <= rightTokens; right++) {
		if ((rightTokens & (1 << right)) != 0) {
		  if (result == -1) result = subNoChoose(left, right);
		  else result = Abstraction.meetArith(result, subNoChoose(left, right));
		}
	  }
	}
	return result;
  }  
  public String toString() {
	return getName();
  }  
  public static Signs v() {
	return v;
  }  
}
