package edu.ksu.cis.bandera.abstraction.specification.parser;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import edu.ksu.cis.bandera.abstraction.specification.node.*;
import edu.ksu.cis.bandera.abstraction.specification.analysis.*;

class TokenIndex extends AnalysisAdapter
{
	int index;

	public void caseEOF(EOF node)
	{
		index = 55;
	}
	public void caseTAbstract(TAbstract node)
	{
		index = 37;
	}
	public void caseTAbstraction(TAbstraction node)
	{
		index = 34;
	}
	public void caseTAbtract(TAbtract node)
	{
		index = 41;
	}
	public void caseTAnd(TAnd node)
	{
		index = 15;
	}
	public void caseTAny(TAny node)
	{
		index = 32;
	}
	public void caseTBegin(TBegin node)
	{
		index = 35;
	}
	public void caseTBitAnd(TBitAnd node)
	{
		index = 30;
	}
	public void caseTBitComplement(TBitComplement node)
	{
		index = 21;
	}
	public void caseTBitOr(TBitOr node)
	{
		index = 29;
	}
	public void caseTBitXor(TBitXor node)
	{
		index = 28;
	}
	public void caseTColon(TColon node)
	{
		index = 5;
	}
	public void caseTComma(TComma node)
	{
		index = 6;
	}
	public void caseTDecIntLiteral(TDecIntLiteral node)
	{
		index = 46;
	}
	public void caseTDecLongLiteral(TDecLongLiteral node)
	{
		index = 49;
	}
	public void caseTDefault(TDefault node)
	{
		index = 39;
	}
	public void caseTDiv(TDiv node)
	{
		index = 26;
	}
	public void caseTDot(TDot node)
	{
		index = 7;
	}
	public void caseTDoubleLiteral(TDoubleLiteral node)
	{
		index = 52;
	}
	public void caseTEnd(TEnd node)
	{
		index = 36;
	}
	public void caseTEq(TEq node)
	{
		index = 9;
	}
	public void caseTEqual(TEqual node)
	{
		index = 8;
	}
	public void caseTExtends(TExtends node)
	{
		index = 33;
	}
	public void caseTFloatLiteral(TFloatLiteral node)
	{
		index = 53;
	}
	public void caseTGreater(TGreater node)
	{
		index = 11;
	}
	public void caseTGreaterEqual(TGreaterEqual node)
	{
		index = 13;
	}
	public void caseTHexIntLiteral(THexIntLiteral node)
	{
		index = 47;
	}
	public void caseTHexLongLiteral(THexLongLiteral node)
	{
		index = 50;
	}
	public void caseTId(TId node)
	{
		index = 54;
	}
	public void caseTIntegral(TIntegral node)
	{
		index = 44;
	}
	public void caseTLBrace(TLBrace node)
	{
		index = 2;
	}
	public void caseTLess(TLess node)
	{
		index = 10;
	}
	public void caseTLessEqual(TLessEqual node)
	{
		index = 12;
	}
	public void caseTLParen(TLParen node)
	{
		index = 0;
	}
	public void caseTMinus(TMinus node)
	{
		index = 24;
	}
	public void caseTMod(TMod node)
	{
		index = 27;
	}
	public void caseTNot(TNot node)
	{
		index = 20;
	}
	public void caseTNotEqual(TNotEqual node)
	{
		index = 14;
	}
	public void caseTOctIntLiteral(TOctIntLiteral node)
	{
		index = 48;
	}
	public void caseTOctLongLiteral(TOctLongLiteral node)
	{
		index = 51;
	}
	public void caseTOne2one(TOne2one node)
	{
		index = 40;
	}
	public void caseTOperator(TOperator node)
	{
		index = 45;
	}
	public void caseTOr(TOr node)
	{
		index = 16;
	}
	public void caseTPlus(TPlus node)
	{
		index = 23;
	}
	public void caseTQuestion(TQuestion node)
	{
		index = 22;
	}
	public void caseTRBrace(TRBrace node)
	{
		index = 3;
	}
	public void caseTReal(TReal node)
	{
		index = 43;
	}
	public void caseTRightarrow(TRightarrow node)
	{
		index = 31;
	}
	public void caseTRParen(TRParen node)
	{
		index = 1;
	}
	public void caseTSemicolon(TSemicolon node)
	{
		index = 4;
	}
	public void caseTShiftLeft(TShiftLeft node)
	{
		index = 17;
	}
	public void caseTSignedShiftRight(TSignedShiftRight node)
	{
		index = 18;
	}
	public void caseTTest(TTest node)
	{
		index = 42;
	}
	public void caseTTimes(TTimes node)
	{
		index = 25;
	}
	public void caseTTokens(TTokens node)
	{
		index = 38;
	}
	public void caseTUnsignedShiftRight(TUnsignedShiftRight node)
	{
		index = 19;
	}
}
