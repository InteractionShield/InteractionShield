package edu.ksu.cis.bandera.abstraction.specification.node;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import java.util.*;
import edu.ksu.cis.bandera.abstraction.specification.analysis.*;

public final class AUnit extends PUnit
{
	private TAbstraction _abstraction_;
	private TId _id_;
	private TExtends _extends_;
	private PType _type_;
	private TBegin _begin_;
	private PTokenSet _tokenSet_;
	private PDefaultToken _defaultToken_;
	private POne2oneSet _one2oneSet_;
	private PAbstractFunction _abstractFunction_;
	private final LinkedList _operatorTest_ = new TypedLinkedList(new OperatorTest_Cast());
	private TEnd _end_;

	private class OperatorTest_Cast implements Cast
	{
		public Object cast(Object o)
		{
			POperatorTest node = (POperatorTest) o;

			if((node.parent() != null) &&
				(node.parent() != AUnit.this))
			{
				node.parent().removeChild(node);
			}

			if((node.parent() == null) ||
				(node.parent() != AUnit.this))
			{
				node.parent(AUnit.this);
			}

			return node;
		}
	}
	public AUnit()
	{
	}
	public AUnit(
		TAbstraction _abstraction_,
		TId _id_,
		TExtends _extends_,
		PType _type_,
		TBegin _begin_,
		PTokenSet _tokenSet_,
		PDefaultToken _defaultToken_,
		POne2oneSet _one2oneSet_,
		PAbstractFunction _abstractFunction_,
		XPOperatorTest _operatorTest_,
		TEnd _end_)
	{
		setAbstraction(_abstraction_);

		setId(_id_);

		setExtends(_extends_);

		setType(_type_);

		setBegin(_begin_);

		setTokenSet(_tokenSet_);

		setDefaultToken(_defaultToken_);

		setOne2oneSet(_one2oneSet_);

		setAbstractFunction(_abstractFunction_);

		if(_operatorTest_ != null)
		{
			while(_operatorTest_ instanceof X1POperatorTest)
			{
				this._operatorTest_.addFirst(((X1POperatorTest) _operatorTest_).getPOperatorTest());
				_operatorTest_ = ((X1POperatorTest) _operatorTest_).getXPOperatorTest();
			}
			this._operatorTest_.addFirst(((X2POperatorTest) _operatorTest_).getPOperatorTest());
		}

		setEnd(_end_);

	}
	public AUnit(
		TAbstraction _abstraction_,
		TId _id_,
		TExtends _extends_,
		PType _type_,
		TBegin _begin_,
		PTokenSet _tokenSet_,
		PDefaultToken _defaultToken_,
		POne2oneSet _one2oneSet_,
		PAbstractFunction _abstractFunction_,
		List _operatorTest_,
		TEnd _end_)
	{
		setAbstraction(_abstraction_);

		setId(_id_);

		setExtends(_extends_);

		setType(_type_);

		setBegin(_begin_);

		setTokenSet(_tokenSet_);

		setDefaultToken(_defaultToken_);

		setOne2oneSet(_one2oneSet_);

		setAbstractFunction(_abstractFunction_);

		{
			Object temp[] = _operatorTest_.toArray();
			for(int i = 0; i < temp.length; i++)
			{
				this._operatorTest_.add(temp[i]);
			}
		}

		setEnd(_end_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAUnit(this);
	}
	public Object clone()
	{
		return new AUnit(
			(TAbstraction) cloneNode(_abstraction_),
			(TId) cloneNode(_id_),
			(TExtends) cloneNode(_extends_),
			(PType) cloneNode(_type_),
			(TBegin) cloneNode(_begin_),
			(PTokenSet) cloneNode(_tokenSet_),
			(PDefaultToken) cloneNode(_defaultToken_),
			(POne2oneSet) cloneNode(_one2oneSet_),
			(PAbstractFunction) cloneNode(_abstractFunction_),
			cloneList(_operatorTest_),
			(TEnd) cloneNode(_end_));
	}
	public PAbstractFunction getAbstractFunction()
	{
		return _abstractFunction_;
	}
	public TAbstraction getAbstraction()
	{
		return _abstraction_;
	}
	public TBegin getBegin()
	{
		return _begin_;
	}
	public PDefaultToken getDefaultToken()
	{
		return _defaultToken_;
	}
	public TEnd getEnd()
	{
		return _end_;
	}
	public TExtends getExtends()
	{
		return _extends_;
	}
	public TId getId()
	{
		return _id_;
	}
	public POne2oneSet getOne2oneSet()
	{
		return _one2oneSet_;
	}
	public LinkedList getOperatorTest()
	{
		return _operatorTest_;
	}
	public PTokenSet getTokenSet()
	{
		return _tokenSet_;
	}
	public PType getType()
	{
		return _type_;
	}
	void removeChild(Node child)
	{
		if(_abstraction_ == child)
		{
			_abstraction_ = null;
			return;
		}

		if(_id_ == child)
		{
			_id_ = null;
			return;
		}

		if(_extends_ == child)
		{
			_extends_ = null;
			return;
		}

		if(_type_ == child)
		{
			_type_ = null;
			return;
		}

		if(_begin_ == child)
		{
			_begin_ = null;
			return;
		}

		if(_tokenSet_ == child)
		{
			_tokenSet_ = null;
			return;
		}

		if(_defaultToken_ == child)
		{
			_defaultToken_ = null;
			return;
		}

		if(_one2oneSet_ == child)
		{
			_one2oneSet_ = null;
			return;
		}

		if(_abstractFunction_ == child)
		{
			_abstractFunction_ = null;
			return;
		}

		if(_operatorTest_.remove(child))
		{
			return;
		}

		if(_end_ == child)
		{
			_end_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_abstraction_ == oldChild)
		{
			setAbstraction((TAbstraction) newChild);
			return;
		}

		if(_id_ == oldChild)
		{
			setId((TId) newChild);
			return;
		}

		if(_extends_ == oldChild)
		{
			setExtends((TExtends) newChild);
			return;
		}

		if(_type_ == oldChild)
		{
			setType((PType) newChild);
			return;
		}

		if(_begin_ == oldChild)
		{
			setBegin((TBegin) newChild);
			return;
		}

		if(_tokenSet_ == oldChild)
		{
			setTokenSet((PTokenSet) newChild);
			return;
		}

		if(_defaultToken_ == oldChild)
		{
			setDefaultToken((PDefaultToken) newChild);
			return;
		}

		if(_one2oneSet_ == oldChild)
		{
			setOne2oneSet((POne2oneSet) newChild);
			return;
		}

		if(_abstractFunction_ == oldChild)
		{
			setAbstractFunction((PAbstractFunction) newChild);
			return;
		}

		for(ListIterator i = _operatorTest_.listIterator(); i.hasNext();)
		{
			if(i.next() == oldChild)
			{
				if(newChild != null)
				{
					i.set(newChild);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		if(_end_ == oldChild)
		{
			setEnd((TEnd) newChild);
			return;
		}

	}
	public void setAbstractFunction(PAbstractFunction node)
	{
		if(_abstractFunction_ != null)
		{
			_abstractFunction_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_abstractFunction_ = node;
	}
	public void setAbstraction(TAbstraction node)
	{
		if(_abstraction_ != null)
		{
			_abstraction_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_abstraction_ = node;
	}
	public void setBegin(TBegin node)
	{
		if(_begin_ != null)
		{
			_begin_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_begin_ = node;
	}
	public void setDefaultToken(PDefaultToken node)
	{
		if(_defaultToken_ != null)
		{
			_defaultToken_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_defaultToken_ = node;
	}
	public void setEnd(TEnd node)
	{
		if(_end_ != null)
		{
			_end_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_end_ = node;
	}
	public void setExtends(TExtends node)
	{
		if(_extends_ != null)
		{
			_extends_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_extends_ = node;
	}
	public void setId(TId node)
	{
		if(_id_ != null)
		{
			_id_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_id_ = node;
	}
	public void setOne2oneSet(POne2oneSet node)
	{
		if(_one2oneSet_ != null)
		{
			_one2oneSet_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_one2oneSet_ = node;
	}
	public void setOperatorTest(List list)
	{
		Object temp[] = list.toArray();
		for(int i = 0; i < temp.length; i++)
		{
			_operatorTest_.add(temp[i]);
		}
	}
	public void setTokenSet(PTokenSet node)
	{
		if(_tokenSet_ != null)
		{
			_tokenSet_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_tokenSet_ = node;
	}
	public void setType(PType node)
	{
		if(_type_ != null)
		{
			_type_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_type_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_abstraction_)
			+ toString(_id_)
			+ toString(_extends_)
			+ toString(_type_)
			+ toString(_begin_)
			+ toString(_tokenSet_)
			+ toString(_defaultToken_)
			+ toString(_one2oneSet_)
			+ toString(_abstractFunction_)
			+ toString(_operatorTest_)
			+ toString(_end_);
	}
}
