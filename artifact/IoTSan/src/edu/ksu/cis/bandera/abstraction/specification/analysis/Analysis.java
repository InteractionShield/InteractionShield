package edu.ksu.cis.bandera.abstraction.specification.analysis;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import edu.ksu.cis.bandera.abstraction.specification.node.*;

public interface Analysis extends Switch
{
	void caseAAbstractFunction(AAbstractFunction node);
	void caseAAddExpShiftExp(AAddExpShiftExp node);
	void caseAAndAndExp(AAndAndExp node);
	void caseAAndBitAndExp(AAndBitAndExp node);
	void caseAAndExclusiveOrExp(AAndExclusiveOrExp node);
	void caseAAndOrExp(AAndOrExp node);
	void caseAAnyAbstractDef(AAnyAbstractDef node);
	void caseAAnyAnyId(AAnyAnyId node);
	void caseAAnyPattern(AAnyPattern node);
	void caseABitComplementUnaryNotPlusMinusExp(ABitComplementUnaryNotPlusMinusExp node);
	void caseAComplementUnaryNotPlusMinusExp(AComplementUnaryNotPlusMinusExp node);
	void caseADecIntLiteral(ADecIntLiteral node);
	void caseADecLongLiteral(ADecLongLiteral node);
	void caseADefaultToken(ADefaultToken node);
	void caseADivMultExp(ADivMultExp node);
	void caseADivOp(ADivOp node);
	void caseADoubleLiteral(ADoubleLiteral node);
	void caseAEqBitAndExp(AEqBitAndExp node);
	void caseAEqEqExp(AEqEqExp node);
	void caseAEqualTOp(AEqualTOp node);
	void caseAExp(AExp node);
	void caseAExpAbstractDef(AExpAbstractDef node);
	void caseAFloatLiteral(AFloatLiteral node);
	void caseAGreaterEqualRelExp(AGreaterEqualRelExp node);
	void caseAGreaterEqualTOp(AGreaterEqualTOp node);
	void caseAGreaterRelExp(AGreaterRelExp node);
	void caseAGreaterTOp(AGreaterTOp node);
	void caseAHexIntLiteral(AHexIntLiteral node);
	void caseAHexLongLiteral(AHexLongLiteral node);
	void caseAIdAnyId(AIdAnyId node);
	void caseAIdIdList(AIdIdList node);
	void caseAIdPrimaryExp(AIdPrimaryExp node);
	void caseAIdSet(AIdSet node);
	void caseAIdsIdList(AIdsIdList node);
	void caseAInclusiveOrAndExp(AInclusiveOrAndExp node);
	void caseAIntegralType(AIntegralType node);
	void caseALeftShiftExp(ALeftShiftExp node);
	void caseALessEqualRelExp(ALessEqualRelExp node);
	void caseALessEqualTOp(ALessEqualTOp node);
	void caseALessRelExp(ALessRelExp node);
	void caseALessTOp(ALessTOp node);
	void caseALiteralPrimaryExp(ALiteralPrimaryExp node);
	void caseAMinusAddExp(AMinusAddExp node);
	void caseAMinusOp(AMinusOp node);
	void caseAMinusUnaryExp(AMinusUnaryExp node);
	void caseAModMultExp(AModMultExp node);
	void caseAModOp(AModOp node);
	void caseAMultAddExp(AMultAddExp node);
	void caseANeqEqExp(ANeqEqExp node);
	void caseANotEqualTOp(ANotEqualTOp node);
	void caseAOctIntLiteral(AOctIntLiteral node);
	void caseAOctLongLiteral(AOctLongLiteral node);
	void caseAOne2oneSet(AOne2oneSet node);
	void caseAOperator(AOperator node);
	void caseAOperatorOperatorTest(AOperatorOperatorTest node);
	void caseAOrConditionalExp(AOrConditionalExp node);
	void caseAOrInclusiveOrExp(AOrInclusiveOrExp node);
	void caseAOrOrExp(AOrOrExp node);
	void caseAParenPrimaryExp(AParenPrimaryExp node);
	void caseAPatternPattern(APatternPattern node);
	void caseAPlusAddExp(APlusAddExp node);
	void caseAPlusOp(APlusOp node);
	void caseAPlusUnaryExp(APlusUnaryExp node);
	void caseAPrimaryUnaryNotPlusMinusExp(APrimaryUnaryNotPlusMinusExp node);
	void caseAQuestionConditionalExp(AQuestionConditionalExp node);
	void caseARealType(ARealType node);
	void caseARelEqExp(ARelEqExp node);
	void caseAShiftRelExp(AShiftRelExp node);
	void caseASignedRightShiftExp(ASignedRightShiftExp node);
	void caseATest(ATest node);
	void caseATestOperatorTest(ATestOperatorTest node);
	void caseATimesMultExp(ATimesMultExp node);
	void caseATimesOp(ATimesOp node);
	void caseATokenSet(ATokenSet node);
	void caseATokenSetTokenTokenSet(ATokenSetTokenTokenSet node);
	void caseATokenTokenTokenSet(ATokenTokenTokenSet node);
	void caseAUnaryExpMultExp(AUnaryExpMultExp node);
	void caseAUnaryNotPlusMinusUnaryExp(AUnaryNotPlusMinusUnaryExp node);
	void caseAUnit(AUnit node);
	void caseAUnsignedRightShiftExp(AUnsignedRightShiftExp node);
	void caseAXorExclusiveOrExp(AXorExclusiveOrExp node);
	void caseAXorInclusiveOrExp(AXorInclusiveOrExp node);
	void caseEOF(EOF node);
	void caseStart(Start node);
	void caseTAbstract(TAbstract node);
	void caseTAbstraction(TAbstraction node);
	void caseTAbtract(TAbtract node);
	void caseTAnd(TAnd node);
	void caseTAny(TAny node);
	void caseTBegin(TBegin node);
	void caseTBitAnd(TBitAnd node);
	void caseTBitComplement(TBitComplement node);
	void caseTBitOr(TBitOr node);
	void caseTBitXor(TBitXor node);
	void caseTColon(TColon node);
	void caseTComma(TComma node);
	void caseTDecIntLiteral(TDecIntLiteral node);
	void caseTDecLongLiteral(TDecLongLiteral node);
	void caseTDefault(TDefault node);
	void caseTDiv(TDiv node);
	void caseTDocumentationComment(TDocumentationComment node);
	void caseTDot(TDot node);
	void caseTDoubleLiteral(TDoubleLiteral node);
	void caseTEnd(TEnd node);
	void caseTEndOfLineComment(TEndOfLineComment node);
	void caseTEq(TEq node);
	void caseTEqual(TEqual node);
	void caseTExtends(TExtends node);
	void caseTFloatLiteral(TFloatLiteral node);
	void caseTGreater(TGreater node);
	void caseTGreaterEqual(TGreaterEqual node);
	void caseTHexIntLiteral(THexIntLiteral node);
	void caseTHexLongLiteral(THexLongLiteral node);
	void caseTId(TId node);
	void caseTIntegral(TIntegral node);
	void caseTLBrace(TLBrace node);
	void caseTLess(TLess node);
	void caseTLessEqual(TLessEqual node);
	void caseTLParen(TLParen node);
	void caseTMinus(TMinus node);
	void caseTMod(TMod node);
	void caseTNot(TNot node);
	void caseTNotEqual(TNotEqual node);
	void caseTOctIntLiteral(TOctIntLiteral node);
	void caseTOctLongLiteral(TOctLongLiteral node);
	void caseTOne2one(TOne2one node);
	void caseTOperator(TOperator node);
	void caseTOr(TOr node);
	void caseTPlus(TPlus node);
	void caseTQuestion(TQuestion node);
	void caseTRBrace(TRBrace node);
	void caseTReal(TReal node);
	void caseTRightarrow(TRightarrow node);
	void caseTRParen(TRParen node);
	void caseTSemicolon(TSemicolon node);
	void caseTShiftLeft(TShiftLeft node);
	void caseTSignedShiftRight(TSignedShiftRight node);
	void caseTTest(TTest node);
	void caseTTimes(TTimes node);
	void caseTTokens(TTokens node);
	void caseTTraditionalComment(TTraditionalComment node);
	void caseTUnsignedShiftRight(TUnsignedShiftRight node);
	void caseTWhiteSpace(TWhiteSpace node);
	Object getIn(Node node);
	Object getOut(Node node);
	void setIn(Node node, Object in);
	void setOut(Node node, Object out);
}
