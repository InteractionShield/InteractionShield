package edu.ksu.cis.bandera.abstraction.specification.parser;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import edu.ksu.cis.bandera.abstraction.specification.lexer.*;
import edu.ksu.cis.bandera.abstraction.specification.node.*;
import edu.ksu.cis.bandera.abstraction.specification.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
	public final Analysis ignoredTokens = new AnalysisAdapter();

	protected Node node;

	private final Lexer lexer;
	private final ListIterator stack = new LinkedList().listIterator();
	private int last_shift;
	private int last_pos;
	private int last_line;
	private final TokenIndex converter = new TokenIndex();
	private final int[] action = new int[2];

	private final static int SHIFT = 0;
	private final static int REDUCE = 1;
	private final static int ACCEPT = 2;
	private final static int ERROR = 3;

	private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {34, SHIFT, 1}, },
			{{-1, ERROR, 1}, {54, SHIFT, 3}, },
			{{-1, ERROR, 2}, {55, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {33, SHIFT, 4}, },
			{{-1, ERROR, 4}, {43, SHIFT, 5}, {44, SHIFT, 6}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 7}, {35, SHIFT, 8}, },
			{{-1, ERROR, 8}, {38, SHIFT, 9}, },
			{{-1, ERROR, 9}, {9, SHIFT, 11}, },
			{{-1, ERROR, 10}, {37, SHIFT, 12}, {39, SHIFT, 13}, {40, SHIFT, 14}, },
			{{-1, ERROR, 11}, {2, SHIFT, 18}, },
			{{-1, ERROR, 12}, {0, SHIFT, 20}, },
			{{-1, ERROR, 13}, {9, SHIFT, 21}, },
			{{-1, ERROR, 14}, {9, SHIFT, 22}, },
			{{-1, ERROR, 15}, {37, SHIFT, 12}, {40, SHIFT, 14}, },
			{{-1, ERROR, 16}, {37, SHIFT, 12}, },
			{{-1, ERROR, 17}, {36, SHIFT, 26}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, ERROR, 18}, {54, SHIFT, 33}, },
			{{-1, ERROR, 19}, {4, SHIFT, 35}, },
			{{-1, ERROR, 20}, {54, SHIFT, 36}, },
			{{-1, ERROR, 21}, {54, SHIFT, 37}, },
			{{-1, ERROR, 22}, {2, SHIFT, 38}, },
			{{-1, ERROR, 23}, {37, SHIFT, 12}, },
			{{-1, ERROR, 24}, {36, SHIFT, 40}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, ERROR, 25}, {36, SHIFT, 42}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 27}, {8, SHIFT, 44}, {10, SHIFT, 45}, {11, SHIFT, 46}, {12, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, },
			{{-1, ERROR, 28}, {23, SHIFT, 51}, {24, SHIFT, 52}, {25, SHIFT, 53}, {26, SHIFT, 54}, {27, SHIFT, 55}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 32}, {36, SHIFT, 57}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 34}, {3, SHIFT, 59}, {6, SHIFT, 60}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 36}, {1, SHIFT, 61}, },
			{{-1, ERROR, 37}, {4, SHIFT, 62}, },
			{{-1, ERROR, 38}, {3, SHIFT, 63}, {54, SHIFT, 33}, },
			{{-1, ERROR, 39}, {36, SHIFT, 65}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 41}, {36, SHIFT, 67}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 43}, {36, SHIFT, 68}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 50}, {54, SHIFT, 69}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 56}, {54, SHIFT, 70}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 60}, {54, SHIFT, 71}, },
			{{-1, ERROR, 61}, {35, SHIFT, 72}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 63}, {4, SHIFT, 73}, },
			{{-1, ERROR, 64}, {3, SHIFT, 74}, {6, SHIFT, 60}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 66}, {36, SHIFT, 75}, {42, SHIFT, 27}, {45, SHIFT, 28}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 69}, {35, SHIFT, 76}, },
			{{-1, ERROR, 70}, {35, SHIFT, 77}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 72}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {32, SHIFT, 83}, {36, SHIFT, 84}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 74}, {4, SHIFT, 112}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 76}, {0, SHIFT, 113}, {32, SHIFT, 114}, {36, SHIFT, 115}, },
			{{-1, ERROR, 77}, {0, SHIFT, 113}, {32, SHIFT, 114}, {36, SHIFT, 118}, },
			{{-1, ERROR, 78}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 79}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 80}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 81}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 82}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 83}, {31, SHIFT, 125}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 63}, {25, SHIFT, 126}, {26, SHIFT, 127}, {27, SHIFT, 128}, },
			{{-1, REDUCE, 66}, {23, SHIFT, 129}, {24, SHIFT, 130}, },
			{{-1, REDUCE, 70}, {17, SHIFT, 131}, {18, SHIFT, 132}, {19, SHIFT, 133}, },
			{{-1, REDUCE, 75}, {10, SHIFT, 134}, {11, SHIFT, 135}, {12, SHIFT, 136}, {13, SHIFT, 137}, },
			{{-1, REDUCE, 78}, {8, SHIFT, 138}, {14, SHIFT, 139}, },
			{{-1, REDUCE, 80}, {30, SHIFT, 140}, },
			{{-1, REDUCE, 82}, {28, SHIFT, 141}, },
			{{-1, REDUCE, 84}, {29, SHIFT, 142}, },
			{{-1, REDUCE, 86}, {15, SHIFT, 143}, },
			{{-1, REDUCE, 88}, {16, SHIFT, 144}, {22, SHIFT, 145}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 109}, {31, SHIFT, 146}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 111}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {32, SHIFT, 83}, {36, SHIFT, 147}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 113}, {32, SHIFT, 149}, {54, SHIFT, 150}, },
			{{-1, ERROR, 114}, {31, SHIFT, 152}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 117}, {0, SHIFT, 113}, {32, SHIFT, 114}, {36, SHIFT, 153}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 119}, {0, SHIFT, 113}, {32, SHIFT, 114}, {36, SHIFT, 155}, },
			{{-1, ERROR, 120}, {1, SHIFT, 156}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 125}, {54, SHIFT, 157}, },
			{{-1, ERROR, 126}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 127}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 128}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 129}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 130}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 131}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 132}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 133}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 134}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 135}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 136}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 137}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 138}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 139}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 140}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 141}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 142}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 143}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 144}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 145}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, ERROR, 146}, {54, SHIFT, 178}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 151}, {6, SHIFT, 179}, },
			{{-1, ERROR, 152}, {2, SHIFT, 18}, {54, SHIFT, 180}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 157}, {4, SHIFT, 183}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 64}, {25, SHIFT, 126}, {26, SHIFT, 127}, {27, SHIFT, 128}, },
			{{-1, REDUCE, 65}, {25, SHIFT, 126}, {26, SHIFT, 127}, {27, SHIFT, 128}, },
			{{-1, REDUCE, 67}, {23, SHIFT, 129}, {24, SHIFT, 130}, },
			{{-1, REDUCE, 68}, {23, SHIFT, 129}, {24, SHIFT, 130}, },
			{{-1, REDUCE, 69}, {23, SHIFT, 129}, {24, SHIFT, 130}, },
			{{-1, REDUCE, 71}, {17, SHIFT, 131}, {18, SHIFT, 132}, {19, SHIFT, 133}, },
			{{-1, REDUCE, 72}, {17, SHIFT, 131}, {18, SHIFT, 132}, {19, SHIFT, 133}, },
			{{-1, REDUCE, 73}, {17, SHIFT, 131}, {18, SHIFT, 132}, {19, SHIFT, 133}, },
			{{-1, REDUCE, 74}, {17, SHIFT, 131}, {18, SHIFT, 132}, {19, SHIFT, 133}, },
			{{-1, REDUCE, 76}, {10, SHIFT, 134}, {11, SHIFT, 135}, {12, SHIFT, 136}, {13, SHIFT, 137}, },
			{{-1, REDUCE, 77}, {10, SHIFT, 134}, {11, SHIFT, 135}, {12, SHIFT, 136}, {13, SHIFT, 137}, },
			{{-1, REDUCE, 79}, {8, SHIFT, 138}, {14, SHIFT, 139}, },
			{{-1, REDUCE, 81}, {30, SHIFT, 140}, },
			{{-1, REDUCE, 83}, {28, SHIFT, 141}, },
			{{-1, REDUCE, 85}, {29, SHIFT, 142}, },
			{{-1, REDUCE, 87}, {15, SHIFT, 143}, },
			{{-1, ERROR, 177}, {5, SHIFT, 184}, },
			{{-1, ERROR, 178}, {4, SHIFT, 185}, },
			{{-1, ERROR, 179}, {32, SHIFT, 149}, {54, SHIFT, 150}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 182}, {4, SHIFT, 187}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 184}, {0, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, {23, SHIFT, 81}, {24, SHIFT, 82}, {46, SHIFT, 85}, {47, SHIFT, 86}, {48, SHIFT, 87}, {49, SHIFT, 88}, {50, SHIFT, 89}, {51, SHIFT, 90}, {52, SHIFT, 91}, {53, SHIFT, 92}, {54, SHIFT, 93}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 186}, {1, SHIFT, 189}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 189}, {31, SHIFT, 190}, },
			{{-1, ERROR, 190}, {2, SHIFT, 18}, {54, SHIFT, 180}, },
			{{-1, ERROR, 191}, {4, SHIFT, 192}, },
			{{-1, REDUCE, 37}, },
		};*/
	private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, },
			{{-1, 10}, },
			{{-1, 15}, },
			{{-1, 181}, {11, 19}, },
			{{-1, 34}, {38, 64}, },
			{{-1, 16}, {15, 23}, },
			{{-1, 17}, {15, 24}, {16, 25}, {23, 39}, },
			{{-1, 94}, {111, 148}, },
			{{-1, 29}, {32, 58}, {41, 58}, {43, 58}, {66, 58}, },
			{{-1, 30}, },
			{{-1, 56}, },
			{{-1, 116}, {117, 154}, {119, 154}, },
			{{-1, 151}, {179, 186}, },
			{{-1, 182}, {190, 191}, },
			{{-1, 31}, },
			{{-1, 50}, },
			{{-1, 95}, },
			{{-1, 96}, },
			{{-1, 97}, {79, 121}, {80, 122}, {81, 123}, {82, 124}, {126, 158}, {127, 159}, {128, 160}, },
			{{-1, 98}, {129, 161}, {130, 162}, },
			{{-1, 99}, {131, 163}, {132, 164}, {133, 165}, },
			{{-1, 100}, {134, 166}, {135, 167}, {136, 168}, {137, 169}, },
			{{-1, 101}, {138, 170}, {139, 171}, },
			{{-1, 102}, {140, 172}, },
			{{-1, 103}, {141, 173}, },
			{{-1, 104}, {142, 174}, },
			{{-1, 105}, {143, 175}, },
			{{-1, 106}, {144, 176}, },
			{{-1, 107}, },
			{{-1, 108}, {184, 188}, },
			{{-1, 109}, {78, 120}, {145, 177}, },
			{{-1, 110}, },
			{{-1, 32}, {24, 41}, {25, 43}, {39, 66}, },
			{{-1, 111}, },
			{{-1, 117}, {77, 119}, },
		};*/
	private static String[] errorMessages;
/*      {
			"TAbstraction expected.",
			"TId expected.",
			"EOF expected.",
			"TExtends expected.",
			"TReal TIntegral expected.",
			"TBegin expected.",
			"TTokens expected.",
			"TEq expected.",
			"TAbstract TDefault TOne2one expected.",
			"TLBrace expected.",
			"TLParen expected.",
			"TAbstract TOne2one expected.",
			"TAbstract expected.",
			"TEnd TTest TOperator expected.",
			"TSemicolon expected.",
			"TEqual TLess TGreater TLessEqual TGreaterEqual TNotEqual expected.",
			"TPlus TMinus TTimes TDiv TMod expected.",
			"TRBrace TComma expected.",
			"TRParen expected.",
			"TRBrace TId expected.",
			"TLParen TNot TBitComplement TPlus TMinus TAny TEnd TDecIntLiteral THexIntLiteral TOctIntLiteral TDecLongLiteral THexLongLiteral TOctLongLiteral TDoubleLiteral TFloatLiteral TId expected.",
			"TLParen TAny TEnd expected.",
			"TLParen TNot TBitComplement TPlus TMinus TDecIntLiteral THexIntLiteral TOctIntLiteral TDecLongLiteral THexLongLiteral TOctLongLiteral TDoubleLiteral TFloatLiteral TId expected.",
			"TRightarrow expected.",
			"TRParen TColon TEqual TLess TGreater TLessEqual TGreaterEqual TNotEqual TAnd TOr TShiftLeft TSignedShiftRight TUnsignedShiftRight TQuestion TPlus TMinus TTimes TDiv TMod TBitXor TBitOr TBitAnd TRightarrow expected.",
			"TRParen TColon TEqual TLess TGreater TLessEqual TGreaterEqual TNotEqual TAnd TOr TShiftLeft TSignedShiftRight TUnsignedShiftRight TQuestion TPlus TMinus TBitXor TBitOr TBitAnd TRightarrow expected.",
			"TRParen TColon TEqual TLess TGreater TLessEqual TGreaterEqual TNotEqual TAnd TOr TShiftLeft TSignedShiftRight TUnsignedShiftRight TQuestion TBitXor TBitOr TBitAnd TRightarrow expected.",
			"TRParen TColon TEqual TLess TGreater TLessEqual TGreaterEqual TNotEqual TAnd TOr TQuestion TBitXor TBitOr TBitAnd TRightarrow expected.",
			"TRParen TColon TEqual TNotEqual TAnd TOr TQuestion TBitXor TBitOr TBitAnd TRightarrow expected.",
			"TRParen TColon TAnd TOr TQuestion TBitXor TBitOr TBitAnd TRightarrow expected.",
			"TRParen TColon TAnd TOr TQuestion TBitXor TBitOr TRightarrow expected.",
			"TRParen TColon TAnd TOr TQuestion TBitOr TRightarrow expected.",
			"TRParen TColon TAnd TOr TQuestion TRightarrow expected.",
			"TRParen TColon TOr TQuestion TRightarrow expected.",
			"TRParen TColon TRightarrow expected.",
			"TAny TId expected.",
			"TRParen TComma expected.",
			"TComma expected.",
			"TLBrace TId expected.",
			"TColon expected.",
		};*/
	private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 7, 7, 11, 12, 13, 1, 14, 1, 1, 9, 12, 13, 13, 2, 15, 16, 13, 13, 13, 13, 17, 17, 8, 18, 14, 19, 13, 2, 13, 2, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 13, 14, 1, 5, 11, 14, 17, 2, 13, 2, 2, 5, 5, 17, 20, 12, 14, 2, 21, 21, 22, 22, 22, 22, 22, 23, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 20, 24, 24, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 23, 24, 20, 12, 35, 23, 13, 21, 21, 13, 21, 18, 24, 24, 24, 24, 1, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 1, 13, 20, 36, 36, 37, 38, 13, 21, 13, 24, 14, 24, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 27, 27, 28, 29, 30, 31, 32, 39, 14, 35, 14, 14, 14, 20, 22, 20, 18, 21, 34, 23, 38, 14, 21, 
		};*/
	public Parser(Lexer lexer)
	{
		this.lexer = lexer;

		if(actionTable == null)
		{
			try
			{
				DataInputStream s = new DataInputStream(
					new BufferedInputStream(
					Parser.class.getResourceAsStream("parser.dat")));

				// read actionTable
				int length = s.readInt();
				actionTable = new int[length][][];
				for(int i = 0; i < actionTable.length; i++)
				{
					length = s.readInt();
					actionTable[i] = new int[length][3];
					for(int j = 0; j < actionTable[i].length; j++)
					{
						for(int k = 0; k < 3; k++)
						{
							actionTable[i][j][k] = s.readInt();
						}
					}
				}

				// read gotoTable
				length = s.readInt();
				gotoTable = new int[length][][];
				for(int i = 0; i < gotoTable.length; i++)
				{
					length = s.readInt();
					gotoTable[i] = new int[length][2];
					for(int j = 0; j < gotoTable[i].length; j++)
					{
						for(int k = 0; k < 2; k++)
						{
							gotoTable[i][j][k] = s.readInt();
						}
					}
				}

				// read errorMessages
				length = s.readInt();
				errorMessages = new String[length];
				for(int i = 0; i < errorMessages.length; i++)
				{
					length = s.readInt();
					StringBuffer buffer = new StringBuffer();

					for(int j = 0; j < length; j++)
					{
						buffer.append(s.readChar());
					}
					errorMessages[i] = buffer.toString();
				}

				// read errors
				length = s.readInt();
				errors = new int[length];
				for(int i = 0; i < errors.length; i++)
				{
					errors[i] = s.readInt();
				}

				s.close();
			}
			catch(Exception e)
			{
				throw new RuntimeException("Unable to read parser.dat.");
			}
		}
	}
	protected void filter() throws ParserException, LexerException, IOException
	{
	}
	private int goTo(int index)
	{
		int state = state();
		int low = 1;
		int high = gotoTable[index].length - 1;
		int value = gotoTable[index][0][1];

		while(low <= high)
		{
			int middle = (low + high) / 2;

			if(state < gotoTable[index][middle][0])
			{
				high = middle - 1;
			}
			else if(state > gotoTable[index][middle][0])
			{
				low = middle + 1;
			}
			else
			{
				value = gotoTable[index][middle][1];
				break;
			}
		}

		return value;
	}
	private int index(Switchable token)
	{
		converter.index = -1;
		token.apply(converter);
		return converter.index;
	}
	Node new0()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = null;
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = null;
		PDefaultToken node7 = null;
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new1()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = null;
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = null;
		PDefaultToken node7 = (PDefaultToken) pop();
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new10()
	{
		TReal node1 = (TReal) pop();
		ARealType node = new ARealType(node1);
		return node;
	}
	Node new11()
	{
		TIntegral node1 = (TIntegral) pop();
		AIntegralType node = new AIntegralType(node1);
		return node;
	}
	Node new12()
	{
		TSemicolon node4 = (TSemicolon) pop();
		PIdSet node3 = (PIdSet) pop();
		TEq node2 = (TEq) pop();
		TTokens node1 = (TTokens) pop();
		ATokenSet node = new ATokenSet(node1, node2, node3, node4);
		return node;
	}
	Node new13()
	{
		TSemicolon node4 = (TSemicolon) pop();
		TId node3 = (TId) pop();
		TEq node2 = (TEq) pop();
		TDefault node1 = (TDefault) pop();
		ADefaultToken node = new ADefaultToken(node1, node2, node3, node4);
		return node;
	}
	Node new14()
	{
		TRBrace node3 = (TRBrace) pop();
		PIdList node2 = (PIdList) pop();
		TLBrace node1 = (TLBrace) pop();
		AIdSet node = new AIdSet(node1, node2, node3);
		return node;
	}
	Node new15()
	{
		TId node1 = (TId) pop();
		AIdIdList node = new AIdIdList(node1);
		return node;
	}
	Node new16()
	{
		TId node3 = (TId) pop();
		TComma node2 = (TComma) pop();
		PIdList node1 = (PIdList) pop();
		AIdsIdList node = new AIdsIdList(node1, node2, node3);
		return node;
	}
	Node new17()
	{
		TSemicolon node6 = (TSemicolon) pop();
		TRBrace node5 = (TRBrace) pop();
		PIdList node4 = null;
		TLBrace node3 = (TLBrace) pop();
		TEq node2 = (TEq) pop();
		TOne2one node1 = (TOne2one) pop();
		AOne2oneSet node = new AOne2oneSet(node1, node2, node3, node4, node5, node6);
		return node;
	}
	Node new18()
	{
		TSemicolon node6 = (TSemicolon) pop();
		TRBrace node5 = (TRBrace) pop();
		PIdList node4 = (PIdList) pop();
		TLBrace node3 = (TLBrace) pop();
		TEq node2 = (TEq) pop();
		TOne2one node1 = (TOne2one) pop();
		AOne2oneSet node = new AOne2oneSet(node1, node2, node3, node4, node5, node6);
		return node;
	}
	Node new19()
	{
		TEnd node7 = (TEnd) pop();
		XPAbstractDef node6 = null;
		TBegin node5 = (TBegin) pop();
		TRParen node4 = (TRParen) pop();
		TId node3 = (TId) pop();
		TLParen node2 = (TLParen) pop();
		TAbstract node1 = (TAbstract) pop();
		AAbstractFunction node = new AAbstractFunction(node1, node2, node3, node4, node5, node6, node7);
		return node;
	}
	Node new2()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = null;
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = (POne2oneSet) pop();
		PDefaultToken node7 = null;
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new20()
	{
		TEnd node7 = (TEnd) pop();
		XPAbstractDef node6 = (XPAbstractDef) pop();
		TBegin node5 = (TBegin) pop();
		TRParen node4 = (TRParen) pop();
		TId node3 = (TId) pop();
		TLParen node2 = (TLParen) pop();
		TAbstract node1 = (TAbstract) pop();
		AAbstractFunction node = new AAbstractFunction(node1, node2, node3, node4, node5, node6, node7);
		return node;
	}
	Node new21()
	{
		PAbstractDef node2 = (PAbstractDef) pop();
		XPAbstractDef node1 = (XPAbstractDef) pop();
		X1PAbstractDef node = new X1PAbstractDef(node1, node2);
		return node;
	}
	Node new22()
	{
		PAbstractDef node1 = (PAbstractDef) pop();
		X2PAbstractDef node = new X2PAbstractDef(node1);
		return node;
	}
	Node new23()
	{
		TSemicolon node4 = (TSemicolon) pop();
		TId node3 = (TId) pop();
		TRightarrow node2 = (TRightarrow) pop();
		TAny node1 = (TAny) pop();
		AAnyAbstractDef node = new AAnyAbstractDef(node1, node2, node3, node4);
		return node;
	}
	Node new24()
	{
		TSemicolon node4 = (TSemicolon) pop();
		TId node3 = (TId) pop();
		TRightarrow node2 = (TRightarrow) pop();
		PExp node1 = (PExp) pop();
		AExpAbstractDef node = new AExpAbstractDef(node1, node2, node3, node4);
		return node;
	}
	Node new25()
	{
		POperator node1 = (POperator) pop();
		AOperatorOperatorTest node = new AOperatorOperatorTest(node1);
		return node;
	}
	Node new26()
	{
		PTest node1 = (PTest) pop();
		ATestOperatorTest node = new ATestOperatorTest(node1);
		return node;
	}
	Node new27()
	{
		TEnd node6 = (TEnd) pop();
		XPPattern node5 = null;
		TBegin node4 = (TBegin) pop();
		TId node3 = (TId) pop();
		POp node2 = (POp) pop();
		TOperator node1 = (TOperator) pop();
		AOperator node = new AOperator(node1, node2, node3, node4, node5, node6);
		return node;
	}
	Node new28()
	{
		TEnd node6 = (TEnd) pop();
		XPPattern node5 = (XPPattern) pop();
		TBegin node4 = (TBegin) pop();
		TId node3 = (TId) pop();
		POp node2 = (POp) pop();
		TOperator node1 = (TOperator) pop();
		AOperator node = new AOperator(node1, node2, node3, node4, node5, node6);
		return node;
	}
	Node new29()
	{
		PPattern node2 = (PPattern) pop();
		XPPattern node1 = (XPPattern) pop();
		X1PPattern node = new X1PPattern(node1, node2);
		return node;
	}
	Node new3()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = null;
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = (POne2oneSet) pop();
		PDefaultToken node7 = (PDefaultToken) pop();
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new30()
	{
		PPattern node1 = (PPattern) pop();
		X2PPattern node = new X2PPattern(node1);
		return node;
	}
	Node new31()
	{
		TPlus node1 = (TPlus) pop();
		APlusOp node = new APlusOp(node1);
		return node;
	}
	Node new32()
	{
		TMinus node1 = (TMinus) pop();
		AMinusOp node = new AMinusOp(node1);
		return node;
	}
	Node new33()
	{
		TTimes node1 = (TTimes) pop();
		ATimesOp node = new ATimesOp(node1);
		return node;
	}
	Node new34()
	{
		TDiv node1 = (TDiv) pop();
		ADivOp node = new ADivOp(node1);
		return node;
	}
	Node new35()
	{
		TMod node1 = (TMod) pop();
		AModOp node = new AModOp(node1);
		return node;
	}
	Node new36()
	{
		TSemicolon node4 = (TSemicolon) pop();
		PTokenTokenSet node3 = (PTokenTokenSet) pop();
		TRightarrow node2 = (TRightarrow) pop();
		TAny node1 = (TAny) pop();
		AAnyPattern node = new AAnyPattern(node1, node2, node3, node4);
		return node;
	}
	Node new37()
	{
		TSemicolon node8 = (TSemicolon) pop();
		PTokenTokenSet node7 = (PTokenTokenSet) pop();
		TRightarrow node6 = (TRightarrow) pop();
		TRParen node5 = (TRParen) pop();
		PAnyId node4 = (PAnyId) pop();
		TComma node3 = (TComma) pop();
		PAnyId node2 = (PAnyId) pop();
		TLParen node1 = (TLParen) pop();
		APatternPattern node = new APatternPattern(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new38()
	{
		TId node1 = (TId) pop();
		AIdAnyId node = new AIdAnyId(node1);
		return node;
	}
	Node new39()
	{
		TAny node1 = (TAny) pop();
		AAnyAnyId node = new AAnyAnyId(node1);
		return node;
	}
	Node new4()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = (XPOperatorTest) pop();
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = null;
		PDefaultToken node7 = null;
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new40()
	{
		TId node1 = (TId) pop();
		ATokenTokenTokenSet node = new ATokenTokenTokenSet(node1);
		return node;
	}
	Node new41()
	{
		PIdSet node1 = (PIdSet) pop();
		ATokenSetTokenTokenSet node = new ATokenSetTokenTokenSet(node1);
		return node;
	}
	Node new42()
	{
		TEnd node6 = (TEnd) pop();
		XPPattern node5 = null;
		TBegin node4 = (TBegin) pop();
		TId node3 = (TId) pop();
		PTOp node2 = (PTOp) pop();
		TTest node1 = (TTest) pop();
		ATest node = new ATest(node1, node2, node3, node4, node5, node6);
		return node;
	}
	Node new43()
	{
		TEnd node6 = (TEnd) pop();
		XPPattern node5 = (XPPattern) pop();
		TBegin node4 = (TBegin) pop();
		TId node3 = (TId) pop();
		PTOp node2 = (PTOp) pop();
		TTest node1 = (TTest) pop();
		ATest node = new ATest(node1, node2, node3, node4, node5, node6);
		return node;
	}
	Node new44()
	{
		TEqual node1 = (TEqual) pop();
		AEqualTOp node = new AEqualTOp(node1);
		return node;
	}
	Node new45()
	{
		TNotEqual node1 = (TNotEqual) pop();
		ANotEqualTOp node = new ANotEqualTOp(node1);
		return node;
	}
	Node new46()
	{
		TGreaterEqual node1 = (TGreaterEqual) pop();
		AGreaterEqualTOp node = new AGreaterEqualTOp(node1);
		return node;
	}
	Node new47()
	{
		TLessEqual node1 = (TLessEqual) pop();
		ALessEqualTOp node = new ALessEqualTOp(node1);
		return node;
	}
	Node new48()
	{
		TGreater node1 = (TGreater) pop();
		AGreaterTOp node = new AGreaterTOp(node1);
		return node;
	}
	Node new49()
	{
		TLess node1 = (TLess) pop();
		ALessTOp node = new ALessTOp(node1);
		return node;
	}
	Node new5()
	{
		POperatorTest node2 = (POperatorTest) pop();
		XPOperatorTest node1 = (XPOperatorTest) pop();
		X1POperatorTest node = new X1POperatorTest(node1, node2);
		return node;
	}
	Node new50()
	{
		PLiteral node1 = (PLiteral) pop();
		ALiteralPrimaryExp node = new ALiteralPrimaryExp(node1);
		return node;
	}
	Node new51()
	{
		TRParen node3 = (TRParen) pop();
		PExp node2 = (PExp) pop();
		TLParen node1 = (TLParen) pop();
		AParenPrimaryExp node = new AParenPrimaryExp(node1, node2, node3);
		return node;
	}
	Node new52()
	{
		TId node1 = (TId) pop();
		AIdPrimaryExp node = new AIdPrimaryExp(node1);
		return node;
	}
	Node new53()
	{
		PPrimaryExp node1 = (PPrimaryExp) pop();
		APrimaryUnaryNotPlusMinusExp node = new APrimaryUnaryNotPlusMinusExp(node1);
		return node;
	}
	Node new54()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TNot node1 = (TNot) pop();
		AComplementUnaryNotPlusMinusExp node = new AComplementUnaryNotPlusMinusExp(node1, node2);
		return node;
	}
	Node new55()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TBitComplement node1 = (TBitComplement) pop();
		ABitComplementUnaryNotPlusMinusExp node = new ABitComplementUnaryNotPlusMinusExp(node1, node2);
		return node;
	}
	Node new56()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TPlus node1 = (TPlus) pop();
		APlusUnaryExp node = new APlusUnaryExp(node1, node2);
		return node;
	}
	Node new57()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TMinus node1 = (TMinus) pop();
		AMinusUnaryExp node = new AMinusUnaryExp(node1, node2);
		return node;
	}
	Node new58()
	{
		PUnaryNotPlusMinusExp node1 = (PUnaryNotPlusMinusExp) pop();
		AUnaryNotPlusMinusUnaryExp node = new AUnaryNotPlusMinusUnaryExp(node1);
		return node;
	}
	Node new59()
	{
		PUnaryExp node1 = (PUnaryExp) pop();
		AUnaryExpMultExp node = new AUnaryExpMultExp(node1);
		return node;
	}
	Node new6()
	{
		POperatorTest node1 = (POperatorTest) pop();
		X2POperatorTest node = new X2POperatorTest(node1);
		return node;
	}
	Node new60()
	{
		PUnaryExp node3 = (PUnaryExp) pop();
		TTimes node2 = (TTimes) pop();
		PMultExp node1 = (PMultExp) pop();
		ATimesMultExp node = new ATimesMultExp(node1, node2, node3);
		return node;
	}
	Node new61()
	{
		PUnaryExp node3 = (PUnaryExp) pop();
		TDiv node2 = (TDiv) pop();
		PMultExp node1 = (PMultExp) pop();
		ADivMultExp node = new ADivMultExp(node1, node2, node3);
		return node;
	}
	Node new62()
	{
		PUnaryExp node3 = (PUnaryExp) pop();
		TMod node2 = (TMod) pop();
		PMultExp node1 = (PMultExp) pop();
		AModMultExp node = new AModMultExp(node1, node2, node3);
		return node;
	}
	Node new63()
	{
		PMultExp node1 = (PMultExp) pop();
		AMultAddExp node = new AMultAddExp(node1);
		return node;
	}
	Node new64()
	{
		PMultExp node3 = (PMultExp) pop();
		TPlus node2 = (TPlus) pop();
		PAddExp node1 = (PAddExp) pop();
		APlusAddExp node = new APlusAddExp(node1, node2, node3);
		return node;
	}
	Node new65()
	{
		PMultExp node3 = (PMultExp) pop();
		TMinus node2 = (TMinus) pop();
		PAddExp node1 = (PAddExp) pop();
		AMinusAddExp node = new AMinusAddExp(node1, node2, node3);
		return node;
	}
	Node new66()
	{
		PAddExp node1 = (PAddExp) pop();
		AAddExpShiftExp node = new AAddExpShiftExp(node1);
		return node;
	}
	Node new67()
	{
		PAddExp node3 = (PAddExp) pop();
		TShiftLeft node2 = (TShiftLeft) pop();
		PShiftExp node1 = (PShiftExp) pop();
		ALeftShiftExp node = new ALeftShiftExp(node1, node2, node3);
		return node;
	}
	Node new68()
	{
		PAddExp node3 = (PAddExp) pop();
		TSignedShiftRight node2 = (TSignedShiftRight) pop();
		PShiftExp node1 = (PShiftExp) pop();
		ASignedRightShiftExp node = new ASignedRightShiftExp(node1, node2, node3);
		return node;
	}
	Node new69()
	{
		PAddExp node3 = (PAddExp) pop();
		TUnsignedShiftRight node2 = (TUnsignedShiftRight) pop();
		PShiftExp node1 = (PShiftExp) pop();
		AUnsignedRightShiftExp node = new AUnsignedRightShiftExp(node1, node2, node3);
		return node;
	}
	Node new7()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = (XPOperatorTest) pop();
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = null;
		PDefaultToken node7 = (PDefaultToken) pop();
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new70()
	{
		PShiftExp node1 = (PShiftExp) pop();
		AShiftRelExp node = new AShiftRelExp(node1);
		return node;
	}
	Node new71()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TLess node2 = (TLess) pop();
		PRelExp node1 = (PRelExp) pop();
		ALessRelExp node = new ALessRelExp(node1, node2, node3);
		return node;
	}
	Node new72()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TGreater node2 = (TGreater) pop();
		PRelExp node1 = (PRelExp) pop();
		AGreaterRelExp node = new AGreaterRelExp(node1, node2, node3);
		return node;
	}
	Node new73()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TLessEqual node2 = (TLessEqual) pop();
		PRelExp node1 = (PRelExp) pop();
		ALessEqualRelExp node = new ALessEqualRelExp(node1, node2, node3);
		return node;
	}
	Node new74()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TGreaterEqual node2 = (TGreaterEqual) pop();
		PRelExp node1 = (PRelExp) pop();
		AGreaterEqualRelExp node = new AGreaterEqualRelExp(node1, node2, node3);
		return node;
	}
	Node new75()
	{
		PRelExp node1 = (PRelExp) pop();
		ARelEqExp node = new ARelEqExp(node1);
		return node;
	}
	Node new76()
	{
		PRelExp node3 = (PRelExp) pop();
		TEqual node2 = (TEqual) pop();
		PEqExp node1 = (PEqExp) pop();
		AEqEqExp node = new AEqEqExp(node1, node2, node3);
		return node;
	}
	Node new77()
	{
		PRelExp node3 = (PRelExp) pop();
		TNotEqual node2 = (TNotEqual) pop();
		PEqExp node1 = (PEqExp) pop();
		ANeqEqExp node = new ANeqEqExp(node1, node2, node3);
		return node;
	}
	Node new78()
	{
		PEqExp node1 = (PEqExp) pop();
		AEqBitAndExp node = new AEqBitAndExp(node1);
		return node;
	}
	Node new79()
	{
		PEqExp node3 = (PEqExp) pop();
		TBitAnd node2 = (TBitAnd) pop();
		PBitAndExp node1 = (PBitAndExp) pop();
		AAndBitAndExp node = new AAndBitAndExp(node1, node2, node3);
		return node;
	}
	Node new8()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = (XPOperatorTest) pop();
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = (POne2oneSet) pop();
		PDefaultToken node7 = null;
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new80()
	{
		PBitAndExp node1 = (PBitAndExp) pop();
		AAndExclusiveOrExp node = new AAndExclusiveOrExp(node1);
		return node;
	}
	Node new81()
	{
		PBitAndExp node3 = (PBitAndExp) pop();
		TBitXor node2 = (TBitXor) pop();
		PExclusiveOrExp node1 = (PExclusiveOrExp) pop();
		AXorExclusiveOrExp node = new AXorExclusiveOrExp(node1, node2, node3);
		return node;
	}
	Node new82()
	{
		PExclusiveOrExp node1 = (PExclusiveOrExp) pop();
		AXorInclusiveOrExp node = new AXorInclusiveOrExp(node1);
		return node;
	}
	Node new83()
	{
		PExclusiveOrExp node3 = (PExclusiveOrExp) pop();
		TBitOr node2 = (TBitOr) pop();
		PInclusiveOrExp node1 = (PInclusiveOrExp) pop();
		AOrInclusiveOrExp node = new AOrInclusiveOrExp(node1, node2, node3);
		return node;
	}
	Node new84()
	{
		PInclusiveOrExp node1 = (PInclusiveOrExp) pop();
		AInclusiveOrAndExp node = new AInclusiveOrAndExp(node1);
		return node;
	}
	Node new85()
	{
		PInclusiveOrExp node3 = (PInclusiveOrExp) pop();
		TAnd node2 = (TAnd) pop();
		PAndExp node1 = (PAndExp) pop();
		AAndAndExp node = new AAndAndExp(node1, node2, node3);
		return node;
	}
	Node new86()
	{
		PAndExp node1 = (PAndExp) pop();
		AAndOrExp node = new AAndOrExp(node1);
		return node;
	}
	Node new87()
	{
		PAndExp node3 = (PAndExp) pop();
		TOr node2 = (TOr) pop();
		POrExp node1 = (POrExp) pop();
		AOrOrExp node = new AOrOrExp(node1, node2, node3);
		return node;
	}
	Node new88()
	{
		POrExp node1 = (POrExp) pop();
		AOrConditionalExp node = new AOrConditionalExp(node1);
		return node;
	}
	Node new89()
	{
		PConditionalExp node5 = (PConditionalExp) pop();
		TColon node4 = (TColon) pop();
		PExp node3 = (PExp) pop();
		TQuestion node2 = (TQuestion) pop();
		POrExp node1 = (POrExp) pop();
		AQuestionConditionalExp node = new AQuestionConditionalExp(node1, node2, node3, node4, node5);
		return node;
	}
	Node new9()
	{
		TEnd node11 = (TEnd) pop();
		XPOperatorTest node10 = (XPOperatorTest) pop();
		PAbstractFunction node9 = (PAbstractFunction) pop();
		POne2oneSet node8 = (POne2oneSet) pop();
		PDefaultToken node7 = (PDefaultToken) pop();
		PTokenSet node6 = (PTokenSet) pop();
		TBegin node5 = (TBegin) pop();
		PType node4 = (PType) pop();
		TExtends node3 = (TExtends) pop();
		TId node2 = (TId) pop();
		TAbstraction node1 = (TAbstraction) pop();
		AUnit node = new AUnit(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new90()
	{
		PConditionalExp node1 = (PConditionalExp) pop();
		AExp node = new AExp(node1);
		return node;
	}
	Node new91()
	{
		TDecIntLiteral node1 = (TDecIntLiteral) pop();
		ADecIntLiteral node = new ADecIntLiteral(node1);
		return node;
	}
	Node new92()
	{
		THexIntLiteral node1 = (THexIntLiteral) pop();
		AHexIntLiteral node = new AHexIntLiteral(node1);
		return node;
	}
	Node new93()
	{
		TOctIntLiteral node1 = (TOctIntLiteral) pop();
		AOctIntLiteral node = new AOctIntLiteral(node1);
		return node;
	}
	Node new94()
	{
		TDecLongLiteral node1 = (TDecLongLiteral) pop();
		ADecLongLiteral node = new ADecLongLiteral(node1);
		return node;
	}
	Node new95()
	{
		THexLongLiteral node1 = (THexLongLiteral) pop();
		AHexLongLiteral node = new AHexLongLiteral(node1);
		return node;
	}
	Node new96()
	{
		TOctLongLiteral node1 = (TOctLongLiteral) pop();
		AOctLongLiteral node = new AOctLongLiteral(node1);
		return node;
	}
	Node new97()
	{
		TFloatLiteral node1 = (TFloatLiteral) pop();
		AFloatLiteral node = new AFloatLiteral(node1);
		return node;
	}
	Node new98()
	{
		TDoubleLiteral node1 = (TDoubleLiteral) pop();
		ADoubleLiteral node = new ADoubleLiteral(node1);
		return node;
	}
	public Start parse() throws ParserException, LexerException, IOException
	{
		push(0, null, false);

		List ign = null;
		while(true)
		{
			while(index(lexer.peek()) == -1)
			{
				if(ign == null)
				{
					ign = new TypedLinkedList(NodeCast.instance);
				}

				ign.add(lexer.next());
			}

			if(ign != null)
			{
				ignoredTokens.setIn(lexer.peek(), ign);
				ign = null;
			}

			last_pos = lexer.peek().getPos();
			last_line = lexer.peek().getLine();

			int index = index(lexer.peek());
			action[0] = actionTable[state()][0][1];
			action[1] = actionTable[state()][0][2];

			int low = 1;
			int high = actionTable[state()].length - 1;

			while(low <= high)
			{
				int middle = (low + high) / 2;

				if(index < actionTable[state()][middle][0])
				{
					high = middle - 1;
				}
				else if(index > actionTable[state()][middle][0])
				{
					low = middle + 1;
				}
				else
				{
					action[0] = actionTable[state()][middle][1];
					action[1] = actionTable[state()][middle][2];
					break;
				}
			}

			switch(action[0])
			{
				case SHIFT:
					push(action[1], lexer.next(), true);
					last_shift = action[1];
					break;
				case REDUCE:
					switch(action[1])
					{
					case 0: { Node node = new0(); push(goTo(0), node, true); } break;
					case 1: { Node node = new1(); push(goTo(0), node, true); } break;
					case 2: { Node node = new2(); push(goTo(0), node, true); } break;
					case 3: { Node node = new3(); push(goTo(0), node, true); } break;
					case 4: { Node node = new4(); push(goTo(0), node, true); } break;
					case 5: { Node node = new5(); push(goTo(33), node, false); } break;
					case 6: { Node node = new6(); push(goTo(33), node, false); } break;
					case 7: { Node node = new7(); push(goTo(0), node, true); } break;
					case 8: { Node node = new8(); push(goTo(0), node, true); } break;
					case 9: { Node node = new9(); push(goTo(0), node, true); } break;
					case 10: { Node node = new10(); push(goTo(1), node, true); } break;
					case 11: { Node node = new11(); push(goTo(1), node, true); } break;
					case 12: { Node node = new12(); push(goTo(2), node, true); } break;
					case 13: { Node node = new13(); push(goTo(3), node, true); } break;
					case 14: { Node node = new14(); push(goTo(4), node, true); } break;
					case 15: { Node node = new15(); push(goTo(5), node, true); } break;
					case 16: { Node node = new16(); push(goTo(5), node, true); } break;
					case 17: { Node node = new17(); push(goTo(6), node, true); } break;
					case 18: { Node node = new18(); push(goTo(6), node, true); } break;
					case 19: { Node node = new19(); push(goTo(7), node, true); } break;
					case 20: { Node node = new20(); push(goTo(7), node, true); } break;
					case 21: { Node node = new21(); push(goTo(34), node, false); } break;
					case 22: { Node node = new22(); push(goTo(34), node, false); } break;
					case 23: { Node node = new23(); push(goTo(8), node, true); } break;
					case 24: { Node node = new24(); push(goTo(8), node, true); } break;
					case 25: { Node node = new25(); push(goTo(9), node, true); } break;
					case 26: { Node node = new26(); push(goTo(9), node, true); } break;
					case 27: { Node node = new27(); push(goTo(10), node, true); } break;
					case 28: { Node node = new28(); push(goTo(10), node, true); } break;
					case 29: { Node node = new29(); push(goTo(35), node, false); } break;
					case 30: { Node node = new30(); push(goTo(35), node, false); } break;
					case 31: { Node node = new31(); push(goTo(11), node, true); } break;
					case 32: { Node node = new32(); push(goTo(11), node, true); } break;
					case 33: { Node node = new33(); push(goTo(11), node, true); } break;
					case 34: { Node node = new34(); push(goTo(11), node, true); } break;
					case 35: { Node node = new35(); push(goTo(11), node, true); } break;
					case 36: { Node node = new36(); push(goTo(12), node, true); } break;
					case 37: { Node node = new37(); push(goTo(12), node, true); } break;
					case 38: { Node node = new38(); push(goTo(13), node, true); } break;
					case 39: { Node node = new39(); push(goTo(13), node, true); } break;
					case 40: { Node node = new40(); push(goTo(14), node, true); } break;
					case 41: { Node node = new41(); push(goTo(14), node, true); } break;
					case 42: { Node node = new42(); push(goTo(15), node, true); } break;
					case 43: { Node node = new43(); push(goTo(15), node, true); } break;
					case 44: { Node node = new44(); push(goTo(16), node, true); } break;
					case 45: { Node node = new45(); push(goTo(16), node, true); } break;
					case 46: { Node node = new46(); push(goTo(16), node, true); } break;
					case 47: { Node node = new47(); push(goTo(16), node, true); } break;
					case 48: { Node node = new48(); push(goTo(16), node, true); } break;
					case 49: { Node node = new49(); push(goTo(16), node, true); } break;
					case 50: { Node node = new50(); push(goTo(17), node, true); } break;
					case 51: { Node node = new51(); push(goTo(17), node, true); } break;
					case 52: { Node node = new52(); push(goTo(17), node, true); } break;
					case 53: { Node node = new53(); push(goTo(18), node, true); } break;
					case 54: { Node node = new54(); push(goTo(18), node, true); } break;
					case 55: { Node node = new55(); push(goTo(18), node, true); } break;
					case 56: { Node node = new56(); push(goTo(19), node, true); } break;
					case 57: { Node node = new57(); push(goTo(19), node, true); } break;
					case 58: { Node node = new58(); push(goTo(19), node, true); } break;
					case 59: { Node node = new59(); push(goTo(20), node, true); } break;
					case 60: { Node node = new60(); push(goTo(20), node, true); } break;
					case 61: { Node node = new61(); push(goTo(20), node, true); } break;
					case 62: { Node node = new62(); push(goTo(20), node, true); } break;
					case 63: { Node node = new63(); push(goTo(21), node, true); } break;
					case 64: { Node node = new64(); push(goTo(21), node, true); } break;
					case 65: { Node node = new65(); push(goTo(21), node, true); } break;
					case 66: { Node node = new66(); push(goTo(22), node, true); } break;
					case 67: { Node node = new67(); push(goTo(22), node, true); } break;
					case 68: { Node node = new68(); push(goTo(22), node, true); } break;
					case 69: { Node node = new69(); push(goTo(22), node, true); } break;
					case 70: { Node node = new70(); push(goTo(23), node, true); } break;
					case 71: { Node node = new71(); push(goTo(23), node, true); } break;
					case 72: { Node node = new72(); push(goTo(23), node, true); } break;
					case 73: { Node node = new73(); push(goTo(23), node, true); } break;
					case 74: { Node node = new74(); push(goTo(23), node, true); } break;
					case 75: { Node node = new75(); push(goTo(24), node, true); } break;
					case 76: { Node node = new76(); push(goTo(24), node, true); } break;
					case 77: { Node node = new77(); push(goTo(24), node, true); } break;
					case 78: { Node node = new78(); push(goTo(25), node, true); } break;
					case 79: { Node node = new79(); push(goTo(25), node, true); } break;
					case 80: { Node node = new80(); push(goTo(26), node, true); } break;
					case 81: { Node node = new81(); push(goTo(26), node, true); } break;
					case 82: { Node node = new82(); push(goTo(27), node, true); } break;
					case 83: { Node node = new83(); push(goTo(27), node, true); } break;
					case 84: { Node node = new84(); push(goTo(28), node, true); } break;
					case 85: { Node node = new85(); push(goTo(28), node, true); } break;
					case 86: { Node node = new86(); push(goTo(29), node, true); } break;
					case 87: { Node node = new87(); push(goTo(29), node, true); } break;
					case 88: { Node node = new88(); push(goTo(30), node, true); } break;
					case 89: { Node node = new89(); push(goTo(30), node, true); } break;
					case 90: { Node node = new90(); push(goTo(31), node, true); } break;
					case 91: { Node node = new91(); push(goTo(32), node, true); } break;
					case 92: { Node node = new92(); push(goTo(32), node, true); } break;
					case 93: { Node node = new93(); push(goTo(32), node, true); } break;
					case 94: { Node node = new94(); push(goTo(32), node, true); } break;
					case 95: { Node node = new95(); push(goTo(32), node, true); } break;
					case 96: { Node node = new96(); push(goTo(32), node, true); } break;
					case 97: { Node node = new97(); push(goTo(32), node, true); } break;
					case 98: { Node node = new98(); push(goTo(32), node, true); } break;
					}
					break;
				case ACCEPT:
					{
						EOF node2 = (EOF) lexer.next();
						PUnit node1 = (PUnit) pop();
						Start node = new Start(node1, node2);
						return node;
					}
				case ERROR:
					throw new ParserException(
						"[" + last_line + "," + last_pos + "] " +
						errorMessages[errors[action[1]]]);
			}
		}
	}
	private Node pop()
	{
		return (Node) ((State) stack.previous()).node;
	}
	private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
	{
		this.node = node;

		if(filter)
		{
			filter();
		}

		if(!stack.hasNext())
		{
			stack.add(new State(state, this.node));
			return;
		}

		State s = (State) stack.next();
		s.state = state;
		s.node = this.node;
	}
	private int state()
	{
		State s = (State) stack.previous();
		stack.next();
		return s.state;
	}
}
