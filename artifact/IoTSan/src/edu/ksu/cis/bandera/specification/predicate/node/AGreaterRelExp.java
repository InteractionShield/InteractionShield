package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AGreaterRelExp extends PRelExp
{
	private PRelExp _relExp_;
	private TGreater _greater_;
	private PShiftExp _shiftExp_;

	public AGreaterRelExp()
	{
	}
	public AGreaterRelExp(
		PRelExp _relExp_,
		TGreater _greater_,
		PShiftExp _shiftExp_)
	{
		setRelExp(_relExp_);

		setGreater(_greater_);

		setShiftExp(_shiftExp_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAGreaterRelExp(this);
	}
	public Object clone()
	{
		return new AGreaterRelExp(
			(PRelExp) cloneNode(_relExp_),
			(TGreater) cloneNode(_greater_),
			(PShiftExp) cloneNode(_shiftExp_));
	}
	public TGreater getGreater()
	{
		return _greater_;
	}
	public PRelExp getRelExp()
	{
		return _relExp_;
	}
	public PShiftExp getShiftExp()
	{
		return _shiftExp_;
	}
	void removeChild(Node child)
	{
		if(_relExp_ == child)
		{
			_relExp_ = null;
			return;
		}

		if(_greater_ == child)
		{
			_greater_ = null;
			return;
		}

		if(_shiftExp_ == child)
		{
			_shiftExp_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_relExp_ == oldChild)
		{
			setRelExp((PRelExp) newChild);
			return;
		}

		if(_greater_ == oldChild)
		{
			setGreater((TGreater) newChild);
			return;
		}

		if(_shiftExp_ == oldChild)
		{
			setShiftExp((PShiftExp) newChild);
			return;
		}

	}
	public void setGreater(TGreater node)
	{
		if(_greater_ != null)
		{
			_greater_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_greater_ = node;
	}
	public void setRelExp(PRelExp node)
	{
		if(_relExp_ != null)
		{
			_relExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_relExp_ = node;
	}
	public void setShiftExp(PShiftExp node)
	{
		if(_shiftExp_ != null)
		{
			_shiftExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_shiftExp_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_relExp_)
			+ toString(_greater_)
			+ toString(_shiftExp_);
	}
}
