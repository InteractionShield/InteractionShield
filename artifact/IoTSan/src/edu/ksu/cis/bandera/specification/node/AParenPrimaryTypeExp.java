package edu.ksu.cis.bandera.specification.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.analysis.*;

public final class AParenPrimaryTypeExp extends PPrimaryTypeExp
{
	private TLParen _lParen_;
	private PTypeExp _typeExp_;
	private TRParen _rParen_;

	public AParenPrimaryTypeExp()
	{
	}
	public AParenPrimaryTypeExp(
		TLParen _lParen_,
		PTypeExp _typeExp_,
		TRParen _rParen_)
	{
		setLParen(_lParen_);

		setTypeExp(_typeExp_);

		setRParen(_rParen_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAParenPrimaryTypeExp(this);
	}
	public Object clone()
	{
		return new AParenPrimaryTypeExp(
			(TLParen) cloneNode(_lParen_),
			(PTypeExp) cloneNode(_typeExp_),
			(TRParen) cloneNode(_rParen_));
	}
	public TLParen getLParen()
	{
		return _lParen_;
	}
	public TRParen getRParen()
	{
		return _rParen_;
	}
	public PTypeExp getTypeExp()
	{
		return _typeExp_;
	}
	void removeChild(Node child)
	{
		if(_lParen_ == child)
		{
			_lParen_ = null;
			return;
		}

		if(_typeExp_ == child)
		{
			_typeExp_ = null;
			return;
		}

		if(_rParen_ == child)
		{
			_rParen_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_lParen_ == oldChild)
		{
			setLParen((TLParen) newChild);
			return;
		}

		if(_typeExp_ == oldChild)
		{
			setTypeExp((PTypeExp) newChild);
			return;
		}

		if(_rParen_ == oldChild)
		{
			setRParen((TRParen) newChild);
			return;
		}

	}
	public void setLParen(TLParen node)
	{
		if(_lParen_ != null)
		{
			_lParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_lParen_ = node;
	}
	public void setRParen(TRParen node)
	{
		if(_rParen_ != null)
		{
			_rParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_rParen_ = node;
	}
	public void setTypeExp(PTypeExp node)
	{
		if(_typeExp_ != null)
		{
			_typeExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_typeExp_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_lParen_)
			+ toString(_typeExp_)
			+ toString(_rParen_);
	}
}
