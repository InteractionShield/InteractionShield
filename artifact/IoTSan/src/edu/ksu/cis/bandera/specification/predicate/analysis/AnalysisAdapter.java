package edu.ksu.cis.bandera.specification.predicate.analysis;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.node.*;

public class AnalysisAdapter implements Analysis
{
	private Hashtable in;
	private Hashtable out;

	public void caseAAddExpShiftExp(AAddExpShiftExp node)
	{
		defaultCase(node);
	}
	public void caseAAndAndExp(AAndAndExp node)
	{
		defaultCase(node);
	}
	public void caseAAndBinOp(AAndBinOp node)
	{
		defaultCase(node);
	}
	public void caseAAndBitAndExp(AAndBitAndExp node)
	{
		defaultCase(node);
	}
	public void caseAAndExclusiveOrExp(AAndExclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseAAndOrExp(AAndOrExp node)
	{
		defaultCase(node);
	}
	public void caseAArrayAccessPrimaryExp(AArrayAccessPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseABinaryExp(ABinaryExp node)
	{
		defaultCase(node);
	}
	public void caseABitAndBinOp(ABitAndBinOp node)
	{
		defaultCase(node);
	}
	public void caseABitComplementExp(ABitComplementExp node)
	{
		defaultCase(node);
	}
	public void caseABitComplementUnaryNotPlusMinusExp(ABitComplementUnaryNotPlusMinusExp node)
	{
		defaultCase(node);
	}
	public void caseABitOrBinOp(ABitOrBinOp node)
	{
		defaultCase(node);
	}
	public void caseABitXorBinOp(ABitXorBinOp node)
	{
		defaultCase(node);
	}
	public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseABytePrimitiveType(ABytePrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseACastUnaryNotPlusMinusExp(ACastUnaryNotPlusMinusExp node)
	{
		defaultCase(node);
	}
	public void caseACharLiteral(ACharLiteral node)
	{
		defaultCase(node);
	}
	public void caseACharPrimitiveType(ACharPrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseAColonExp(AColonExp node)
	{
		defaultCase(node);
	}
	public void caseAComplementExp(AComplementExp node)
	{
		defaultCase(node);
	}
	public void caseAComplementUnaryNotPlusMinusExp(AComplementUnaryNotPlusMinusExp node)
	{
		defaultCase(node);
	}
	public void caseAConditionalExp(AConditionalExp node)
	{
		defaultCase(node);
	}
	public void caseACpl(ACpl node)
	{
		defaultCase(node);
	}
	public void caseADecIntLiteral(ADecIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseADecLongLiteral(ADecLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseADoubleLiteral(ADoubleLiteral node)
	{
		defaultCase(node);
	}
	public void caseADoublePrimitiveType(ADoublePrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseAEndOfLineComment(AEndOfLineComment node)
	{
		defaultCase(node);
	}
	public void caseAEqBitAndExp(AEqBitAndExp node)
	{
		defaultCase(node);
	}
	public void caseAEqEqExp(AEqEqExp node)
	{
		defaultCase(node);
	}
	public void caseAEqualBinOp(AEqualBinOp node)
	{
		defaultCase(node);
	}
	public void caseAExpressionPropositionDefinition(AExpressionPropositionDefinition node)
	{
		defaultCase(node);
	}
	public void caseAFalseLiteral(AFalseLiteral node)
	{
		defaultCase(node);
	}
	public void caseAFieldAccessPrimaryExp(AFieldAccessPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAFloatLiteral(AFloatLiteral node)
	{
		defaultCase(node);
	}
	public void caseAFloatPrimitiveType(AFloatPrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseAGreaterBinOp(AGreaterBinOp node)
	{
		defaultCase(node);
	}
	public void caseAGreaterEqualBinOp(AGreaterEqualBinOp node)
	{
		defaultCase(node);
	}
	public void caseAGreaterEqualRelExp(AGreaterEqualRelExp node)
	{
		defaultCase(node);
	}
	public void caseAGreaterRelExp(AGreaterRelExp node)
	{
		defaultCase(node);
	}
	public void caseAHexIntLiteral(AHexIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseAHexLongLiteral(AHexLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseAInclusiveOrAndExp(AInclusiveOrAndExp node)
	{
		defaultCase(node);
	}
	public void caseAInstanceofExp(AInstanceofExp node)
	{
		defaultCase(node);
	}
	public void caseAInstanceofRelExp(AInstanceofRelExp node)
	{
		defaultCase(node);
	}
	public void caseAInstanceParams(AInstanceParams node)
	{
		defaultCase(node);
	}
	public void caseAIntPrimitiveType(AIntPrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseAInvokePropositionDefinition(AInvokePropositionDefinition node)
	{
		defaultCase(node);
	}
	public void caseALeftShiftExp(ALeftShiftExp node)
	{
		defaultCase(node);
	}
	public void caseALessBinOp(ALessBinOp node)
	{
		defaultCase(node);
	}
	public void caseALessEqualBinOp(ALessEqualBinOp node)
	{
		defaultCase(node);
	}
	public void caseALessEqualRelExp(ALessEqualRelExp node)
	{
		defaultCase(node);
	}
	public void caseALessRelExp(ALessRelExp node)
	{
		defaultCase(node);
	}
	public void caseALiteralExp(ALiteralExp node)
	{
		defaultCase(node);
	}
	public void caseALiteralPrimaryExp(ALiteralPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseALocationPropositionDefinition(ALocationPropositionDefinition node)
	{
		defaultCase(node);
	}
	public void caseALongPrimitiveType(ALongPrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseAMinusAddExp(AMinusAddExp node)
	{
		defaultCase(node);
	}
	public void caseAMinusBinOp(AMinusBinOp node)
	{
		defaultCase(node);
	}
	public void caseAMinusUnaryExp(AMinusUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseAMultAddExp(AMultAddExp node)
	{
		defaultCase(node);
	}
	public void caseANameExp(ANameExp node)
	{
		defaultCase(node);
	}
	public void caseANamePostfixExp(ANamePostfixExp node)
	{
		defaultCase(node);
	}
	public void caseANavigationExp(ANavigationExp node)
	{
		defaultCase(node);
	}
	public void caseANegativeExp(ANegativeExp node)
	{
		defaultCase(node);
	}
	public void caseANeqEqExp(ANeqEqExp node)
	{
		defaultCase(node);
	}
	public void caseANotEqualBinOp(ANotEqualBinOp node)
	{
		defaultCase(node);
	}
	public void caseANullLiteral(ANullLiteral node)
	{
		defaultCase(node);
	}
	public void caseAOctIntLiteral(AOctIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseAOctLongLiteral(AOctLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseAOrBinOp(AOrBinOp node)
	{
		defaultCase(node);
	}
	public void caseAOrConditionalExp(AOrConditionalExp node)
	{
		defaultCase(node);
	}
	public void caseAOrInclusiveOrExp(AOrInclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseAOrOrExp(AOrOrExp node)
	{
		defaultCase(node);
	}
	public void caseAParamParamList(AParamParamList node)
	{
		defaultCase(node);
	}
	public void caseAParamsParamList(AParamsParamList node)
	{
		defaultCase(node);
	}
	public void caseAParenExp(AParenExp node)
	{
		defaultCase(node);
	}
	public void caseAParenPrimaryExp(AParenPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAPlusAddExp(APlusAddExp node)
	{
		defaultCase(node);
	}
	public void caseAPlusBinOp(APlusBinOp node)
	{
		defaultCase(node);
	}
	public void caseAPlusUnaryExp(APlusUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseAPostfixUnaryNotPlusMinusExp(APostfixUnaryNotPlusMinusExp node)
	{
		defaultCase(node);
	}
	public void caseAPrimaryPostfixExp(APrimaryPostfixExp node)
	{
		defaultCase(node);
	}
	public void caseAQualifiedName(AQualifiedName node)
	{
		defaultCase(node);
	}
	public void caseAQuestionConditionalExp(AQuestionConditionalExp node)
	{
		defaultCase(node);
	}
	public void caseAQuestionExp(AQuestionExp node)
	{
		defaultCase(node);
	}
	public void caseARelEqExp(ARelEqExp node)
	{
		defaultCase(node);
	}
	public void caseAReturnPropositionDefinition(AReturnPropositionDefinition node)
	{
		defaultCase(node);
	}
	public void caseAReturnValueExp(AReturnValueExp node)
	{
		defaultCase(node);
	}
	public void caseAReturnValuePrimaryExp(AReturnValuePrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAShiftLeftBinOp(AShiftLeftBinOp node)
	{
		defaultCase(node);
	}
	public void caseAShiftRelExp(AShiftRelExp node)
	{
		defaultCase(node);
	}
	public void caseAShortPrimitiveType(AShortPrimitiveType node)
	{
		defaultCase(node);
	}
	public void caseASignedRightShiftExp(ASignedRightShiftExp node)
	{
		defaultCase(node);
	}
	public void caseASignedShiftRightBinOp(ASignedShiftRightBinOp node)
	{
		defaultCase(node);
	}
	public void caseASimpleName(ASimpleName node)
	{
		defaultCase(node);
	}
	public void caseAStaticParams(AStaticParams node)
	{
		defaultCase(node);
	}
	public void caseAStringLiteral(AStringLiteral node)
	{
		defaultCase(node);
	}
	public void caseAStrongArrayNavigation(AStrongArrayNavigation node)
	{
		defaultCase(node);
	}
	public void caseAStrongCastExp(AStrongCastExp node)
	{
		defaultCase(node);
	}
	public void caseAStrongDivBinOp(AStrongDivBinOp node)
	{
		defaultCase(node);
	}
	public void caseAStrongDivMultExp(AStrongDivMultExp node)
	{
		defaultCase(node);
	}
	public void caseAStrongExpArrayAccess(AStrongExpArrayAccess node)
	{
		defaultCase(node);
	}
	public void caseAStrongExpCastExp(AStrongExpCastExp node)
	{
		defaultCase(node);
	}
	public void caseAStrongModBinOp(AStrongModBinOp node)
	{
		defaultCase(node);
	}
	public void caseAStrongModMultExp(AStrongModMultExp node)
	{
		defaultCase(node);
	}
	public void caseAStrongNameArrayAccess(AStrongNameArrayAccess node)
	{
		defaultCase(node);
	}
	public void caseAStrongNameCastExp(AStrongNameCastExp node)
	{
		defaultCase(node);
	}
	public void caseAStrongObjectFieldAccess(AStrongObjectFieldAccess node)
	{
		defaultCase(node);
	}
	public void caseAStrongObjectNavigation(AStrongObjectNavigation node)
	{
		defaultCase(node);
	}
	public void caseAStrongPrimitiveCastExp(AStrongPrimitiveCastExp node)
	{
		defaultCase(node);
	}
	public void caseAThisExp(AThisExp node)
	{
		defaultCase(node);
	}
	public void caseAThisPrimaryExp(AThisPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAThreadExp(AThreadExp node)
	{
		defaultCase(node);
	}
	public void caseAThreadPrimaryExp(AThreadPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseATimesBinOp(ATimesBinOp node)
	{
		defaultCase(node);
	}
	public void caseATimesMultExp(ATimesMultExp node)
	{
		defaultCase(node);
	}
	public void caseATrueLiteral(ATrueLiteral node)
	{
		defaultCase(node);
	}
	public void caseAUnaryExpMultExp(AUnaryExpMultExp node)
	{
		defaultCase(node);
	}
	public void caseAUnaryNotPlusMinusUnaryExp(AUnaryNotPlusMinusUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseAUnit(AUnit node)
	{
		defaultCase(node);
	}
	public void caseAUnsignedRightShiftExp(AUnsignedRightShiftExp node)
	{
		defaultCase(node);
	}
	public void caseAUnsignedShiftRightBinOp(AUnsignedShiftRightBinOp node)
	{
		defaultCase(node);
	}
	public void caseAXorExclusiveOrExp(AXorExclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseAXorInclusiveOrExp(AXorInclusiveOrExp node)
	{
		defaultCase(node);
	}
	public void caseEOF(EOF node)
	{
		defaultCase(node);
	}
	public void caseStart(Start node)
	{
		defaultCase(node);
	}
	public void caseTAnd(TAnd node)
	{
		defaultCase(node);
	}
	public void caseTBitAnd(TBitAnd node)
	{
		defaultCase(node);
	}
	public void caseTBitComplement(TBitComplement node)
	{
		defaultCase(node);
	}
	public void caseTBitOr(TBitOr node)
	{
		defaultCase(node);
	}
	public void caseTBitXor(TBitXor node)
	{
		defaultCase(node);
	}
	public void caseTBoolean(TBoolean node)
	{
		defaultCase(node);
	}
	public void caseTByte(TByte node)
	{
		defaultCase(node);
	}
	public void caseTChar(TChar node)
	{
		defaultCase(node);
	}
	public void caseTCharLiteral(TCharLiteral node)
	{
		defaultCase(node);
	}
	public void caseTColon(TColon node)
	{
		defaultCase(node);
	}
	public void caseTComma(TComma node)
	{
		defaultCase(node);
	}
	public void caseTDecIntLiteral(TDecIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseTDecLongLiteral(TDecLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseTDim(TDim node)
	{
		defaultCase(node);
	}
	public void caseTDocumentationComment(TDocumentationComment node)
	{
		defaultCase(node);
	}
	public void caseTDot(TDot node)
	{
		defaultCase(node);
	}
	public void caseTDouble(TDouble node)
	{
		defaultCase(node);
	}
	public void caseTDoubleLiteral(TDoubleLiteral node)
	{
		defaultCase(node);
	}
	public void caseTEndOfLineComment(TEndOfLineComment node)
	{
		defaultCase(node);
	}
	public void caseTEqual(TEqual node)
	{
		defaultCase(node);
	}
	public void caseTExpression(TExpression node)
	{
		defaultCase(node);
	}
	public void caseTFalse(TFalse node)
	{
		defaultCase(node);
	}
	public void caseTFloat(TFloat node)
	{
		defaultCase(node);
	}
	public void caseTFloatLiteral(TFloatLiteral node)
	{
		defaultCase(node);
	}
	public void caseTGreater(TGreater node)
	{
		defaultCase(node);
	}
	public void caseTGreaterEqual(TGreaterEqual node)
	{
		defaultCase(node);
	}
	public void caseTHexIntLiteral(THexIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseTHexLongLiteral(THexLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseTId(TId node)
	{
		defaultCase(node);
	}
	public void caseTInstanceof(TInstanceof node)
	{
		defaultCase(node);
	}
	public void caseTInt(TInt node)
	{
		defaultCase(node);
	}
	public void caseTInvoke(TInvoke node)
	{
		defaultCase(node);
	}
	public void caseTLBrace(TLBrace node)
	{
		defaultCase(node);
	}
	public void caseTLBracket(TLBracket node)
	{
		defaultCase(node);
	}
	public void caseTLess(TLess node)
	{
		defaultCase(node);
	}
	public void caseTLessEqual(TLessEqual node)
	{
		defaultCase(node);
	}
	public void caseTLocation(TLocation node)
	{
		defaultCase(node);
	}
	public void caseTLong(TLong node)
	{
		defaultCase(node);
	}
	public void caseTLParen(TLParen node)
	{
		defaultCase(node);
	}
	public void caseTMinus(TMinus node)
	{
		defaultCase(node);
	}
	public void caseTNot(TNot node)
	{
		defaultCase(node);
	}
	public void caseTNotEqual(TNotEqual node)
	{
		defaultCase(node);
	}
	public void caseTNull(TNull node)
	{
		defaultCase(node);
	}
	public void caseTOctIntLiteral(TOctIntLiteral node)
	{
		defaultCase(node);
	}
	public void caseTOctLongLiteral(TOctLongLiteral node)
	{
		defaultCase(node);
	}
	public void caseTOr(TOr node)
	{
		defaultCase(node);
	}
	public void caseTPlus(TPlus node)
	{
		defaultCase(node);
	}
	public void caseTQuestion(TQuestion node)
	{
		defaultCase(node);
	}
	public void caseTRBrace(TRBrace node)
	{
		defaultCase(node);
	}
	public void caseTRBracket(TRBracket node)
	{
		defaultCase(node);
	}
	public void caseTReturn(TReturn node)
	{
		defaultCase(node);
	}
	public void caseTRetVal(TRetVal node)
	{
		defaultCase(node);
	}
	public void caseTRParen(TRParen node)
	{
		defaultCase(node);
	}
	public void caseTSemicolon(TSemicolon node)
	{
		defaultCase(node);
	}
	public void caseTShiftLeft(TShiftLeft node)
	{
		defaultCase(node);
	}
	public void caseTShort(TShort node)
	{
		defaultCase(node);
	}
	public void caseTSignedShiftRight(TSignedShiftRight node)
	{
		defaultCase(node);
	}
	public void caseTStar(TStar node)
	{
		defaultCase(node);
	}
	public void caseTStringLiteral(TStringLiteral node)
	{
		defaultCase(node);
	}
	public void caseTStrongDiv(TStrongDiv node)
	{
		defaultCase(node);
	}
	public void caseTStrongMod(TStrongMod node)
	{
		defaultCase(node);
	}
	public void caseTThis(TThis node)
	{
		defaultCase(node);
	}
	public void caseTThread(TThread node)
	{
		defaultCase(node);
	}
	public void caseTTraditionalComment(TTraditionalComment node)
	{
		defaultCase(node);
	}
	public void caseTTrue(TTrue node)
	{
		defaultCase(node);
	}
	public void caseTUnsignedShiftRight(TUnsignedShiftRight node)
	{
		defaultCase(node);
	}
	public void caseTWeakDiv(TWeakDiv node)
	{
		defaultCase(node);
	}
	public void caseTWeakMod(TWeakMod node)
	{
		defaultCase(node);
	}
	public void caseTWhiteSpace(TWhiteSpace node)
	{
		defaultCase(node);
	}
	public void defaultCase(Node node)
	{
	}
	public Object getIn(Node node)
	{
		if(in == null)
		{
			return null;
		}

		return in.get(node);
	}
	public Object getOut(Node node)
	{
		if(out == null)
		{
			return null;
		}

		return out.get(node);
	}
	public void setIn(Node node, Object in)
	{
		if(this.in == null)
		{
			this.in = new Hashtable(1);
		}

		if(in != null)
		{
			this.in.put(node, in);
		}
		else
		{
			this.in.remove(node);
		}
	}
	public void setOut(Node node, Object out)
	{
		if(this.out == null)
		{
			this.out = new Hashtable(1);
		}

		if(out != null)
		{
			this.out.put(node, out);
		}
		else
		{
			this.out.remove(node);
		}
	}
}
