package edu.ksu.cis.bandera.specification.analysis;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import edu.ksu.cis.bandera.specification.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
	public void caseAAndAndExp(AAndAndExp node)
	{
		inAAndAndExp(node);
		if(node.getUnaryExp() != null)
		{
			node.getUnaryExp().apply(this);
		}
		if(node.getAnd() != null)
		{
			node.getAnd().apply(this);
		}
		if(node.getAndExp() != null)
		{
			node.getAndExp().apply(this);
		}
		outAAndAndExp(node);
	}
	public void caseAAndBinOp(AAndBinOp node)
	{
		inAAndBinOp(node);
		if(node.getAnd() != null)
		{
			node.getAnd().apply(this);
		}
		outAAndBinOp(node);
	}
	public void caseAAndOrExp(AAndOrExp node)
	{
		inAAndOrExp(node);
		if(node.getAndExp() != null)
		{
			node.getAndExp().apply(this);
		}
		outAAndOrExp(node);
	}
	public void caseAArgsArgs(AArgsArgs node)
	{
		inAArgsArgs(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getComma() != null)
		{
			node.getComma().apply(this);
		}
		if(node.getArgs() != null)
		{
			node.getArgs().apply(this);
		}
		outAArgsArgs(node);
	}
	public void caseAAssert(AAssert node)
	{
		inAAssert(node);
		if(node.getSemicolon() != null)
		{
			node.getSemicolon().apply(this);
		}
		if(node.getRBrace() != null)
		{
			node.getRBrace().apply(this);
		}
		if(node.getNames() != null)
		{
			node.getNames().apply(this);
		}
		if(node.getLBrace() != null)
		{
			node.getLBrace().apply(this);
		}
		if(node.getAssertions() != null)
		{
			node.getAssertions().apply(this);
		}
		if(node.getEnable() != null)
		{
			node.getEnable().apply(this);
		}
		if(node.getColon() != null)
		{
			node.getColon().apply(this);
		}
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getDocumentationComment() != null)
		{
			node.getDocumentationComment().apply(this);
		}
		outAAssert(node);
	}
	public void caseAAssertDef(AAssertDef node)
	{
		inAAssertDef(node);
		if(node.getAssert() != null)
		{
			node.getAssert().apply(this);
		}
		outAAssertDef(node);
	}
	public void caseAAssertionImport(AAssertionImport node)
	{
		inAAssertionImport(node);
		if(node.getSemicolon() != null)
		{
			node.getSemicolon().apply(this);
		}
		if(node.getImportNames() != null)
		{
			node.getImportNames().apply(this);
		}
		if(node.getAssertion() != null)
		{
			node.getAssertion().apply(this);
		}
		if(node.getImport() != null)
		{
			node.getImport().apply(this);
		}
		outAAssertionImport(node);
	}
	public void caseABinaryExp(ABinaryExp node)
	{
		inABinaryExp(node);
		if(node.getRight() != null)
		{
			node.getRight().apply(this);
		}
		if(node.getBinOp() != null)
		{
			node.getBinOp().apply(this);
		}
		if(node.getLeft() != null)
		{
			node.getLeft().apply(this);
		}
		outABinaryExp(node);
	}
	public void caseACommaFormatWord(ACommaFormatWord node)
	{
		inACommaFormatWord(node);
		if(node.getComma() != null)
		{
			node.getComma().apply(this);
		}
		outACommaFormatWord(node);
	}
	public void caseACommaWord(ACommaWord node)
	{
		inACommaWord(node);
		if(node.getComma() != null)
		{
			node.getComma().apply(this);
		}
		outACommaWord(node);
	}
	public void caseAComplementExp(AComplementExp node)
	{
		inAComplementExp(node);
		if(node.getExp() != null)
		{
			node.getExp().apply(this);
		}
		if(node.getNot() != null)
		{
			node.getNot().apply(this);
		}
		outAComplementExp(node);
	}
	public void caseAComplementUnaryExp(AComplementUnaryExp node)
	{
		inAComplementUnaryExp(node);
		if(node.getPrimaryExp() != null)
		{
			node.getPrimaryExp().apply(this);
		}
		if(node.getNot() != null)
		{
			node.getNot().apply(this);
		}
		outAComplementUnaryExp(node);
	}
	public void caseADotFormatWord(ADotFormatWord node)
	{
		inADotFormatWord(node);
		if(node.getDot() != null)
		{
			node.getDot().apply(this);
		}
		outADotFormatWord(node);
	}
	public void caseADotWord(ADotWord node)
	{
		inADotWord(node);
		if(node.getDot() != null)
		{
			node.getDot().apply(this);
		}
		outADotWord(node);
	}
	public void caseAExactQtlBinding(AExactQtlBinding node)
	{
		inAExactQtlBinding(node);
		if(node.getColon() != null)
		{
			node.getColon().apply(this);
		}
		outAExactQtlBinding(node);
	}
	public void caseAExpWord(AExpWord node)
	{
		inAExpWord(node);
		if(node.getRBrace() != null)
		{
			node.getRBrace().apply(this);
		}
		if(node.getExp() != null)
		{
			node.getExp().apply(this);
		}
		if(node.getLBrace() != null)
		{
			node.getLBrace().apply(this);
		}
		outAExpWord(node);
	}
	public void caseAFilterTypeOp(AFilterTypeOp node)
	{
		inAFilterTypeOp(node);
		if(node.getMinus() != null)
		{
			node.getMinus().apply(this);
		}
		outAFilterTypeOp(node);
	}
	public void caseAFormat(AFormat node)
	{
		inAFormat(node);
		if(node.getQuote2() != null)
		{
			node.getQuote2().apply(this);
		}
		{
			Object temp[] = node.getFormatWord().toArray();
			for(int i = temp.length - 1; i >= 0; i--)
			{
				((PFormatWord) temp[i]).apply(this);
			}
		}
		if(node.getQuote1() != null)
		{
			node.getQuote1().apply(this);
		}
		outAFormat(node);
	}
	public void caseAFormatUnit(AFormatUnit node)
	{
		inAFormatUnit(node);
		if(node.getFormat() != null)
		{
			node.getFormat().apply(this);
		}
		outAFormatUnit(node);
	}
	public void caseAHoleFormatWord(AHoleFormatWord node)
	{
		inAHoleFormatWord(node);
		if(node.getRBrace() != null)
		{
			node.getRBrace().apply(this);
		}
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getLBrace() != null)
		{
			node.getLBrace().apply(this);
		}
		outAHoleFormatWord(node);
	}
	public void caseAIdArgs(AIdArgs node)
	{
		inAIdArgs(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		outAIdArgs(node);
	}
	public void caseAIdFormatWord(AIdFormatWord node)
	{
		inAIdFormatWord(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		outAIdFormatWord(node);
	}
	public void caseAIdIds(AIdIds node)
	{
		inAIdIds(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		outAIdIds(node);
	}
	public void caseAIdsIds(AIdsIds node)
	{
		inAIdsIds(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getComma() != null)
		{
			node.getComma().apply(this);
		}
		if(node.getIds() != null)
		{
			node.getIds().apply(this);
		}
		outAIdsIds(node);
	}
	public void caseAIdWord(AIdWord node)
	{
		inAIdWord(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		outAIdWord(node);
	}
	public void caseAImplicationExp(AImplicationExp node)
	{
		inAImplicationExp(node);
		if(node.getImplicationExp() != null)
		{
			node.getImplicationExp().apply(this);
		}
		outAImplicationExp(node);
	}
	public void caseAImplyBinOp(AImplyBinOp node)
	{
		inAImplyBinOp(node);
		if(node.getImply() != null)
		{
			node.getImply().apply(this);
		}
		outAImplyBinOp(node);
	}
	public void caseAImplyImplicationExp(AImplyImplicationExp node)
	{
		inAImplyImplicationExp(node);
		if(node.getOrExp() != null)
		{
			node.getOrExp().apply(this);
		}
		if(node.getImply() != null)
		{
			node.getImply().apply(this);
		}
		if(node.getImplicationExp() != null)
		{
			node.getImplicationExp().apply(this);
		}
		outAImplyImplicationExp(node);
	}
	public void caseAInstanceQtlBinding(AInstanceQtlBinding node)
	{
		inAInstanceQtlBinding(node);
		if(node.getInstance() != null)
		{
			node.getInstance().apply(this);
		}
		outAInstanceQtlBinding(node);
	}
	public void caseANameImportNames(ANameImportNames node)
	{
		inANameImportNames(node);
		if(node.getImportName() != null)
		{
			node.getImportName().apply(this);
		}
		outANameImportNames(node);
	}
	public void caseANameNames(ANameNames node)
	{
		inANameNames(node);
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		outANameNames(node);
	}
	public void caseANamePrimaryTypeExp(ANamePrimaryTypeExp node)
	{
		inANamePrimaryTypeExp(node);
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		outANamePrimaryTypeExp(node);
	}
	public void caseANamesImportNames(ANamesImportNames node)
	{
		inANamesImportNames(node);
		if(node.getImportName() != null)
		{
			node.getImportName().apply(this);
		}
		if(node.getComma() != null)
		{
			node.getComma().apply(this);
		}
		if(node.getImportNames() != null)
		{
			node.getImportNames().apply(this);
		}
		outANamesImportNames(node);
	}
	public void caseANamesNames(ANamesNames node)
	{
		inANamesNames(node);
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		if(node.getComma() != null)
		{
			node.getComma().apply(this);
		}
		if(node.getNames() != null)
		{
			node.getNames().apply(this);
		}
		outANamesNames(node);
	}
	public void caseANumberFormatWord(ANumberFormatWord node)
	{
		inANumberFormatWord(node);
		if(node.getNumber() != null)
		{
			node.getNumber().apply(this);
		}
		outANumberFormatWord(node);
	}
	public void caseANumberWord(ANumberWord node)
	{
		inANumberWord(node);
		if(node.getNumber() != null)
		{
			node.getNumber().apply(this);
		}
		outANumberWord(node);
	}
	public void caseAOnDemandImportName(AOnDemandImportName node)
	{
		inAOnDemandImportName(node);
		if(node.getStar() != null)
		{
			node.getStar().apply(this);
		}
		if(node.getDot() != null)
		{
			node.getDot().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		outAOnDemandImportName(node);
	}
	public void caseAOpTypeExp(AOpTypeExp node)
	{
		inAOpTypeExp(node);
		if(node.getTypeExp() != null)
		{
			node.getTypeExp().apply(this);
		}
		if(node.getTypeOp() != null)
		{
			node.getTypeOp().apply(this);
		}
		if(node.getPrimaryTypeExp() != null)
		{
			node.getPrimaryTypeExp().apply(this);
		}
		outAOpTypeExp(node);
	}
	public void caseAOrBinOp(AOrBinOp node)
	{
		inAOrBinOp(node);
		if(node.getOr() != null)
		{
			node.getOr().apply(this);
		}
		outAOrBinOp(node);
	}
	public void caseAOrImplicationExp(AOrImplicationExp node)
	{
		inAOrImplicationExp(node);
		if(node.getOrExp() != null)
		{
			node.getOrExp().apply(this);
		}
		outAOrImplicationExp(node);
	}
	public void caseAOrOrExp(AOrOrExp node)
	{
		inAOrOrExp(node);
		if(node.getAndExp() != null)
		{
			node.getAndExp().apply(this);
		}
		if(node.getOr() != null)
		{
			node.getOr().apply(this);
		}
		if(node.getOrExp() != null)
		{
			node.getOrExp().apply(this);
		}
		outAOrOrExp(node);
	}
	public void caseAParenExp(AParenExp node)
	{
		inAParenExp(node);
		if(node.getRParen() != null)
		{
			node.getRParen().apply(this);
		}
		if(node.getExp() != null)
		{
			node.getExp().apply(this);
		}
		if(node.getLParen() != null)
		{
			node.getLParen().apply(this);
		}
		outAParenExp(node);
	}
	public void caseAParenPrimaryExp(AParenPrimaryExp node)
	{
		inAParenPrimaryExp(node);
		if(node.getRParen() != null)
		{
			node.getRParen().apply(this);
		}
		if(node.getExp() != null)
		{
			node.getExp().apply(this);
		}
		if(node.getLParen() != null)
		{
			node.getLParen().apply(this);
		}
		outAParenPrimaryExp(node);
	}
	public void caseAParenPrimaryTypeExp(AParenPrimaryTypeExp node)
	{
		inAParenPrimaryTypeExp(node);
		if(node.getRParen() != null)
		{
			node.getRParen().apply(this);
		}
		if(node.getTypeExp() != null)
		{
			node.getTypeExp().apply(this);
		}
		if(node.getLParen() != null)
		{
			node.getLParen().apply(this);
		}
		outAParenPrimaryTypeExp(node);
	}
	public void caseAPredicateExp(APredicateExp node)
	{
		inAPredicateExp(node);
		if(node.getRParen() != null)
		{
			node.getRParen().apply(this);
		}
		if(node.getArgs() != null)
		{
			node.getArgs().apply(this);
		}
		if(node.getLParen() != null)
		{
			node.getLParen().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		outAPredicateExp(node);
	}
	public void caseAPredicateImport(APredicateImport node)
	{
		inAPredicateImport(node);
		if(node.getSemicolon() != null)
		{
			node.getSemicolon().apply(this);
		}
		if(node.getImportNames() != null)
		{
			node.getImportNames().apply(this);
		}
		if(node.getPredicate() != null)
		{
			node.getPredicate().apply(this);
		}
		if(node.getImport() != null)
		{
			node.getImport().apply(this);
		}
		outAPredicateImport(node);
	}
	public void caseAPredicatePrimaryExp(APredicatePrimaryExp node)
	{
		inAPredicatePrimaryExp(node);
		if(node.getRParen() != null)
		{
			node.getRParen().apply(this);
		}
		if(node.getArgs() != null)
		{
			node.getArgs().apply(this);
		}
		if(node.getLParen() != null)
		{
			node.getLParen().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		outAPredicatePrimaryExp(node);
	}
	public void caseAPrimaryTypeExp(APrimaryTypeExp node)
	{
		inAPrimaryTypeExp(node);
		if(node.getPrimaryTypeExp() != null)
		{
			node.getPrimaryTypeExp().apply(this);
		}
		outAPrimaryTypeExp(node);
	}
	public void caseAPrimaryUnaryExp(APrimaryUnaryExp node)
	{
		inAPrimaryUnaryExp(node);
		if(node.getPrimaryExp() != null)
		{
			node.getPrimaryExp().apply(this);
		}
		outAPrimaryUnaryExp(node);
	}
	public void caseAPropertiesUnit(APropertiesUnit node)
	{
		inAPropertiesUnit(node);
		{
			Object temp[] = node.getDef().toArray();
			for(int i = temp.length - 1; i >= 0; i--)
			{
				((PDef) temp[i]).apply(this);
			}
		}
		{
			Object temp[] = node.getImport().toArray();
			for(int i = temp.length - 1; i >= 0; i--)
			{
				((PImport) temp[i]).apply(this);
			}
		}
		outAPropertiesUnit(node);
	}
	public void caseAQtl(AQtl node)
	{
		inAQtl(node);
		if(node.getDot() != null)
		{
			node.getDot().apply(this);
		}
		if(node.getRBracket() != null)
		{
			node.getRBracket().apply(this);
		}
		if(node.getTypeExp() != null)
		{
			node.getTypeExp().apply(this);
		}
		if(node.getQtlBinding() != null)
		{
			node.getQtlBinding().apply(this);
		}
		if(node.getIds() != null)
		{
			node.getIds().apply(this);
		}
		if(node.getLBracket() != null)
		{
			node.getLBracket().apply(this);
		}
		if(node.getForall() != null)
		{
			node.getForall().apply(this);
		}
		outAQtl(node);
	}
	public void caseAQualifiedName(AQualifiedName node)
	{
		inAQualifiedName(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getDot() != null)
		{
			node.getDot().apply(this);
		}
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		outAQualifiedName(node);
	}
	public void caseASimpleName(ASimpleName node)
	{
		inASimpleName(node);
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		outASimpleName(node);
	}
	public void caseASpecificImportName(ASpecificImportName node)
	{
		inASpecificImportName(node);
		if(node.getName() != null)
		{
			node.getName().apply(this);
		}
		outASpecificImportName(node);
	}
	public void caseATl(ATl node)
	{
		inATl(node);
		if(node.getSemicolon() != null)
		{
			node.getSemicolon().apply(this);
		}
		{
			Object temp[] = node.getWord().toArray();
			for(int i = temp.length - 1; i >= 0; i--)
			{
				((PWord) temp[i]).apply(this);
			}
		}
		{
			Object temp[] = node.getQtl().toArray();
			for(int i = temp.length - 1; i >= 0; i--)
			{
				((PQtl) temp[i]).apply(this);
			}
		}
		if(node.getColon() != null)
		{
			node.getColon().apply(this);
		}
		if(node.getId() != null)
		{
			node.getId().apply(this);
		}
		if(node.getDocumentationComment() != null)
		{
			node.getDocumentationComment().apply(this);
		}
		outATl(node);
	}
	public void caseATlDef(ATlDef node)
	{
		inATlDef(node);
		if(node.getTl() != null)
		{
			node.getTl().apply(this);
		}
		outATlDef(node);
	}
	public void caseATypeImport(ATypeImport node)
	{
		inATypeImport(node);
		if(node.getSemicolon() != null)
		{
			node.getSemicolon().apply(this);
		}
		if(node.getImportNames() != null)
		{
			node.getImportNames().apply(this);
		}
		if(node.getImport() != null)
		{
			node.getImport().apply(this);
		}
		outATypeImport(node);
	}
	public void caseAUnaryAndExp(AUnaryAndExp node)
	{
		inAUnaryAndExp(node);
		if(node.getUnaryExp() != null)
		{
			node.getUnaryExp().apply(this);
		}
		outAUnaryAndExp(node);
	}
	public void caseAUnionTypeOp(AUnionTypeOp node)
	{
		inAUnionTypeOp(node);
		if(node.getPlus() != null)
		{
			node.getPlus().apply(this);
		}
		outAUnionTypeOp(node);
	}
	public void caseStart(Start node)
	{
		inStart(node);
		node.getEOF().apply(this);
		node.getPUnit().apply(this);
		outStart(node);
	}
	public void defaultIn(Node node)
	{
	}
	public void defaultOut(Node node)
	{
	}
	public void inAAndAndExp(AAndAndExp node)
	{
		defaultIn(node);
	}
	public void inAAndBinOp(AAndBinOp node)
	{
		defaultIn(node);
	}
	public void inAAndOrExp(AAndOrExp node)
	{
		defaultIn(node);
	}
	public void inAArgsArgs(AArgsArgs node)
	{
		defaultIn(node);
	}
	public void inAAssert(AAssert node)
	{
		defaultIn(node);
	}
	public void inAAssertDef(AAssertDef node)
	{
		defaultIn(node);
	}
	public void inAAssertionImport(AAssertionImport node)
	{
		defaultIn(node);
	}
	public void inABinaryExp(ABinaryExp node)
	{
		defaultIn(node);
	}
	public void inACommaFormatWord(ACommaFormatWord node)
	{
		defaultIn(node);
	}
	public void inACommaWord(ACommaWord node)
	{
		defaultIn(node);
	}
	public void inAComplementExp(AComplementExp node)
	{
		defaultIn(node);
	}
	public void inAComplementUnaryExp(AComplementUnaryExp node)
	{
		defaultIn(node);
	}
	public void inADotFormatWord(ADotFormatWord node)
	{
		defaultIn(node);
	}
	public void inADotWord(ADotWord node)
	{
		defaultIn(node);
	}
	public void inAExactQtlBinding(AExactQtlBinding node)
	{
		defaultIn(node);
	}
	public void inAExpWord(AExpWord node)
	{
		defaultIn(node);
	}
	public void inAFilterTypeOp(AFilterTypeOp node)
	{
		defaultIn(node);
	}
	public void inAFormat(AFormat node)
	{
		defaultIn(node);
	}
	public void inAFormatUnit(AFormatUnit node)
	{
		defaultIn(node);
	}
	public void inAHoleFormatWord(AHoleFormatWord node)
	{
		defaultIn(node);
	}
	public void inAIdArgs(AIdArgs node)
	{
		defaultIn(node);
	}
	public void inAIdFormatWord(AIdFormatWord node)
	{
		defaultIn(node);
	}
	public void inAIdIds(AIdIds node)
	{
		defaultIn(node);
	}
	public void inAIdsIds(AIdsIds node)
	{
		defaultIn(node);
	}
	public void inAIdWord(AIdWord node)
	{
		defaultIn(node);
	}
	public void inAImplicationExp(AImplicationExp node)
	{
		defaultIn(node);
	}
	public void inAImplyBinOp(AImplyBinOp node)
	{
		defaultIn(node);
	}
	public void inAImplyImplicationExp(AImplyImplicationExp node)
	{
		defaultIn(node);
	}
	public void inAInstanceQtlBinding(AInstanceQtlBinding node)
	{
		defaultIn(node);
	}
	public void inANameImportNames(ANameImportNames node)
	{
		defaultIn(node);
	}
	public void inANameNames(ANameNames node)
	{
		defaultIn(node);
	}
	public void inANamePrimaryTypeExp(ANamePrimaryTypeExp node)
	{
		defaultIn(node);
	}
	public void inANamesImportNames(ANamesImportNames node)
	{
		defaultIn(node);
	}
	public void inANamesNames(ANamesNames node)
	{
		defaultIn(node);
	}
	public void inANumberFormatWord(ANumberFormatWord node)
	{
		defaultIn(node);
	}
	public void inANumberWord(ANumberWord node)
	{
		defaultIn(node);
	}
	public void inAOnDemandImportName(AOnDemandImportName node)
	{
		defaultIn(node);
	}
	public void inAOpTypeExp(AOpTypeExp node)
	{
		defaultIn(node);
	}
	public void inAOrBinOp(AOrBinOp node)
	{
		defaultIn(node);
	}
	public void inAOrImplicationExp(AOrImplicationExp node)
	{
		defaultIn(node);
	}
	public void inAOrOrExp(AOrOrExp node)
	{
		defaultIn(node);
	}
	public void inAParenExp(AParenExp node)
	{
		defaultIn(node);
	}
	public void inAParenPrimaryExp(AParenPrimaryExp node)
	{
		defaultIn(node);
	}
	public void inAParenPrimaryTypeExp(AParenPrimaryTypeExp node)
	{
		defaultIn(node);
	}
	public void inAPredicateExp(APredicateExp node)
	{
		defaultIn(node);
	}
	public void inAPredicateImport(APredicateImport node)
	{
		defaultIn(node);
	}
	public void inAPredicatePrimaryExp(APredicatePrimaryExp node)
	{
		defaultIn(node);
	}
	public void inAPrimaryTypeExp(APrimaryTypeExp node)
	{
		defaultIn(node);
	}
	public void inAPrimaryUnaryExp(APrimaryUnaryExp node)
	{
		defaultIn(node);
	}
	public void inAPropertiesUnit(APropertiesUnit node)
	{
		defaultIn(node);
	}
	public void inAQtl(AQtl node)
	{
		defaultIn(node);
	}
	public void inAQualifiedName(AQualifiedName node)
	{
		defaultIn(node);
	}
	public void inASimpleName(ASimpleName node)
	{
		defaultIn(node);
	}
	public void inASpecificImportName(ASpecificImportName node)
	{
		defaultIn(node);
	}
	public void inATl(ATl node)
	{
		defaultIn(node);
	}
	public void inATlDef(ATlDef node)
	{
		defaultIn(node);
	}
	public void inATypeImport(ATypeImport node)
	{
		defaultIn(node);
	}
	public void inAUnaryAndExp(AUnaryAndExp node)
	{
		defaultIn(node);
	}
	public void inAUnionTypeOp(AUnionTypeOp node)
	{
		defaultIn(node);
	}
	public void inStart(Start node)
	{
		defaultIn(node);
	}
	public void outAAndAndExp(AAndAndExp node)
	{
		defaultOut(node);
	}
	public void outAAndBinOp(AAndBinOp node)
	{
		defaultOut(node);
	}
	public void outAAndOrExp(AAndOrExp node)
	{
		defaultOut(node);
	}
	public void outAArgsArgs(AArgsArgs node)
	{
		defaultOut(node);
	}
	public void outAAssert(AAssert node)
	{
		defaultOut(node);
	}
	public void outAAssertDef(AAssertDef node)
	{
		defaultOut(node);
	}
	public void outAAssertionImport(AAssertionImport node)
	{
		defaultOut(node);
	}
	public void outABinaryExp(ABinaryExp node)
	{
		defaultOut(node);
	}
	public void outACommaFormatWord(ACommaFormatWord node)
	{
		defaultOut(node);
	}
	public void outACommaWord(ACommaWord node)
	{
		defaultOut(node);
	}
	public void outAComplementExp(AComplementExp node)
	{
		defaultOut(node);
	}
	public void outAComplementUnaryExp(AComplementUnaryExp node)
	{
		defaultOut(node);
	}
	public void outADotFormatWord(ADotFormatWord node)
	{
		defaultOut(node);
	}
	public void outADotWord(ADotWord node)
	{
		defaultOut(node);
	}
	public void outAExactQtlBinding(AExactQtlBinding node)
	{
		defaultOut(node);
	}
	public void outAExpWord(AExpWord node)
	{
		defaultOut(node);
	}
	public void outAFilterTypeOp(AFilterTypeOp node)
	{
		defaultOut(node);
	}
	public void outAFormat(AFormat node)
	{
		defaultOut(node);
	}
	public void outAFormatUnit(AFormatUnit node)
	{
		defaultOut(node);
	}
	public void outAHoleFormatWord(AHoleFormatWord node)
	{
		defaultOut(node);
	}
	public void outAIdArgs(AIdArgs node)
	{
		defaultOut(node);
	}
	public void outAIdFormatWord(AIdFormatWord node)
	{
		defaultOut(node);
	}
	public void outAIdIds(AIdIds node)
	{
		defaultOut(node);
	}
	public void outAIdsIds(AIdsIds node)
	{
		defaultOut(node);
	}
	public void outAIdWord(AIdWord node)
	{
		defaultOut(node);
	}
	public void outAImplicationExp(AImplicationExp node)
	{
		defaultOut(node);
	}
	public void outAImplyBinOp(AImplyBinOp node)
	{
		defaultOut(node);
	}
	public void outAImplyImplicationExp(AImplyImplicationExp node)
	{
		defaultOut(node);
	}
	public void outAInstanceQtlBinding(AInstanceQtlBinding node)
	{
		defaultOut(node);
	}
	public void outANameImportNames(ANameImportNames node)
	{
		defaultOut(node);
	}
	public void outANameNames(ANameNames node)
	{
		defaultOut(node);
	}
	public void outANamePrimaryTypeExp(ANamePrimaryTypeExp node)
	{
		defaultOut(node);
	}
	public void outANamesImportNames(ANamesImportNames node)
	{
		defaultOut(node);
	}
	public void outANamesNames(ANamesNames node)
	{
		defaultOut(node);
	}
	public void outANumberFormatWord(ANumberFormatWord node)
	{
		defaultOut(node);
	}
	public void outANumberWord(ANumberWord node)
	{
		defaultOut(node);
	}
	public void outAOnDemandImportName(AOnDemandImportName node)
	{
		defaultOut(node);
	}
	public void outAOpTypeExp(AOpTypeExp node)
	{
		defaultOut(node);
	}
	public void outAOrBinOp(AOrBinOp node)
	{
		defaultOut(node);
	}
	public void outAOrImplicationExp(AOrImplicationExp node)
	{
		defaultOut(node);
	}
	public void outAOrOrExp(AOrOrExp node)
	{
		defaultOut(node);
	}
	public void outAParenExp(AParenExp node)
	{
		defaultOut(node);
	}
	public void outAParenPrimaryExp(AParenPrimaryExp node)
	{
		defaultOut(node);
	}
	public void outAParenPrimaryTypeExp(AParenPrimaryTypeExp node)
	{
		defaultOut(node);
	}
	public void outAPredicateExp(APredicateExp node)
	{
		defaultOut(node);
	}
	public void outAPredicateImport(APredicateImport node)
	{
		defaultOut(node);
	}
	public void outAPredicatePrimaryExp(APredicatePrimaryExp node)
	{
		defaultOut(node);
	}
	public void outAPrimaryTypeExp(APrimaryTypeExp node)
	{
		defaultOut(node);
	}
	public void outAPrimaryUnaryExp(APrimaryUnaryExp node)
	{
		defaultOut(node);
	}
	public void outAPropertiesUnit(APropertiesUnit node)
	{
		defaultOut(node);
	}
	public void outAQtl(AQtl node)
	{
		defaultOut(node);
	}
	public void outAQualifiedName(AQualifiedName node)
	{
		defaultOut(node);
	}
	public void outASimpleName(ASimpleName node)
	{
		defaultOut(node);
	}
	public void outASpecificImportName(ASpecificImportName node)
	{
		defaultOut(node);
	}
	public void outATl(ATl node)
	{
		defaultOut(node);
	}
	public void outATlDef(ATlDef node)
	{
		defaultOut(node);
	}
	public void outATypeImport(ATypeImport node)
	{
		defaultOut(node);
	}
	public void outAUnaryAndExp(AUnaryAndExp node)
	{
		defaultOut(node);
	}
	public void outAUnionTypeOp(AUnionTypeOp node)
	{
		defaultOut(node);
	}
	public void outStart(Start node)
	{
		defaultOut(node);
	}
}
