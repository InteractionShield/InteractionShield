package edu.ksu.cis.bandera.specification.predicate.parser;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import edu.ksu.cis.bandera.specification.predicate.node.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

class TokenIndex extends AnalysisAdapter
{
	int index;

	public void caseEOF(EOF node)
	{
		index = 68;
	}
	public void caseTAnd(TAnd node)
	{
		index = 23;
	}
	public void caseTBitAnd(TBitAnd node)
	{
		index = 40;
	}
	public void caseTBitComplement(TBitComplement node)
	{
		index = 29;
	}
	public void caseTBitOr(TBitOr node)
	{
		index = 39;
	}
	public void caseTBitXor(TBitXor node)
	{
		index = 38;
	}
	public void caseTBoolean(TBoolean node)
	{
		index = 41;
	}
	public void caseTByte(TByte node)
	{
		index = 42;
	}
	public void caseTChar(TChar node)
	{
		index = 44;
	}
	public void caseTCharLiteral(TCharLiteral node)
	{
		index = 65;
	}
	public void caseTColon(TColon node)
	{
		index = 14;
	}
	public void caseTComma(TComma node)
	{
		index = 15;
	}
	public void caseTDecIntLiteral(TDecIntLiteral node)
	{
		index = 57;
	}
	public void caseTDecLongLiteral(TDecLongLiteral node)
	{
		index = 60;
	}
	public void caseTDim(TDim node)
	{
		index = 3;
	}
	public void caseTDocumentationComment(TDocumentationComment node)
	{
		index = 1;
	}
	public void caseTDot(TDot node)
	{
		index = 16;
	}
	public void caseTDouble(TDouble node)
	{
		index = 48;
	}
	public void caseTDoubleLiteral(TDoubleLiteral node)
	{
		index = 63;
	}
	public void caseTEndOfLineComment(TEndOfLineComment node)
	{
		index = 2;
	}
	public void caseTEqual(TEqual node)
	{
		index = 17;
	}
	public void caseTExpression(TExpression node)
	{
		index = 52;
	}
	public void caseTFalse(TFalse node)
	{
		index = 5;
	}
	public void caseTFloat(TFloat node)
	{
		index = 47;
	}
	public void caseTFloatLiteral(TFloatLiteral node)
	{
		index = 64;
	}
	public void caseTGreater(TGreater node)
	{
		index = 19;
	}
	public void caseTGreaterEqual(TGreaterEqual node)
	{
		index = 21;
	}
	public void caseTHexIntLiteral(THexIntLiteral node)
	{
		index = 58;
	}
	public void caseTHexLongLiteral(THexLongLiteral node)
	{
		index = 61;
	}
	public void caseTId(TId node)
	{
		index = 67;
	}
	public void caseTInstanceof(TInstanceof node)
	{
		index = 53;
	}
	public void caseTInt(TInt node)
	{
		index = 45;
	}
	public void caseTInvoke(TInvoke node)
	{
		index = 49;
	}
	public void caseTLBrace(TLBrace node)
	{
		index = 9;
	}
	public void caseTLBracket(TLBracket node)
	{
		index = 11;
	}
	public void caseTLess(TLess node)
	{
		index = 18;
	}
	public void caseTLessEqual(TLessEqual node)
	{
		index = 20;
	}
	public void caseTLocation(TLocation node)
	{
		index = 51;
	}
	public void caseTLong(TLong node)
	{
		index = 46;
	}
	public void caseTLParen(TLParen node)
	{
		index = 7;
	}
	public void caseTMinus(TMinus node)
	{
		index = 32;
	}
	public void caseTNot(TNot node)
	{
		index = 28;
	}
	public void caseTNotEqual(TNotEqual node)
	{
		index = 22;
	}
	public void caseTNull(TNull node)
	{
		index = 6;
	}
	public void caseTOctIntLiteral(TOctIntLiteral node)
	{
		index = 59;
	}
	public void caseTOctLongLiteral(TOctLongLiteral node)
	{
		index = 62;
	}
	public void caseTOr(TOr node)
	{
		index = 24;
	}
	public void caseTPlus(TPlus node)
	{
		index = 31;
	}
	public void caseTQuestion(TQuestion node)
	{
		index = 30;
	}
	public void caseTRBrace(TRBrace node)
	{
		index = 10;
	}
	public void caseTRBracket(TRBracket node)
	{
		index = 12;
	}
	public void caseTReturn(TReturn node)
	{
		index = 50;
	}
	public void caseTRetVal(TRetVal node)
	{
		index = 54;
	}
	public void caseTRParen(TRParen node)
	{
		index = 8;
	}
	public void caseTSemicolon(TSemicolon node)
	{
		index = 13;
	}
	public void caseTShiftLeft(TShiftLeft node)
	{
		index = 25;
	}
	public void caseTShort(TShort node)
	{
		index = 43;
	}
	public void caseTSignedShiftRight(TSignedShiftRight node)
	{
		index = 26;
	}
	public void caseTStar(TStar node)
	{
		index = 33;
	}
	public void caseTStringLiteral(TStringLiteral node)
	{
		index = 66;
	}
	public void caseTStrongDiv(TStrongDiv node)
	{
		index = 36;
	}
	public void caseTStrongMod(TStrongMod node)
	{
		index = 37;
	}
	public void caseTThis(TThis node)
	{
		index = 56;
	}
	public void caseTThread(TThread node)
	{
		index = 55;
	}
	public void caseTTraditionalComment(TTraditionalComment node)
	{
		index = 0;
	}
	public void caseTTrue(TTrue node)
	{
		index = 4;
	}
	public void caseTUnsignedShiftRight(TUnsignedShiftRight node)
	{
		index = 27;
	}
	public void caseTWeakDiv(TWeakDiv node)
	{
		index = 34;
	}
	public void caseTWeakMod(TWeakMod node)
	{
		index = 35;
	}
}
