package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AInstanceofExp extends PExp
{
	private PExp _exp_;
	private TInstanceof _instanceof_;
	private PName _type_;

	public AInstanceofExp()
	{
	}
	public AInstanceofExp(
		PExp _exp_,
		TInstanceof _instanceof_,
		PName _type_)
	{
		setExp(_exp_);

		setInstanceof(_instanceof_);

		setType(_type_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAInstanceofExp(this);
	}
	public Object clone()
	{
		return new AInstanceofExp(
			(PExp) cloneNode(_exp_),
			(TInstanceof) cloneNode(_instanceof_),
			(PName) cloneNode(_type_));
	}
	public PExp getExp()
	{
		return _exp_;
	}
	public TInstanceof getInstanceof()
	{
		return _instanceof_;
	}
	public PName getType()
	{
		return _type_;
	}
	void removeChild(Node child)
	{
		if(_exp_ == child)
		{
			_exp_ = null;
			return;
		}

		if(_instanceof_ == child)
		{
			_instanceof_ = null;
			return;
		}

		if(_type_ == child)
		{
			_type_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_exp_ == oldChild)
		{
			setExp((PExp) newChild);
			return;
		}

		if(_instanceof_ == oldChild)
		{
			setInstanceof((TInstanceof) newChild);
			return;
		}

		if(_type_ == oldChild)
		{
			setType((PName) newChild);
			return;
		}

	}
	public void setExp(PExp node)
	{
		if(_exp_ != null)
		{
			_exp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_exp_ = node;
	}
	public void setInstanceof(TInstanceof node)
	{
		if(_instanceof_ != null)
		{
			_instanceof_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_instanceof_ = node;
	}
	public void setType(PName node)
	{
		if(_type_ != null)
		{
			_type_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_type_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_exp_)
			+ toString(_instanceof_)
			+ toString(_type_);
	}
}
