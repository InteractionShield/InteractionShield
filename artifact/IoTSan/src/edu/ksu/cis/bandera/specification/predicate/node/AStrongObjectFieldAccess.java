package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AStrongObjectFieldAccess extends PFieldAccess
{
	private PPrimaryExp _primaryExp_;
	private TDot _dot_;
	private TId _id_;

	public AStrongObjectFieldAccess()
	{
	}
	public AStrongObjectFieldAccess(
		PPrimaryExp _primaryExp_,
		TDot _dot_,
		TId _id_)
	{
		setPrimaryExp(_primaryExp_);

		setDot(_dot_);

		setId(_id_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAStrongObjectFieldAccess(this);
	}
	public Object clone()
	{
		return new AStrongObjectFieldAccess(
			(PPrimaryExp) cloneNode(_primaryExp_),
			(TDot) cloneNode(_dot_),
			(TId) cloneNode(_id_));
	}
	public TDot getDot()
	{
		return _dot_;
	}
	public TId getId()
	{
		return _id_;
	}
	public PPrimaryExp getPrimaryExp()
	{
		return _primaryExp_;
	}
	void removeChild(Node child)
	{
		if(_primaryExp_ == child)
		{
			_primaryExp_ = null;
			return;
		}

		if(_dot_ == child)
		{
			_dot_ = null;
			return;
		}

		if(_id_ == child)
		{
			_id_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_primaryExp_ == oldChild)
		{
			setPrimaryExp((PPrimaryExp) newChild);
			return;
		}

		if(_dot_ == oldChild)
		{
			setDot((TDot) newChild);
			return;
		}

		if(_id_ == oldChild)
		{
			setId((TId) newChild);
			return;
		}

	}
	public void setDot(TDot node)
	{
		if(_dot_ != null)
		{
			_dot_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_dot_ = node;
	}
	public void setId(TId node)
	{
		if(_id_ != null)
		{
			_id_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_id_ = node;
	}
	public void setPrimaryExp(PPrimaryExp node)
	{
		if(_primaryExp_ != null)
		{
			_primaryExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_primaryExp_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_primaryExp_)
			+ toString(_dot_)
			+ toString(_id_);
	}
}
