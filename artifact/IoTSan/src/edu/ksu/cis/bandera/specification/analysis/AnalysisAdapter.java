package edu.ksu.cis.bandera.specification.analysis;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.node.*;

public class AnalysisAdapter implements Analysis
{
	private Hashtable in;
	private Hashtable out;

	public void caseAAndAndExp(AAndAndExp node)
	{
		defaultCase(node);
	}
	public void caseAAndBinOp(AAndBinOp node)
	{
		defaultCase(node);
	}
	public void caseAAndOrExp(AAndOrExp node)
	{
		defaultCase(node);
	}
	public void caseAArgsArgs(AArgsArgs node)
	{
		defaultCase(node);
	}
	public void caseAAssert(AAssert node)
	{
		defaultCase(node);
	}
	public void caseAAssertDef(AAssertDef node)
	{
		defaultCase(node);
	}
	public void caseAAssertionImport(AAssertionImport node)
	{
		defaultCase(node);
	}
	public void caseABinaryExp(ABinaryExp node)
	{
		defaultCase(node);
	}
	public void caseACommaFormatWord(ACommaFormatWord node)
	{
		defaultCase(node);
	}
	public void caseACommaWord(ACommaWord node)
	{
		defaultCase(node);
	}
	public void caseAComplementExp(AComplementExp node)
	{
		defaultCase(node);
	}
	public void caseAComplementUnaryExp(AComplementUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseADotFormatWord(ADotFormatWord node)
	{
		defaultCase(node);
	}
	public void caseADotWord(ADotWord node)
	{
		defaultCase(node);
	}
	public void caseAExactQtlBinding(AExactQtlBinding node)
	{
		defaultCase(node);
	}
	public void caseAExpWord(AExpWord node)
	{
		defaultCase(node);
	}
	public void caseAFilterTypeOp(AFilterTypeOp node)
	{
		defaultCase(node);
	}
	public void caseAFormat(AFormat node)
	{
		defaultCase(node);
	}
	public void caseAFormatUnit(AFormatUnit node)
	{
		defaultCase(node);
	}
	public void caseAHoleFormatWord(AHoleFormatWord node)
	{
		defaultCase(node);
	}
	public void caseAIdArgs(AIdArgs node)
	{
		defaultCase(node);
	}
	public void caseAIdFormatWord(AIdFormatWord node)
	{
		defaultCase(node);
	}
	public void caseAIdIds(AIdIds node)
	{
		defaultCase(node);
	}
	public void caseAIdsIds(AIdsIds node)
	{
		defaultCase(node);
	}
	public void caseAIdWord(AIdWord node)
	{
		defaultCase(node);
	}
	public void caseAImplicationExp(AImplicationExp node)
	{
		defaultCase(node);
	}
	public void caseAImplyBinOp(AImplyBinOp node)
	{
		defaultCase(node);
	}
	public void caseAImplyImplicationExp(AImplyImplicationExp node)
	{
		defaultCase(node);
	}
	public void caseAInstanceQtlBinding(AInstanceQtlBinding node)
	{
		defaultCase(node);
	}
	public void caseANameImportNames(ANameImportNames node)
	{
		defaultCase(node);
	}
	public void caseANameNames(ANameNames node)
	{
		defaultCase(node);
	}
	public void caseANamePrimaryTypeExp(ANamePrimaryTypeExp node)
	{
		defaultCase(node);
	}
	public void caseANamesImportNames(ANamesImportNames node)
	{
		defaultCase(node);
	}
	public void caseANamesNames(ANamesNames node)
	{
		defaultCase(node);
	}
	public void caseANumberFormatWord(ANumberFormatWord node)
	{
		defaultCase(node);
	}
	public void caseANumberWord(ANumberWord node)
	{
		defaultCase(node);
	}
	public void caseAOnDemandImportName(AOnDemandImportName node)
	{
		defaultCase(node);
	}
	public void caseAOpTypeExp(AOpTypeExp node)
	{
		defaultCase(node);
	}
	public void caseAOrBinOp(AOrBinOp node)
	{
		defaultCase(node);
	}
	public void caseAOrImplicationExp(AOrImplicationExp node)
	{
		defaultCase(node);
	}
	public void caseAOrOrExp(AOrOrExp node)
	{
		defaultCase(node);
	}
	public void caseAParenExp(AParenExp node)
	{
		defaultCase(node);
	}
	public void caseAParenPrimaryExp(AParenPrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAParenPrimaryTypeExp(AParenPrimaryTypeExp node)
	{
		defaultCase(node);
	}
	public void caseAPredicateExp(APredicateExp node)
	{
		defaultCase(node);
	}
	public void caseAPredicateImport(APredicateImport node)
	{
		defaultCase(node);
	}
	public void caseAPredicatePrimaryExp(APredicatePrimaryExp node)
	{
		defaultCase(node);
	}
	public void caseAPrimaryTypeExp(APrimaryTypeExp node)
	{
		defaultCase(node);
	}
	public void caseAPrimaryUnaryExp(APrimaryUnaryExp node)
	{
		defaultCase(node);
	}
	public void caseAPropertiesUnit(APropertiesUnit node)
	{
		defaultCase(node);
	}
	public void caseAQtl(AQtl node)
	{
		defaultCase(node);
	}
	public void caseAQualifiedName(AQualifiedName node)
	{
		defaultCase(node);
	}
	public void caseASimpleName(ASimpleName node)
	{
		defaultCase(node);
	}
	public void caseASpecificImportName(ASpecificImportName node)
	{
		defaultCase(node);
	}
	public void caseATl(ATl node)
	{
		defaultCase(node);
	}
	public void caseATlDef(ATlDef node)
	{
		defaultCase(node);
	}
	public void caseATypeImport(ATypeImport node)
	{
		defaultCase(node);
	}
	public void caseAUnaryAndExp(AUnaryAndExp node)
	{
		defaultCase(node);
	}
	public void caseAUnionTypeOp(AUnionTypeOp node)
	{
		defaultCase(node);
	}
	public void caseEOF(EOF node)
	{
		defaultCase(node);
	}
	public void caseStart(Start node)
	{
		defaultCase(node);
	}
	public void caseTAnd(TAnd node)
	{
		defaultCase(node);
	}
	public void caseTAssertion(TAssertion node)
	{
		defaultCase(node);
	}
	public void caseTAssertions(TAssertions node)
	{
		defaultCase(node);
	}
	public void caseTColon(TColon node)
	{
		defaultCase(node);
	}
	public void caseTComma(TComma node)
	{
		defaultCase(node);
	}
	public void caseTDocumentationComment(TDocumentationComment node)
	{
		defaultCase(node);
	}
	public void caseTDot(TDot node)
	{
		defaultCase(node);
	}
	public void caseTDoubleQuote(TDoubleQuote node)
	{
		defaultCase(node);
	}
	public void caseTEnable(TEnable node)
	{
		defaultCase(node);
	}
	public void caseTEndOfLineComment(TEndOfLineComment node)
	{
		defaultCase(node);
	}
	public void caseTForall(TForall node)
	{
		defaultCase(node);
	}
	public void caseTGreater(TGreater node)
	{
		defaultCase(node);
	}
	public void caseTId(TId node)
	{
		defaultCase(node);
	}
	public void caseTImply(TImply node)
	{
		defaultCase(node);
	}
	public void caseTImport(TImport node)
	{
		defaultCase(node);
	}
	public void caseTInstance(TInstance node)
	{
		defaultCase(node);
	}
	public void caseTLBrace(TLBrace node)
	{
		defaultCase(node);
	}
	public void caseTLBracket(TLBracket node)
	{
		defaultCase(node);
	}
	public void caseTLess(TLess node)
	{
		defaultCase(node);
	}
	public void caseTLessEqual(TLessEqual node)
	{
		defaultCase(node);
	}
	public void caseTLParen(TLParen node)
	{
		defaultCase(node);
	}
	public void caseTMinus(TMinus node)
	{
		defaultCase(node);
	}
	public void caseTNot(TNot node)
	{
		defaultCase(node);
	}
	public void caseTNumber(TNumber node)
	{
		defaultCase(node);
	}
	public void caseTOr(TOr node)
	{
		defaultCase(node);
	}
	public void caseTPlus(TPlus node)
	{
		defaultCase(node);
	}
	public void caseTPredicate(TPredicate node)
	{
		defaultCase(node);
	}
	public void caseTRBrace(TRBrace node)
	{
		defaultCase(node);
	}
	public void caseTRBracket(TRBracket node)
	{
		defaultCase(node);
	}
	public void caseTRParen(TRParen node)
	{
		defaultCase(node);
	}
	public void caseTSemicolon(TSemicolon node)
	{
		defaultCase(node);
	}
	public void caseTStar(TStar node)
	{
		defaultCase(node);
	}
	public void caseTTraditionalComment(TTraditionalComment node)
	{
		defaultCase(node);
	}
	public void caseTWhiteSpace(TWhiteSpace node)
	{
		defaultCase(node);
	}
	public void defaultCase(Node node)
	{
	}
	public Object getIn(Node node)
	{
		if(in == null)
		{
			return null;
		}

		return in.get(node);
	}
	public Object getOut(Node node)
	{
		if(out == null)
		{
			return null;
		}

		return out.get(node);
	}
	public void setIn(Node node, Object in)
	{
		if(this.in == null)
		{
			this.in = new Hashtable(1);
		}

		if(in != null)
		{
			this.in.put(node, in);
		}
		else
		{
			this.in.remove(node);
		}
	}
	public void setOut(Node node, Object out)
	{
		if(this.out == null)
		{
			this.out = new Hashtable(1);
		}

		if(out != null)
		{
			this.out.put(node, out);
		}
		else
		{
			this.out.remove(node);
		}
	}
}
