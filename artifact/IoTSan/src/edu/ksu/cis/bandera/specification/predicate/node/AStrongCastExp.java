package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AStrongCastExp extends PExp
{
	private TLParen _lParen_;
	private PName _type_;
	private final LinkedList _dim_ = new TypedLinkedList(new Dim_Cast());
	private TRParen _rParen_;
	private PExp _exp_;

	private class Dim_Cast implements Cast
	{
		public Object cast(Object o)
		{
			TDim node = (TDim) o;

			if((node.parent() != null) &&
				(node.parent() != AStrongCastExp.this))
			{
				node.parent().removeChild(node);
			}

			if((node.parent() == null) ||
				(node.parent() != AStrongCastExp.this))
			{
				node.parent(AStrongCastExp.this);
			}

			return node;
		}
	}
	public AStrongCastExp()
	{
	}
	public AStrongCastExp(
		TLParen _lParen_,
		PName _type_,
		XTDim _dim_,
		TRParen _rParen_,
		PExp _exp_)
	{
		setLParen(_lParen_);

		setType(_type_);

		if(_dim_ != null)
		{
			while(_dim_ instanceof X1TDim)
			{
				this._dim_.addFirst(((X1TDim) _dim_).getTDim());
				_dim_ = ((X1TDim) _dim_).getXTDim();
			}
			this._dim_.addFirst(((X2TDim) _dim_).getTDim());
		}

		setRParen(_rParen_);

		setExp(_exp_);

	}
	public AStrongCastExp(
		TLParen _lParen_,
		PName _type_,
		List _dim_,
		TRParen _rParen_,
		PExp _exp_)
	{
		setLParen(_lParen_);

		setType(_type_);

		{
			this._dim_.clear();
			this._dim_.addAll(_dim_);
		}

		setRParen(_rParen_);

		setExp(_exp_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAStrongCastExp(this);
	}
	public Object clone()
	{
		return new AStrongCastExp(
			(TLParen) cloneNode(_lParen_),
			(PName) cloneNode(_type_),
			cloneList(_dim_),
			(TRParen) cloneNode(_rParen_),
			(PExp) cloneNode(_exp_));
	}
	public LinkedList getDim()
	{
		return _dim_;
	}
	public PExp getExp()
	{
		return _exp_;
	}
	public TLParen getLParen()
	{
		return _lParen_;
	}
	public TRParen getRParen()
	{
		return _rParen_;
	}
	public PName getType()
	{
		return _type_;
	}
	void removeChild(Node child)
	{
		if(_lParen_ == child)
		{
			_lParen_ = null;
			return;
		}

		if(_type_ == child)
		{
			_type_ = null;
			return;
		}

		if(_dim_.remove(child))
		{
			return;
		}

		if(_rParen_ == child)
		{
			_rParen_ = null;
			return;
		}

		if(_exp_ == child)
		{
			_exp_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_lParen_ == oldChild)
		{
			setLParen((TLParen) newChild);
			return;
		}

		if(_type_ == oldChild)
		{
			setType((PName) newChild);
			return;
		}

		for(ListIterator i = _dim_.listIterator(); i.hasNext();)
		{
			if(i.next() == oldChild)
			{
				if(newChild != null)
				{
					i.set(newChild);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		if(_rParen_ == oldChild)
		{
			setRParen((TRParen) newChild);
			return;
		}

		if(_exp_ == oldChild)
		{
			setExp((PExp) newChild);
			return;
		}

	}
	public void setDim(List list)
	{
		_dim_.clear();
		_dim_.addAll(list);
	}
	public void setExp(PExp node)
	{
		if(_exp_ != null)
		{
			_exp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_exp_ = node;
	}
	public void setLParen(TLParen node)
	{
		if(_lParen_ != null)
		{
			_lParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_lParen_ = node;
	}
	public void setRParen(TRParen node)
	{
		if(_rParen_ != null)
		{
			_rParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_rParen_ = node;
	}
	public void setType(PName node)
	{
		if(_type_ != null)
		{
			_type_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_type_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_lParen_)
			+ toString(_type_)
			+ toString(_dim_)
			+ toString(_rParen_)
			+ toString(_exp_);
	}
}
