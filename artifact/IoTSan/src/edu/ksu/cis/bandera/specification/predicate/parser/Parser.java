package edu.ksu.cis.bandera.specification.predicate.parser;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import edu.ksu.cis.bandera.specification.predicate.lexer.*;
import edu.ksu.cis.bandera.specification.predicate.node.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
	public final Analysis ignoredTokens = new AnalysisAdapter();

	protected Node node;

	private final Lexer lexer;
	private final ListIterator stack = new LinkedList().listIterator();
	private int last_shift;
	private int last_pos;
	private int last_line;
	private Token last_token;
	private final TokenIndex converter = new TokenIndex();
	private final int[] action = new int[2];

	private final static int SHIFT = 0;
	private final static int REDUCE = 1;
	private final static int ACCEPT = 2;
	private final static int ERROR = 3;

	private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {2, SHIFT, 1}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 2}, {67, SHIFT, 13}, },
			{{-1, ERROR, 3}, {67, SHIFT, 14}, },
			{{-1, ERROR, 4}, {11, SHIFT, 15}, },
			{{-1, ERROR, 5}, {67, SHIFT, 16}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 7}, {68, ACCEPT, -1}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 1}, {16, SHIFT, 17}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, },
			{{-1, REDUCE, 2}, {2, SHIFT, 1}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, },
			{{-1, REDUCE, 6}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, },
			{{-1, ERROR, 13}, {7, SHIFT, 23}, },
			{{-1, ERROR, 14}, {7, SHIFT, 24}, },
			{{-1, ERROR, 15}, {67, SHIFT, 25}, },
			{{-1, ERROR, 16}, {7, SHIFT, 26}, },
			{{-1, ERROR, 17}, {67, SHIFT, 27}, },
			{{-1, REDUCE, 5}, {2, SHIFT, 1}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, },
			{{-1, REDUCE, 9}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 10}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 23}, {8, SHIFT, 29}, {56, SHIFT, 30}, {67, SHIFT, 6}, },
			{{-1, ERROR, 24}, {8, SHIFT, 34}, {56, SHIFT, 30}, {67, SHIFT, 6}, },
			{{-1, ERROR, 25}, {12, SHIFT, 36}, },
			{{-1, ERROR, 26}, {8, SHIFT, 37}, {56, SHIFT, 30}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 11}, {49, SHIFT, 2}, {50, SHIFT, 3}, {51, SHIFT, 4}, {52, SHIFT, 5}, },
			{{-1, ERROR, 29}, {13, SHIFT, 39}, {14, SHIFT, 40}, },
			{{-1, REDUCE, 41}, {15, SHIFT, 42}, },
			{{-1, ERROR, 31}, {8, SHIFT, 44}, },
			{{-1, REDUCE, 43}, {15, SHIFT, 45}, },
			{{-1, ERROR, 33}, {3, SHIFT, 46}, {16, SHIFT, 17}, {67, SHIFT, 47}, },
			{{-1, ERROR, 34}, {13, SHIFT, 49}, {14, SHIFT, 40}, },
			{{-1, ERROR, 35}, {8, SHIFT, 51}, },
			{{-1, ERROR, 36}, {67, SHIFT, 52}, },
			{{-1, ERROR, 37}, {14, SHIFT, 40}, },
			{{-1, ERROR, 38}, {8, SHIFT, 54}, },
			{{-1, REDUCE, 13}, {2, SHIFT, 1}, },
			{{-1, ERROR, 40}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 41}, {13, SHIFT, 98}, },
			{{-1, ERROR, 42}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 44}, {13, SHIFT, 100}, {14, SHIFT, 40}, },
			{{-1, ERROR, 45}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 48}, {3, SHIFT, 103}, {67, SHIFT, 104}, },
			{{-1, REDUCE, 21}, {2, SHIFT, 1}, },
			{{-1, ERROR, 50}, {13, SHIFT, 106}, },
			{{-1, ERROR, 51}, {13, SHIFT, 107}, {14, SHIFT, 40}, },
			{{-1, ERROR, 52}, {7, SHIFT, 109}, },
			{{-1, ERROR, 53}, {13, SHIFT, 110}, },
			{{-1, ERROR, 54}, {14, SHIFT, 40}, },
			{{-1, REDUCE, 17}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 142}, },
			{{-1, ERROR, 59}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {41, SHIFT, 112}, {42, SHIFT, 113}, {43, SHIFT, 114}, {44, SHIFT, 115}, {45, SHIFT, 116}, {46, SHIFT, 117}, {47, SHIFT, 118}, {48, SHIFT, 119}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 60}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 61}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 62}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 63}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 67}, {11, SHIFT, 127}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 66}, {11, SHIFT, 128}, {16, SHIFT, 129}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 83}, {33, SHIFT, 130}, {36, SHIFT, 131}, {37, SHIFT, 132}, },
			{{-1, REDUCE, 86}, {31, SHIFT, 133}, {32, SHIFT, 134}, },
			{{-1, REDUCE, 90}, {25, SHIFT, 135}, {26, SHIFT, 136}, {27, SHIFT, 137}, },
			{{-1, REDUCE, 96}, {18, SHIFT, 138}, {19, SHIFT, 139}, {20, SHIFT, 140}, {21, SHIFT, 141}, {53, SHIFT, 142}, },
			{{-1, REDUCE, 99}, {17, SHIFT, 143}, {22, SHIFT, 144}, },
			{{-1, REDUCE, 101}, {40, SHIFT, 145}, },
			{{-1, REDUCE, 103}, {38, SHIFT, 146}, },
			{{-1, REDUCE, 105}, {39, SHIFT, 147}, },
			{{-1, REDUCE, 107}, {23, SHIFT, 148}, },
			{{-1, REDUCE, 109}, {24, SHIFT, 149}, {30, SHIFT, 150}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 15}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 44}, {15, SHIFT, 45}, },
			{{-1, REDUCE, 14}, {2, SHIFT, 1}, },
			{{-1, ERROR, 101}, {13, SHIFT, 153}, },
			{{-1, ERROR, 102}, {3, SHIFT, 46}, {16, SHIFT, 17}, {67, SHIFT, 154}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 25}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 23}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 22}, {2, SHIFT, 1}, },
			{{-1, ERROR, 108}, {13, SHIFT, 158}, },
			{{-1, ERROR, 109}, {8, SHIFT, 159}, {56, SHIFT, 30}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 37}, {2, SHIFT, 1}, },
			{{-1, ERROR, 111}, {13, SHIFT, 162}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 67}, {3, SHIFT, 46}, {11, SHIFT, 127}, {16, SHIFT, 17}, },
			{{-1, ERROR, 121}, {8, SHIFT, 164}, },
			{{-1, ERROR, 122}, {3, SHIFT, 46}, {8, SHIFT, 165}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 127}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 128}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 129}, {67, SHIFT, 169}, },
			{{-1, ERROR, 130}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 131}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 132}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 133}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 134}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 135}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 136}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 137}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 138}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 139}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 140}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 141}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 142}, {67, SHIFT, 6}, },
			{{-1, ERROR, 143}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 144}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 145}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 146}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 147}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 148}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 149}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 150}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 19}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 18}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 16}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 155}, {3, SHIFT, 103}, {67, SHIFT, 192}, },
			{{-1, REDUCE, 27}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 26}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 24}, {2, SHIFT, 1}, },
			{{-1, ERROR, 159}, {13, SHIFT, 194}, {14, SHIFT, 40}, },
			{{-1, ERROR, 160}, {8, SHIFT, 196}, },
			{{-1, REDUCE, 39}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 38}, {2, SHIFT, 1}, },
			{{-1, ERROR, 163}, {3, SHIFT, 103}, {8, SHIFT, 198}, },
			{{-1, REDUCE, 60}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 165}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, ERROR, 166}, {3, SHIFT, 103}, {8, SHIFT, 201}, },
			{{-1, ERROR, 167}, {12, SHIFT, 202}, },
			{{-1, ERROR, 168}, {12, SHIFT, 203}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 84}, {33, SHIFT, 130}, {36, SHIFT, 131}, {37, SHIFT, 132}, },
			{{-1, REDUCE, 85}, {33, SHIFT, 130}, {36, SHIFT, 131}, {37, SHIFT, 132}, },
			{{-1, REDUCE, 87}, {31, SHIFT, 133}, {32, SHIFT, 134}, },
			{{-1, REDUCE, 88}, {31, SHIFT, 133}, {32, SHIFT, 134}, },
			{{-1, REDUCE, 89}, {31, SHIFT, 133}, {32, SHIFT, 134}, },
			{{-1, REDUCE, 91}, {25, SHIFT, 135}, {26, SHIFT, 136}, {27, SHIFT, 137}, },
			{{-1, REDUCE, 92}, {25, SHIFT, 135}, {26, SHIFT, 136}, {27, SHIFT, 137}, },
			{{-1, REDUCE, 93}, {25, SHIFT, 135}, {26, SHIFT, 136}, {27, SHIFT, 137}, },
			{{-1, REDUCE, 94}, {25, SHIFT, 135}, {26, SHIFT, 136}, {27, SHIFT, 137}, },
			{{-1, REDUCE, 95}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 97}, {18, SHIFT, 138}, {19, SHIFT, 139}, {20, SHIFT, 140}, {21, SHIFT, 141}, {53, SHIFT, 142}, },
			{{-1, REDUCE, 98}, {18, SHIFT, 138}, {19, SHIFT, 139}, {20, SHIFT, 140}, {21, SHIFT, 141}, {53, SHIFT, 142}, },
			{{-1, REDUCE, 100}, {17, SHIFT, 143}, {22, SHIFT, 144}, },
			{{-1, REDUCE, 102}, {40, SHIFT, 145}, },
			{{-1, REDUCE, 104}, {38, SHIFT, 146}, },
			{{-1, REDUCE, 106}, {39, SHIFT, 147}, },
			{{-1, REDUCE, 108}, {23, SHIFT, 148}, },
			{{-1, ERROR, 190}, {14, SHIFT, 204}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 28}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 29}, {2, SHIFT, 1}, },
			{{-1, ERROR, 195}, {13, SHIFT, 206}, },
			{{-1, ERROR, 196}, {13, SHIFT, 207}, {14, SHIFT, 40}, },
			{{-1, REDUCE, 40}, {2, SHIFT, 1}, },
			{{-1, ERROR, 198}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 201}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 204}, {4, SHIFT, 56}, {5, SHIFT, 57}, {6, SHIFT, 58}, {7, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {31, SHIFT, 62}, {32, SHIFT, 63}, {54, SHIFT, 64}, {55, SHIFT, 65}, {56, SHIFT, 66}, {57, SHIFT, 67}, {58, SHIFT, 68}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, {62, SHIFT, 72}, {63, SHIFT, 73}, {64, SHIFT, 74}, {65, SHIFT, 75}, {66, SHIFT, 76}, {67, SHIFT, 6}, },
			{{-1, REDUCE, 33}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 30}, {2, SHIFT, 1}, },
			{{-1, ERROR, 208}, {13, SHIFT, 214}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 35}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 34}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 36}, {2, SHIFT, 1}, },
		};*/
	private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {11, 20}, {18, 20}, {55, 20}, {105, 20}, {151, 20}, {152, 20}, {156, 20}, {157, 20}, {161, 20}, {191, 20}, {193, 20}, {197, 20}, {205, 20}, {212, 20}, {213, 20}, {215, 20}, },
			{{-1, 9}, {12, 22}, {19, 22}, {21, 22}, {28, 22}, },
			{{-1, 31}, {24, 35}, {26, 38}, {109, 160}, },
			{{-1, 43}, },
			{{-1, 32}, {42, 99}, },
			{{-1, 41}, {34, 50}, {37, 53}, {44, 101}, {51, 108}, {54, 111}, {159, 195}, {196, 208}, },
			{{-1, 77}, {0, 10}, {23, 33}, {24, 33}, {26, 33}, {42, 33}, {45, 102}, {59, 120}, {109, 33}, {142, 182}, },
			{{-1, 78}, },
			{{-1, 79}, },
			{{-1, -1}, },
			{{-1, 80}, },
			{{-1, 81}, },
			{{-1, 82}, },
			{{-1, 83}, {164, 199}, },
			{{-1, 84}, {60, 123}, {61, 124}, {62, 125}, {63, 126}, {130, 170}, {131, 171}, {132, 172}, {165, 200}, {198, 209}, {201, 210}, },
			{{-1, 85}, {133, 173}, {134, 174}, },
			{{-1, 86}, {135, 175}, {136, 176}, {137, 177}, },
			{{-1, 87}, {138, 178}, {139, 179}, {140, 180}, {141, 181}, },
			{{-1, 88}, {143, 183}, {144, 184}, },
			{{-1, 89}, {145, 185}, },
			{{-1, 90}, {146, 186}, },
			{{-1, 91}, {147, 187}, },
			{{-1, 92}, {148, 188}, },
			{{-1, 93}, {149, 189}, },
			{{-1, 94}, },
			{{-1, 95}, {204, 211}, },
			{{-1, 96}, {59, 121}, {127, 167}, {128, 168}, {150, 190}, },
			{{-1, -1}, },
			{{-1, 97}, },
			{{-1, 122}, },
			{{-1, 11}, {10, 18}, {39, 55}, {49, 105}, {98, 151}, {100, 152}, {106, 156}, {107, 157}, {110, 161}, {153, 191}, {158, 193}, {162, 197}, {194, 205}, {206, 212}, {207, 213}, {214, 215}, },
			{{-1, 12}, {10, 19}, {11, 21}, {18, 28}, },
			{{-1, 48}, {102, 155}, {120, 163}, {122, 166}, },
		};*/
	private static String[] errorMessages;
/*      {
			"expecting: end of line comment, 'INVOKE', 'RETURN', 'LOCATION', 'EXP', id, EOF",
			"expecting: end of line comment, 'INVOKE', 'RETURN', 'LOCATION', 'EXP', EOF",
			"expecting: id",
			"expecting: '['",
			"expecting: end of line comment, '[]', ')', '[', ']', ';', ':', '.', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '<<', '>>', '>>>', '?', '+', '-', '*', '/', '%', '^', '|', '&', 'INVOKE', 'RETURN', 'LOCATION', 'EXP', 'instanceof', id, EOF",
			"expecting: EOF",
			"expecting: 'INVOKE', 'RETURN', 'LOCATION', 'EXP', EOF",
			"expecting: end of line comment, '.', 'INVOKE', 'RETURN', 'LOCATION', 'EXP', EOF",
			"expecting: '('",
			"expecting: ')', 'this', id",
			"expecting: ']'",
			"expecting: ';', ':'",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: '[]', '.', id",
			"expecting: ':'",
			"expecting: 'true', 'false', 'null', '(', '!', '~', '+', '-', '$ret', '$thread', 'this', dec int literal, hex int literal, oct int literal, dec long literal, hex long literal, oct long literal, double literal, float literal, char literal, string literal, id",
			"expecting: ';'",
			"expecting: '[]', ')', id",
			"expecting: '[]', id",
			"expecting: ')', '[', ']', ';', ':', '.', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '<<', '>>', '>>>', '?', '+', '-', '*', '/', '%', '^', '|', '&', 'instanceof'",
			"expecting: 'true', 'false', 'null', '(', '!', '~', '+', '-', 'boolean', 'byte', 'short', 'char', 'int', 'long', 'float', 'double', '$ret', '$thread', 'this', dec int literal, hex int literal, oct int literal, dec long literal, hex long literal, oct long literal, double literal, float literal, char literal, string literal, id",
			"expecting: ')', ']', ';', ':', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '<<', '>>', '>>>', '?', '+', '-', '*', '/', '%', '^', '|', '&', 'instanceof'",
			"expecting: ')', ']', ';', ':', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '<<', '>>', '>>>', '?', '+', '-', '^', '|', '&', 'instanceof'",
			"expecting: ')', ']', ';', ':', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '<<', '>>', '>>>', '?', '^', '|', '&', 'instanceof'",
			"expecting: ')', ']', ';', ':', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '?', '^', '|', '&', 'instanceof'",
			"expecting: ')', ']', ';', ':', '==', '!=', '&&', '||', '?', '^', '|', '&'",
			"expecting: ')', ']', ';', ':', '&&', '||', '?', '^', '|', '&'",
			"expecting: ')', ']', ';', ':', '&&', '||', '?', '^', '|'",
			"expecting: ')', ']', ';', ':', '&&', '||', '?', '|'",
			"expecting: ')', ']', ';', ':', '&&', '||', '?'",
			"expecting: ')', ']', ';', ':', '||', '?'",
			"expecting: ')', ']', ';', ':'",
			"expecting: '[]', ')'",
			"expecting: '[]', ')', '[', '.', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '<<', '>>', '>>>', '?', '+', '-', '*', '/', '%', '^', '|', '&', 'instanceof'",
			"expecting: 'true', 'false', 'null', '(', ')', '[', ']', ';', ':', '.', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '<<', '>>', '>>>', '!', '~', '?', '+', '-', '*', '/', '%', '^', '|', '&', 'instanceof', '$ret', '$thread', 'this', dec int literal, hex int literal, oct int literal, dec long literal, hex long literal, oct long literal, double literal, float literal, char literal, string literal, id",
			"expecting: ')', ']', ';', ':', '.', '==', '<', '>', '<=', '>=', '!=', '&&', '||', '?', '^', '|', '&', 'instanceof'",
		};*/
	private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 2, 4, 5, 1, 6, 7, 1, 6, 8, 8, 2, 8, 2, 1, 6, 1, 6, 6, 9, 9, 10, 9, 4, 6, 11, 12, 13, 12, 14, 11, 13, 2, 15, 13, 1, 16, 17, 2, 13, 11, 2, 18, 12, 19, 1, 17, 11, 8, 17, 15, 1, 20, 20, 20, 21, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 17, 20, 1, 12, 1, 17, 14, 18, 12, 1, 1, 1, 17, 9, 1, 17, 33, 33, 33, 33, 33, 33, 33, 33, 34, 13, 33, 22, 22, 22, 22, 16, 16, 2, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2, 16, 16, 16, 16, 16, 16, 16, 16, 1, 1, 1, 12, 19, 1, 1, 1, 11, 13, 1, 1, 33, 35, 16, 33, 10, 10, 20, 22, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 36, 25, 25, 26, 27, 28, 29, 30, 15, 1, 12, 1, 1, 17, 11, 1, 16, 22, 22, 16, 20, 20, 16, 1, 1, 1, 17, 22, 22, 32, 1, 1, 1, 1, 
		};*/
	public Parser(Lexer lexer)
	{
		this.lexer = lexer;

		if(actionTable == null)
		{
			try
			{
				DataInputStream s = new DataInputStream(
					new BufferedInputStream(
					Parser.class.getResourceAsStream("parser.dat")));

				// read actionTable
				int length = s.readInt();
				actionTable = new int[length][][];
				for(int i = 0; i < actionTable.length; i++)
				{
					length = s.readInt();
					actionTable[i] = new int[length][3];
					for(int j = 0; j < actionTable[i].length; j++)
					{
						for(int k = 0; k < 3; k++)
						{
							actionTable[i][j][k] = s.readInt();
						}
					}
				}

				// read gotoTable
				length = s.readInt();
				gotoTable = new int[length][][];
				for(int i = 0; i < gotoTable.length; i++)
				{
					length = s.readInt();
					gotoTable[i] = new int[length][2];
					for(int j = 0; j < gotoTable[i].length; j++)
					{
						for(int k = 0; k < 2; k++)
						{
							gotoTable[i][j][k] = s.readInt();
						}
					}
				}

				// read errorMessages
				length = s.readInt();
				errorMessages = new String[length];
				for(int i = 0; i < errorMessages.length; i++)
				{
					length = s.readInt();
					StringBuffer buffer = new StringBuffer();

					for(int j = 0; j < length; j++)
					{
						buffer.append(s.readChar());
					}
					errorMessages[i] = buffer.toString();
				}

				// read errors
				length = s.readInt();
				errors = new int[length];
				for(int i = 0; i < errors.length; i++)
				{
					errors[i] = s.readInt();
				}

				s.close();
			}
			catch(Exception e)
			{
				throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
			}
		}
	}
	protected void filter() throws ParserException, LexerException, IOException
	{
	}
	private int goTo(int index)
	{
		int state = state();
		int low = 1;
		int high = gotoTable[index].length - 1;
		int value = gotoTable[index][0][1];

		while(low <= high)
		{
			int middle = (low + high) / 2;

			if(state < gotoTable[index][middle][0])
			{
				high = middle - 1;
			}
			else if(state > gotoTable[index][middle][0])
			{
				low = middle + 1;
			}
			else
			{
				value = gotoTable[index][middle][1];
				break;
			}
		}

		return value;
	}
	private int index(Switchable token)
	{
		converter.index = -1;
		token.apply(converter);
		return converter.index;
	}
	Node new0()
	{
		XPPropositionDefinition node3 = null;
		XPComment node2 = null;
		PName node1 = null;
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new1()
	{
		XPPropositionDefinition node3 = null;
		XPComment node2 = null;
		PName node1 = (PName) pop();
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new10()
	{
		XPPropositionDefinition node3 = (XPPropositionDefinition) pop();
		XPComment node2 = (XPComment) pop();
		PName node1 = null;
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new100()
	{
		PEqExp node3 = (PEqExp) pop();
		TBitAnd node2 = (TBitAnd) pop();
		PBitAndExp node1 = (PBitAndExp) pop();
		AAndBitAndExp node = new AAndBitAndExp(node1, node2, node3);
		return node;
	}
	Node new101()
	{
		PBitAndExp node1 = (PBitAndExp) pop();
		AAndExclusiveOrExp node = new AAndExclusiveOrExp(node1);
		return node;
	}
	Node new102()
	{
		PBitAndExp node3 = (PBitAndExp) pop();
		TBitXor node2 = (TBitXor) pop();
		PExclusiveOrExp node1 = (PExclusiveOrExp) pop();
		AXorExclusiveOrExp node = new AXorExclusiveOrExp(node1, node2, node3);
		return node;
	}
	Node new103()
	{
		PExclusiveOrExp node1 = (PExclusiveOrExp) pop();
		AXorInclusiveOrExp node = new AXorInclusiveOrExp(node1);
		return node;
	}
	Node new104()
	{
		PExclusiveOrExp node3 = (PExclusiveOrExp) pop();
		TBitOr node2 = (TBitOr) pop();
		PInclusiveOrExp node1 = (PInclusiveOrExp) pop();
		AOrInclusiveOrExp node = new AOrInclusiveOrExp(node1, node2, node3);
		return node;
	}
	Node new105()
	{
		PInclusiveOrExp node1 = (PInclusiveOrExp) pop();
		AInclusiveOrAndExp node = new AInclusiveOrAndExp(node1);
		return node;
	}
	Node new106()
	{
		PInclusiveOrExp node3 = (PInclusiveOrExp) pop();
		TAnd node2 = (TAnd) pop();
		PAndExp node1 = (PAndExp) pop();
		AAndAndExp node = new AAndAndExp(node1, node2, node3);
		return node;
	}
	Node new107()
	{
		PAndExp node1 = (PAndExp) pop();
		AAndOrExp node = new AAndOrExp(node1);
		return node;
	}
	Node new108()
	{
		PAndExp node3 = (PAndExp) pop();
		TOr node2 = (TOr) pop();
		POrExp node1 = (POrExp) pop();
		AOrOrExp node = new AOrOrExp(node1, node2, node3);
		return node;
	}
	Node new109()
	{
		POrExp node1 = (POrExp) pop();
		AOrConditionalExp node = new AOrConditionalExp(node1);
		return node;
	}
	Node new11()
	{
		XPPropositionDefinition node3 = (XPPropositionDefinition) pop();
		XPComment node2 = (XPComment) pop();
		PName node1 = (PName) pop();
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new110()
	{
		PConditionalExp node5 = (PConditionalExp) pop();
		TColon node4 = (TColon) pop();
		PExp node3 = (PExp) pop();
		TQuestion node2 = (TQuestion) pop();
		POrExp node1 = (POrExp) pop();
		AQuestionConditionalExp node = new AQuestionConditionalExp(node1, node2, node3, node4, node5);
		return node;
	}
	Node new111()
	{
		PConditionalExp node1 = (PConditionalExp) pop();
		AConditionalExp node = new AConditionalExp(node1);
		return node;
	}
	Node new112()
	{
		TEqual node1 = (TEqual) pop();
		AEqualBinOp node = new AEqualBinOp(node1);
		return node;
	}
	Node new113()
	{
		TNotEqual node1 = (TNotEqual) pop();
		ANotEqualBinOp node = new ANotEqualBinOp(node1);
		return node;
	}
	Node new114()
	{
		TGreater node1 = (TGreater) pop();
		AGreaterBinOp node = new AGreaterBinOp(node1);
		return node;
	}
	Node new115()
	{
		TGreaterEqual node1 = (TGreaterEqual) pop();
		AGreaterEqualBinOp node = new AGreaterEqualBinOp(node1);
		return node;
	}
	Node new116()
	{
		TLess node1 = (TLess) pop();
		ALessBinOp node = new ALessBinOp(node1);
		return node;
	}
	Node new117()
	{
		TLessEqual node1 = (TLessEqual) pop();
		ALessEqualBinOp node = new ALessEqualBinOp(node1);
		return node;
	}
	Node new118()
	{
		TAnd node1 = (TAnd) pop();
		AAndBinOp node = new AAndBinOp(node1);
		return node;
	}
	Node new119()
	{
		TOr node1 = (TOr) pop();
		AOrBinOp node = new AOrBinOp(node1);
		return node;
	}
	Node new12()
	{
		TEndOfLineComment node1 = (TEndOfLineComment) pop();
		AEndOfLineComment node = new AEndOfLineComment(node1);
		return node;
	}
	Node new120()
	{
		TPlus node1 = (TPlus) pop();
		APlusBinOp node = new APlusBinOp(node1);
		return node;
	}
	Node new121()
	{
		TMinus node1 = (TMinus) pop();
		AMinusBinOp node = new AMinusBinOp(node1);
		return node;
	}
	Node new122()
	{
		TStar node1 = (TStar) pop();
		ATimesBinOp node = new ATimesBinOp(node1);
		return node;
	}
	Node new123()
	{
		TStrongDiv node1 = (TStrongDiv) pop();
		AStrongDivBinOp node = new AStrongDivBinOp(node1);
		return node;
	}
	Node new124()
	{
		TStrongMod node1 = (TStrongMod) pop();
		AStrongModBinOp node = new AStrongModBinOp(node1);
		return node;
	}
	Node new125()
	{
		TShiftLeft node1 = (TShiftLeft) pop();
		AShiftLeftBinOp node = new AShiftLeftBinOp(node1);
		return node;
	}
	Node new126()
	{
		TSignedShiftRight node1 = (TSignedShiftRight) pop();
		ASignedShiftRightBinOp node = new ASignedShiftRightBinOp(node1);
		return node;
	}
	Node new127()
	{
		TUnsignedShiftRight node1 = (TUnsignedShiftRight) pop();
		AUnsignedShiftRightBinOp node = new AUnsignedShiftRightBinOp(node1);
		return node;
	}
	Node new128()
	{
		TBitAnd node1 = (TBitAnd) pop();
		ABitAndBinOp node = new ABitAndBinOp(node1);
		return node;
	}
	Node new129()
	{
		TBitOr node1 = (TBitOr) pop();
		ABitOrBinOp node = new ABitOrBinOp(node1);
		return node;
	}
	Node new13()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new130()
	{
		TBitXor node1 = (TBitXor) pop();
		ABitXorBinOp node = new ABitXorBinOp(node1);
		return node;
	}
	Node new131()
	{
		TDecIntLiteral node1 = (TDecIntLiteral) pop();
		ADecIntLiteral node = new ADecIntLiteral(node1);
		return node;
	}
	Node new132()
	{
		THexIntLiteral node1 = (THexIntLiteral) pop();
		AHexIntLiteral node = new AHexIntLiteral(node1);
		return node;
	}
	Node new133()
	{
		TOctIntLiteral node1 = (TOctIntLiteral) pop();
		AOctIntLiteral node = new AOctIntLiteral(node1);
		return node;
	}
	Node new134()
	{
		TDecLongLiteral node1 = (TDecLongLiteral) pop();
		ADecLongLiteral node = new ADecLongLiteral(node1);
		return node;
	}
	Node new135()
	{
		THexLongLiteral node1 = (THexLongLiteral) pop();
		AHexLongLiteral node = new AHexLongLiteral(node1);
		return node;
	}
	Node new136()
	{
		TOctLongLiteral node1 = (TOctLongLiteral) pop();
		AOctLongLiteral node = new AOctLongLiteral(node1);
		return node;
	}
	Node new137()
	{
		TFloatLiteral node1 = (TFloatLiteral) pop();
		AFloatLiteral node = new AFloatLiteral(node1);
		return node;
	}
	Node new138()
	{
		TDoubleLiteral node1 = (TDoubleLiteral) pop();
		ADoubleLiteral node = new ADoubleLiteral(node1);
		return node;
	}
	Node new139()
	{
		TCharLiteral node1 = (TCharLiteral) pop();
		ACharLiteral node = new ACharLiteral(node1);
		return node;
	}
	Node new14()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new140()
	{
		TTrue node1 = (TTrue) pop();
		ATrueLiteral node = new ATrueLiteral(node1);
		return node;
	}
	Node new141()
	{
		TFalse node1 = (TFalse) pop();
		AFalseLiteral node = new AFalseLiteral(node1);
		return node;
	}
	Node new142()
	{
		TNull node1 = (TNull) pop();
		ANullLiteral node = new ANullLiteral(node1);
		return node;
	}
	Node new143()
	{
		TStringLiteral node1 = (TStringLiteral) pop();
		AStringLiteral node = new AStringLiteral(node1);
		return node;
	}
	Node new144()
	{
		TBoolean node1 = (TBoolean) pop();
		ABooleanPrimitiveType node = new ABooleanPrimitiveType(node1);
		return node;
	}
	Node new145()
	{
		TByte node1 = (TByte) pop();
		ABytePrimitiveType node = new ABytePrimitiveType(node1);
		return node;
	}
	Node new146()
	{
		TShort node1 = (TShort) pop();
		AShortPrimitiveType node = new AShortPrimitiveType(node1);
		return node;
	}
	Node new147()
	{
		TChar node1 = (TChar) pop();
		ACharPrimitiveType node = new ACharPrimitiveType(node1);
		return node;
	}
	Node new148()
	{
		TInt node1 = (TInt) pop();
		AIntPrimitiveType node = new AIntPrimitiveType(node1);
		return node;
	}
	Node new149()
	{
		TLong node1 = (TLong) pop();
		ALongPrimitiveType node = new ALongPrimitiveType(node1);
		return node;
	}
	Node new15()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new150()
	{
		TFloat node1 = (TFloat) pop();
		AFloatPrimitiveType node = new AFloatPrimitiveType(node1);
		return node;
	}
	Node new151()
	{
		TDouble node1 = (TDouble) pop();
		ADoublePrimitiveType node = new ADoublePrimitiveType(node1);
		return node;
	}
	Node new16()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new17()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new18()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new19()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new2()
	{
		XPPropositionDefinition node3 = null;
		XPComment node2 = (XPComment) pop();
		PName node1 = null;
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new20()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TInvoke node1 = (TInvoke) pop();
		AInvokePropositionDefinition node = new AInvokePropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new21()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new22()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new23()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new24()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new25()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new26()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = null;
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new27()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new28()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TReturn node1 = (TReturn) pop();
		AReturnPropositionDefinition node = new AReturnPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new29()
	{
		XPComment node11 = null;
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = null;
		TRParen node8 = (TRParen) pop();
		PParams node7 = null;
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new3()
	{
		PComment node2 = (PComment) pop();
		XPComment node1 = (XPComment) pop();
		X1PComment node = new X1PComment(node1, node2);
		return node;
	}
	Node new30()
	{
		XPComment node11 = null;
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = null;
		TRParen node8 = (TRParen) pop();
		PParams node7 = (PParams) pop();
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new31()
	{
		XPComment node11 = null;
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = (PColonExp) pop();
		TRParen node8 = (TRParen) pop();
		PParams node7 = null;
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new32()
	{
		XPComment node11 = null;
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = (PColonExp) pop();
		TRParen node8 = (TRParen) pop();
		PParams node7 = (PParams) pop();
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new33()
	{
		XPComment node11 = (XPComment) pop();
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = null;
		TRParen node8 = (TRParen) pop();
		PParams node7 = null;
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new34()
	{
		XPComment node11 = (XPComment) pop();
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = null;
		TRParen node8 = (TRParen) pop();
		PParams node7 = (PParams) pop();
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new35()
	{
		XPComment node11 = (XPComment) pop();
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = (PColonExp) pop();
		TRParen node8 = (TRParen) pop();
		PParams node7 = null;
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new36()
	{
		XPComment node11 = (XPComment) pop();
		TSemicolon node10 = (TSemicolon) pop();
		PColonExp node9 = (PColonExp) pop();
		TRParen node8 = (TRParen) pop();
		PParams node7 = (PParams) pop();
		TLParen node6 = (TLParen) pop();
		TId node5 = (TId) pop();
		TRBracket node4 = (TRBracket) pop();
		TId node3 = (TId) pop();
		TLBracket node2 = (TLBracket) pop();
		TLocation node1 = (TLocation) pop();
		ALocationPropositionDefinition node = new ALocationPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11);
		return node;
	}
	Node new37()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TExpression node1 = (TExpression) pop();
		AExpressionPropositionDefinition node = new AExpressionPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new38()
	{
		XPComment node8 = null;
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TExpression node1 = (TExpression) pop();
		AExpressionPropositionDefinition node = new AExpressionPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new39()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = null;
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TExpression node1 = (TExpression) pop();
		AExpressionPropositionDefinition node = new AExpressionPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new4()
	{
		PComment node1 = (PComment) pop();
		X2PComment node = new X2PComment(node1);
		return node;
	}
	Node new40()
	{
		XPComment node8 = (XPComment) pop();
		TSemicolon node7 = (TSemicolon) pop();
		PColonExp node6 = (PColonExp) pop();
		TRParen node5 = (TRParen) pop();
		PParams node4 = (PParams) pop();
		TLParen node3 = (TLParen) pop();
		TId node2 = (TId) pop();
		TExpression node1 = (TExpression) pop();
		AExpressionPropositionDefinition node = new AExpressionPropositionDefinition(node1, node2, node3, node4, node5, node6, node7, node8);
		return node;
	}
	Node new41()
	{
		PCpl node2 = null;
		TThis node1 = (TThis) pop();
		AInstanceParams node = new AInstanceParams(node1, node2);
		return node;
	}
	Node new42()
	{
		PCpl node2 = (PCpl) pop();
		TThis node1 = (TThis) pop();
		AInstanceParams node = new AInstanceParams(node1, node2);
		return node;
	}
	Node new43()
	{
		PParamList node1 = (PParamList) pop();
		AStaticParams node = new AStaticParams(node1);
		return node;
	}
	Node new44()
	{
		PParamList node2 = (PParamList) pop();
		TComma node1 = (TComma) pop();
		ACpl node = new ACpl(node1, node2);
		return node;
	}
	Node new45()
	{
		TId node3 = (TId) pop();
		XTDim node2 = null;
		PName node1 = (PName) pop();
		AParamParamList node = new AParamParamList(node1, node2, node3);
		return node;
	}
	Node new46()
	{
		TId node3 = (TId) pop();
		XTDim node2 = (XTDim) pop();
		PName node1 = (PName) pop();
		AParamParamList node = new AParamParamList(node1, node2, node3);
		return node;
	}
	Node new47()
	{
		TDim node2 = (TDim) pop();
		XTDim node1 = (XTDim) pop();
		X1TDim node = new X1TDim(node1, node2);
		return node;
	}
	Node new48()
	{
		TDim node1 = (TDim) pop();
		X2TDim node = new X2TDim(node1);
		return node;
	}
	Node new49()
	{
		TId node5 = (TId) pop();
		XTDim node4 = null;
		PName node3 = (PName) pop();
		TComma node2 = (TComma) pop();
		PParamList node1 = (PParamList) pop();
		AParamsParamList node = new AParamsParamList(node1, node2, node3, node4, node5);
		return node;
	}
	Node new5()
	{
		XPPropositionDefinition node3 = null;
		XPComment node2 = (XPComment) pop();
		PName node1 = (PName) pop();
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new50()
	{
		TId node5 = (TId) pop();
		XTDim node4 = (XTDim) pop();
		PName node3 = (PName) pop();
		TComma node2 = (TComma) pop();
		PParamList node1 = (PParamList) pop();
		AParamsParamList node = new AParamsParamList(node1, node2, node3, node4, node5);
		return node;
	}
	Node new51()
	{
		PExp node2 = (PExp) pop();
		TColon node1 = (TColon) pop();
		AColonExp node = new AColonExp(node1, node2);
		return node;
	}
	Node new52()
	{
		TId node1 = (TId) pop();
		ASimpleName node = new ASimpleName(node1);
		return node;
	}
	Node new53()
	{
		TId node3 = (TId) pop();
		TDot node2 = (TDot) pop();
		PName node1 = (PName) pop();
		AQualifiedName node = new AQualifiedName(node1, node2, node3);
		return node;
	}
	Node new54()
	{
		TRBracket node4 = (TRBracket) pop();
		PExp node3 = (PExp) pop();
		TLBracket node2 = (TLBracket) pop();
		PName node1 = (PName) pop();
		AStrongNameArrayAccess node = new AStrongNameArrayAccess(node1, node2, node3, node4);
		return node;
	}
	Node new55()
	{
		TRBracket node4 = (TRBracket) pop();
		PExp node3 = (PExp) pop();
		TLBracket node2 = (TLBracket) pop();
		PPrimaryExp node1 = (PPrimaryExp) pop();
		AStrongExpArrayAccess node = new AStrongExpArrayAccess(node1, node2, node3, node4);
		return node;
	}
	Node new56()
	{
		TId node3 = (TId) pop();
		TDot node2 = (TDot) pop();
		PPrimaryExp node1 = (PPrimaryExp) pop();
		AStrongObjectFieldAccess node = new AStrongObjectFieldAccess(node1, node2, node3);
		return node;
	}
	Node new57()
	{
		TId node2 = (TId) pop();
		TDot node1 = (TDot) pop();
		AStrongObjectNavigation node = new AStrongObjectNavigation(node1, node2);
		return node;
	}
	Node new58()
	{
		TRBracket node3 = (TRBracket) pop();
		PExp node2 = (PExp) pop();
		TLBracket node1 = (TLBracket) pop();
		AStrongArrayNavigation node = new AStrongArrayNavigation(node1, node2, node3);
		return node;
	}
	Node new59()
	{
		PLiteral node1 = (PLiteral) pop();
		ALiteralPrimaryExp node = new ALiteralPrimaryExp(node1);
		return node;
	}
	Node new6()
	{
		XPPropositionDefinition node3 = (XPPropositionDefinition) pop();
		XPComment node2 = null;
		PName node1 = null;
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new60()
	{
		TRParen node3 = (TRParen) pop();
		PExp node2 = (PExp) pop();
		TLParen node1 = (TLParen) pop();
		AParenPrimaryExp node = new AParenPrimaryExp(node1, node2, node3);
		return node;
	}
	Node new61()
	{
		PFieldAccess node1 = (PFieldAccess) pop();
		AFieldAccessPrimaryExp node = new AFieldAccessPrimaryExp(node1);
		return node;
	}
	Node new62()
	{
		PArrayAccess node1 = (PArrayAccess) pop();
		AArrayAccessPrimaryExp node = new AArrayAccessPrimaryExp(node1);
		return node;
	}
	Node new63()
	{
		TRetVal node1 = (TRetVal) pop();
		AReturnValuePrimaryExp node = new AReturnValuePrimaryExp(node1);
		return node;
	}
	Node new64()
	{
		TThread node1 = (TThread) pop();
		AThreadPrimaryExp node = new AThreadPrimaryExp(node1);
		return node;
	}
	Node new65()
	{
		TThis node1 = (TThis) pop();
		AThisPrimaryExp node = new AThisPrimaryExp(node1);
		return node;
	}
	Node new66()
	{
		PPrimaryExp node1 = (PPrimaryExp) pop();
		APrimaryPostfixExp node = new APrimaryPostfixExp(node1);
		return node;
	}
	Node new67()
	{
		PName node1 = (PName) pop();
		ANamePostfixExp node = new ANamePostfixExp(node1);
		return node;
	}
	Node new68()
	{
		PUnaryExp node5 = (PUnaryExp) pop();
		TRParen node4 = (TRParen) pop();
		XTDim node3 = null;
		PPrimitiveType node2 = (PPrimitiveType) pop();
		TLParen node1 = (TLParen) pop();
		AStrongPrimitiveCastExp node = new AStrongPrimitiveCastExp(node1, node2, node3, node4, node5);
		return node;
	}
	Node new69()
	{
		PUnaryExp node5 = (PUnaryExp) pop();
		TRParen node4 = (TRParen) pop();
		XTDim node3 = (XTDim) pop();
		PPrimitiveType node2 = (PPrimitiveType) pop();
		TLParen node1 = (TLParen) pop();
		AStrongPrimitiveCastExp node = new AStrongPrimitiveCastExp(node1, node2, node3, node4, node5);
		return node;
	}
	Node new7()
	{
		PPropositionDefinition node2 = (PPropositionDefinition) pop();
		XPPropositionDefinition node1 = (XPPropositionDefinition) pop();
		X1PPropositionDefinition node = new X1PPropositionDefinition(node1, node2);
		return node;
	}
	Node new70()
	{
		PUnaryExp node5 = (PUnaryExp) pop();
		TRParen node4 = (TRParen) pop();
		XTDim node3 = (XTDim) pop();
		PName node2 = (PName) pop();
		TLParen node1 = (TLParen) pop();
		AStrongNameCastExp node = new AStrongNameCastExp(node1, node2, node3, node4, node5);
		return node;
	}
	Node new71()
	{
		PUnaryNotPlusMinusExp node4 = (PUnaryNotPlusMinusExp) pop();
		TRParen node3 = (TRParen) pop();
		PExp node2 = (PExp) pop();
		TLParen node1 = (TLParen) pop();
		AStrongExpCastExp node = new AStrongExpCastExp(node1, node2, node3, node4);
		return node;
	}
	Node new72()
	{
		PPostfixExp node1 = (PPostfixExp) pop();
		APostfixUnaryNotPlusMinusExp node = new APostfixUnaryNotPlusMinusExp(node1);
		return node;
	}
	Node new73()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TNot node1 = (TNot) pop();
		AComplementUnaryNotPlusMinusExp node = new AComplementUnaryNotPlusMinusExp(node1, node2);
		return node;
	}
	Node new74()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TBitComplement node1 = (TBitComplement) pop();
		ABitComplementUnaryNotPlusMinusExp node = new ABitComplementUnaryNotPlusMinusExp(node1, node2);
		return node;
	}
	Node new75()
	{
		PCastExp node1 = (PCastExp) pop();
		ACastUnaryNotPlusMinusExp node = new ACastUnaryNotPlusMinusExp(node1);
		return node;
	}
	Node new76()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TPlus node1 = (TPlus) pop();
		APlusUnaryExp node = new APlusUnaryExp(node1, node2);
		return node;
	}
	Node new77()
	{
		PUnaryExp node2 = (PUnaryExp) pop();
		TMinus node1 = (TMinus) pop();
		AMinusUnaryExp node = new AMinusUnaryExp(node1, node2);
		return node;
	}
	Node new78()
	{
		PUnaryNotPlusMinusExp node1 = (PUnaryNotPlusMinusExp) pop();
		AUnaryNotPlusMinusUnaryExp node = new AUnaryNotPlusMinusUnaryExp(node1);
		return node;
	}
	Node new79()
	{
		PUnaryExp node1 = (PUnaryExp) pop();
		AUnaryExpMultExp node = new AUnaryExpMultExp(node1);
		return node;
	}
	Node new8()
	{
		PPropositionDefinition node1 = (PPropositionDefinition) pop();
		X2PPropositionDefinition node = new X2PPropositionDefinition(node1);
		return node;
	}
	Node new80()
	{
		PUnaryExp node3 = (PUnaryExp) pop();
		TStar node2 = (TStar) pop();
		PMultExp node1 = (PMultExp) pop();
		ATimesMultExp node = new ATimesMultExp(node1, node2, node3);
		return node;
	}
	Node new81()
	{
		PUnaryExp node3 = (PUnaryExp) pop();
		TStrongDiv node2 = (TStrongDiv) pop();
		PMultExp node1 = (PMultExp) pop();
		AStrongDivMultExp node = new AStrongDivMultExp(node1, node2, node3);
		return node;
	}
	Node new82()
	{
		PUnaryExp node3 = (PUnaryExp) pop();
		TStrongMod node2 = (TStrongMod) pop();
		PMultExp node1 = (PMultExp) pop();
		AStrongModMultExp node = new AStrongModMultExp(node1, node2, node3);
		return node;
	}
	Node new83()
	{
		PMultExp node1 = (PMultExp) pop();
		AMultAddExp node = new AMultAddExp(node1);
		return node;
	}
	Node new84()
	{
		PMultExp node3 = (PMultExp) pop();
		TPlus node2 = (TPlus) pop();
		PAddExp node1 = (PAddExp) pop();
		APlusAddExp node = new APlusAddExp(node1, node2, node3);
		return node;
	}
	Node new85()
	{
		PMultExp node3 = (PMultExp) pop();
		TMinus node2 = (TMinus) pop();
		PAddExp node1 = (PAddExp) pop();
		AMinusAddExp node = new AMinusAddExp(node1, node2, node3);
		return node;
	}
	Node new86()
	{
		PAddExp node1 = (PAddExp) pop();
		AAddExpShiftExp node = new AAddExpShiftExp(node1);
		return node;
	}
	Node new87()
	{
		PAddExp node3 = (PAddExp) pop();
		TShiftLeft node2 = (TShiftLeft) pop();
		PShiftExp node1 = (PShiftExp) pop();
		ALeftShiftExp node = new ALeftShiftExp(node1, node2, node3);
		return node;
	}
	Node new88()
	{
		PAddExp node3 = (PAddExp) pop();
		TSignedShiftRight node2 = (TSignedShiftRight) pop();
		PShiftExp node1 = (PShiftExp) pop();
		ASignedRightShiftExp node = new ASignedRightShiftExp(node1, node2, node3);
		return node;
	}
	Node new89()
	{
		PAddExp node3 = (PAddExp) pop();
		TUnsignedShiftRight node2 = (TUnsignedShiftRight) pop();
		PShiftExp node1 = (PShiftExp) pop();
		AUnsignedRightShiftExp node = new AUnsignedRightShiftExp(node1, node2, node3);
		return node;
	}
	Node new9()
	{
		XPPropositionDefinition node3 = (XPPropositionDefinition) pop();
		XPComment node2 = null;
		PName node1 = (PName) pop();
		AUnit node = new AUnit(node1, node2, node3);
		return node;
	}
	Node new90()
	{
		PShiftExp node1 = (PShiftExp) pop();
		AShiftRelExp node = new AShiftRelExp(node1);
		return node;
	}
	Node new91()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TLess node2 = (TLess) pop();
		PRelExp node1 = (PRelExp) pop();
		ALessRelExp node = new ALessRelExp(node1, node2, node3);
		return node;
	}
	Node new92()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TGreater node2 = (TGreater) pop();
		PRelExp node1 = (PRelExp) pop();
		AGreaterRelExp node = new AGreaterRelExp(node1, node2, node3);
		return node;
	}
	Node new93()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TLessEqual node2 = (TLessEqual) pop();
		PRelExp node1 = (PRelExp) pop();
		ALessEqualRelExp node = new ALessEqualRelExp(node1, node2, node3);
		return node;
	}
	Node new94()
	{
		PShiftExp node3 = (PShiftExp) pop();
		TGreaterEqual node2 = (TGreaterEqual) pop();
		PRelExp node1 = (PRelExp) pop();
		AGreaterEqualRelExp node = new AGreaterEqualRelExp(node1, node2, node3);
		return node;
	}
	Node new95()
	{
		PName node3 = (PName) pop();
		TInstanceof node2 = (TInstanceof) pop();
		PRelExp node1 = (PRelExp) pop();
		AInstanceofRelExp node = new AInstanceofRelExp(node1, node2, node3);
		return node;
	}
	Node new96()
	{
		PRelExp node1 = (PRelExp) pop();
		ARelEqExp node = new ARelEqExp(node1);
		return node;
	}
	Node new97()
	{
		PRelExp node3 = (PRelExp) pop();
		TEqual node2 = (TEqual) pop();
		PEqExp node1 = (PEqExp) pop();
		AEqEqExp node = new AEqEqExp(node1, node2, node3);
		return node;
	}
	Node new98()
	{
		PRelExp node3 = (PRelExp) pop();
		TNotEqual node2 = (TNotEqual) pop();
		PEqExp node1 = (PEqExp) pop();
		ANeqEqExp node = new ANeqEqExp(node1, node2, node3);
		return node;
	}
	Node new99()
	{
		PEqExp node1 = (PEqExp) pop();
		AEqBitAndExp node = new AEqBitAndExp(node1);
		return node;
	}
	public Start parse() throws ParserException, LexerException, IOException
	{
		push(0, null, false);

		List ign = null;
		while(true)
		{
			while(index(lexer.peek()) == -1)
			{
				if(ign == null)
				{
					ign = new TypedLinkedList(NodeCast.instance);
				}

				ign.add(lexer.next());
			}

			if(ign != null)
			{
				ignoredTokens.setIn(lexer.peek(), ign);
				ign = null;
			}

			last_pos = lexer.peek().getPos();
			last_line = lexer.peek().getLine();
			last_token = lexer.peek();

			int index = index(lexer.peek());
			action[0] = actionTable[state()][0][1];
			action[1] = actionTable[state()][0][2];

			int low = 1;
			int high = actionTable[state()].length - 1;

			while(low <= high)
			{
				int middle = (low + high) / 2;

				if(index < actionTable[state()][middle][0])
				{
					high = middle - 1;
				}
				else if(index > actionTable[state()][middle][0])
				{
					low = middle + 1;
				}
				else
				{
					action[0] = actionTable[state()][middle][1];
					action[1] = actionTable[state()][middle][2];
					break;
				}
			}

			switch(action[0])
			{
				case SHIFT:
					push(action[1], lexer.next(), true);
					last_shift = action[1];
					break;
				case REDUCE:
					switch(action[1])
					{
					case 0: { Node node = new0(); push(goTo(0), node, true); } break;
					case 1: { Node node = new1(); push(goTo(0), node, true); } break;
					case 2: { Node node = new2(); push(goTo(0), node, true); } break;
					case 3: { Node node = new3(); push(goTo(31), node, false); } break;
					case 4: { Node node = new4(); push(goTo(31), node, false); } break;
					case 5: { Node node = new5(); push(goTo(0), node, true); } break;
					case 6: { Node node = new6(); push(goTo(0), node, true); } break;
					case 7: { Node node = new7(); push(goTo(32), node, false); } break;
					case 8: { Node node = new8(); push(goTo(32), node, false); } break;
					case 9: { Node node = new9(); push(goTo(0), node, true); } break;
					case 10: { Node node = new10(); push(goTo(0), node, true); } break;
					case 11: { Node node = new11(); push(goTo(0), node, true); } break;
					case 12: { Node node = new12(); push(goTo(1), node, true); } break;
					case 13: { Node node = new13(); push(goTo(2), node, true); } break;
					case 14: { Node node = new14(); push(goTo(2), node, true); } break;
					case 15: { Node node = new15(); push(goTo(2), node, true); } break;
					case 16: { Node node = new16(); push(goTo(2), node, true); } break;
					case 17: { Node node = new17(); push(goTo(2), node, true); } break;
					case 18: { Node node = new18(); push(goTo(2), node, true); } break;
					case 19: { Node node = new19(); push(goTo(2), node, true); } break;
					case 20: { Node node = new20(); push(goTo(2), node, true); } break;
					case 21: { Node node = new21(); push(goTo(2), node, true); } break;
					case 22: { Node node = new22(); push(goTo(2), node, true); } break;
					case 23: { Node node = new23(); push(goTo(2), node, true); } break;
					case 24: { Node node = new24(); push(goTo(2), node, true); } break;
					case 25: { Node node = new25(); push(goTo(2), node, true); } break;
					case 26: { Node node = new26(); push(goTo(2), node, true); } break;
					case 27: { Node node = new27(); push(goTo(2), node, true); } break;
					case 28: { Node node = new28(); push(goTo(2), node, true); } break;
					case 29: { Node node = new29(); push(goTo(2), node, true); } break;
					case 30: { Node node = new30(); push(goTo(2), node, true); } break;
					case 31: { Node node = new31(); push(goTo(2), node, true); } break;
					case 32: { Node node = new32(); push(goTo(2), node, true); } break;
					case 33: { Node node = new33(); push(goTo(2), node, true); } break;
					case 34: { Node node = new34(); push(goTo(2), node, true); } break;
					case 35: { Node node = new35(); push(goTo(2), node, true); } break;
					case 36: { Node node = new36(); push(goTo(2), node, true); } break;
					case 37: { Node node = new37(); push(goTo(2), node, true); } break;
					case 38: { Node node = new38(); push(goTo(2), node, true); } break;
					case 39: { Node node = new39(); push(goTo(2), node, true); } break;
					case 40: { Node node = new40(); push(goTo(2), node, true); } break;
					case 41: { Node node = new41(); push(goTo(3), node, true); } break;
					case 42: { Node node = new42(); push(goTo(3), node, true); } break;
					case 43: { Node node = new43(); push(goTo(3), node, true); } break;
					case 44: { Node node = new44(); push(goTo(4), node, true); } break;
					case 45: { Node node = new45(); push(goTo(5), node, true); } break;
					case 46: { Node node = new46(); push(goTo(5), node, true); } break;
					case 47: { Node node = new47(); push(goTo(33), node, false); } break;
					case 48: { Node node = new48(); push(goTo(33), node, false); } break;
					case 49: { Node node = new49(); push(goTo(5), node, true); } break;
					case 50: { Node node = new50(); push(goTo(5), node, true); } break;
					case 51: { Node node = new51(); push(goTo(6), node, true); } break;
					case 52: { Node node = new52(); push(goTo(7), node, true); } break;
					case 53: { Node node = new53(); push(goTo(7), node, true); } break;
					case 54: { Node node = new54(); push(goTo(8), node, true); } break;
					case 55: { Node node = new55(); push(goTo(8), node, true); } break;
					case 56: { Node node = new56(); push(goTo(9), node, true); } break;
					case 57: { Node node = new57(); push(goTo(10), node, true); } break;
					case 58: { Node node = new58(); push(goTo(10), node, true); } break;
					case 59: { Node node = new59(); push(goTo(11), node, true); } break;
					case 60: { Node node = new60(); push(goTo(11), node, true); } break;
					case 61: { Node node = new61(); push(goTo(11), node, true); } break;
					case 62: { Node node = new62(); push(goTo(11), node, true); } break;
					case 63: { Node node = new63(); push(goTo(11), node, true); } break;
					case 64: { Node node = new64(); push(goTo(11), node, true); } break;
					case 65: { Node node = new65(); push(goTo(11), node, true); } break;
					case 66: { Node node = new66(); push(goTo(12), node, true); } break;
					case 67: { Node node = new67(); push(goTo(12), node, true); } break;
					case 68: { Node node = new68(); push(goTo(13), node, true); } break;
					case 69: { Node node = new69(); push(goTo(13), node, true); } break;
					case 70: { Node node = new70(); push(goTo(13), node, true); } break;
					case 71: { Node node = new71(); push(goTo(13), node, true); } break;
					case 72: { Node node = new72(); push(goTo(14), node, true); } break;
					case 73: { Node node = new73(); push(goTo(14), node, true); } break;
					case 74: { Node node = new74(); push(goTo(14), node, true); } break;
					case 75: { Node node = new75(); push(goTo(14), node, true); } break;
					case 76: { Node node = new76(); push(goTo(15), node, true); } break;
					case 77: { Node node = new77(); push(goTo(15), node, true); } break;
					case 78: { Node node = new78(); push(goTo(15), node, true); } break;
					case 79: { Node node = new79(); push(goTo(16), node, true); } break;
					case 80: { Node node = new80(); push(goTo(16), node, true); } break;
					case 81: { Node node = new81(); push(goTo(16), node, true); } break;
					case 82: { Node node = new82(); push(goTo(16), node, true); } break;
					case 83: { Node node = new83(); push(goTo(17), node, true); } break;
					case 84: { Node node = new84(); push(goTo(17), node, true); } break;
					case 85: { Node node = new85(); push(goTo(17), node, true); } break;
					case 86: { Node node = new86(); push(goTo(18), node, true); } break;
					case 87: { Node node = new87(); push(goTo(18), node, true); } break;
					case 88: { Node node = new88(); push(goTo(18), node, true); } break;
					case 89: { Node node = new89(); push(goTo(18), node, true); } break;
					case 90: { Node node = new90(); push(goTo(19), node, true); } break;
					case 91: { Node node = new91(); push(goTo(19), node, true); } break;
					case 92: { Node node = new92(); push(goTo(19), node, true); } break;
					case 93: { Node node = new93(); push(goTo(19), node, true); } break;
					case 94: { Node node = new94(); push(goTo(19), node, true); } break;
					case 95: { Node node = new95(); push(goTo(19), node, true); } break;
					case 96: { Node node = new96(); push(goTo(20), node, true); } break;
					case 97: { Node node = new97(); push(goTo(20), node, true); } break;
					case 98: { Node node = new98(); push(goTo(20), node, true); } break;
					case 99: { Node node = new99(); push(goTo(21), node, true); } break;
					case 100: { Node node = new100(); push(goTo(21), node, true); } break;
					case 101: { Node node = new101(); push(goTo(22), node, true); } break;
					case 102: { Node node = new102(); push(goTo(22), node, true); } break;
					case 103: { Node node = new103(); push(goTo(23), node, true); } break;
					case 104: { Node node = new104(); push(goTo(23), node, true); } break;
					case 105: { Node node = new105(); push(goTo(24), node, true); } break;
					case 106: { Node node = new106(); push(goTo(24), node, true); } break;
					case 107: { Node node = new107(); push(goTo(25), node, true); } break;
					case 108: { Node node = new108(); push(goTo(25), node, true); } break;
					case 109: { Node node = new109(); push(goTo(26), node, true); } break;
					case 110: { Node node = new110(); push(goTo(26), node, true); } break;
					case 111: { Node node = new111(); push(goTo(27), node, true); } break;
					case 112: { Node node = new112(); push(goTo(28), node, true); } break;
					case 113: { Node node = new113(); push(goTo(28), node, true); } break;
					case 114: { Node node = new114(); push(goTo(28), node, true); } break;
					case 115: { Node node = new115(); push(goTo(28), node, true); } break;
					case 116: { Node node = new116(); push(goTo(28), node, true); } break;
					case 117: { Node node = new117(); push(goTo(28), node, true); } break;
					case 118: { Node node = new118(); push(goTo(28), node, true); } break;
					case 119: { Node node = new119(); push(goTo(28), node, true); } break;
					case 120: { Node node = new120(); push(goTo(28), node, true); } break;
					case 121: { Node node = new121(); push(goTo(28), node, true); } break;
					case 122: { Node node = new122(); push(goTo(28), node, true); } break;
					case 123: { Node node = new123(); push(goTo(28), node, true); } break;
					case 124: { Node node = new124(); push(goTo(28), node, true); } break;
					case 125: { Node node = new125(); push(goTo(28), node, true); } break;
					case 126: { Node node = new126(); push(goTo(28), node, true); } break;
					case 127: { Node node = new127(); push(goTo(28), node, true); } break;
					case 128: { Node node = new128(); push(goTo(28), node, true); } break;
					case 129: { Node node = new129(); push(goTo(28), node, true); } break;
					case 130: { Node node = new130(); push(goTo(28), node, true); } break;
					case 131: { Node node = new131(); push(goTo(29), node, true); } break;
					case 132: { Node node = new132(); push(goTo(29), node, true); } break;
					case 133: { Node node = new133(); push(goTo(29), node, true); } break;
					case 134: { Node node = new134(); push(goTo(29), node, true); } break;
					case 135: { Node node = new135(); push(goTo(29), node, true); } break;
					case 136: { Node node = new136(); push(goTo(29), node, true); } break;
					case 137: { Node node = new137(); push(goTo(29), node, true); } break;
					case 138: { Node node = new138(); push(goTo(29), node, true); } break;
					case 139: { Node node = new139(); push(goTo(29), node, true); } break;
					case 140: { Node node = new140(); push(goTo(29), node, true); } break;
					case 141: { Node node = new141(); push(goTo(29), node, true); } break;
					case 142: { Node node = new142(); push(goTo(29), node, true); } break;
					case 143: { Node node = new143(); push(goTo(29), node, true); } break;
					case 144: { Node node = new144(); push(goTo(30), node, true); } break;
					case 145: { Node node = new145(); push(goTo(30), node, true); } break;
					case 146: { Node node = new146(); push(goTo(30), node, true); } break;
					case 147: { Node node = new147(); push(goTo(30), node, true); } break;
					case 148: { Node node = new148(); push(goTo(30), node, true); } break;
					case 149: { Node node = new149(); push(goTo(30), node, true); } break;
					case 150: { Node node = new150(); push(goTo(30), node, true); } break;
					case 151: { Node node = new151(); push(goTo(30), node, true); } break;
					}
					break;
				case ACCEPT:
					{
						EOF node2 = (EOF) lexer.next();
						PUnit node1 = (PUnit) pop();
						Start node = new Start(node1, node2);
						return node;
					}
				case ERROR:
					throw new ParserException(last_token,
						"[" + last_line + "," + last_pos + "] " +
						errorMessages[errors[action[1]]]);
			}
		}
	}
	private Node pop()
	{
		return (Node) ((State) stack.previous()).node;
	}
	private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
	{
		this.node = node;

		if(filter)
		{
			filter();
		}

		if(!stack.hasNext())
		{
			stack.add(new State(state, this.node));
			return;
		}

		State s = (State) stack.next();
		s.state = state;
		s.node = this.node;
	}
	private int state()
	{
		State s = (State) stack.previous();
		stack.next();
		return s.state;
	}
}
