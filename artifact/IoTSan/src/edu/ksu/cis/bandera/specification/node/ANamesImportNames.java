package edu.ksu.cis.bandera.specification.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.analysis.*;

public final class ANamesImportNames extends PImportNames
{
	private PImportNames _importNames_;
	private TComma _comma_;
	private PImportName _importName_;

	public ANamesImportNames()
	{
	}
	public ANamesImportNames(
		PImportNames _importNames_,
		TComma _comma_,
		PImportName _importName_)
	{
		setImportNames(_importNames_);

		setComma(_comma_);

		setImportName(_importName_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseANamesImportNames(this);
	}
	public Object clone()
	{
		return new ANamesImportNames(
			(PImportNames) cloneNode(_importNames_),
			(TComma) cloneNode(_comma_),
			(PImportName) cloneNode(_importName_));
	}
	public TComma getComma()
	{
		return _comma_;
	}
	public PImportName getImportName()
	{
		return _importName_;
	}
	public PImportNames getImportNames()
	{
		return _importNames_;
	}
	void removeChild(Node child)
	{
		if(_importNames_ == child)
		{
			_importNames_ = null;
			return;
		}

		if(_comma_ == child)
		{
			_comma_ = null;
			return;
		}

		if(_importName_ == child)
		{
			_importName_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_importNames_ == oldChild)
		{
			setImportNames((PImportNames) newChild);
			return;
		}

		if(_comma_ == oldChild)
		{
			setComma((TComma) newChild);
			return;
		}

		if(_importName_ == oldChild)
		{
			setImportName((PImportName) newChild);
			return;
		}

	}
	public void setComma(TComma node)
	{
		if(_comma_ != null)
		{
			_comma_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_comma_ = node;
	}
	public void setImportName(PImportName node)
	{
		if(_importName_ != null)
		{
			_importName_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_importName_ = node;
	}
	public void setImportNames(PImportNames node)
	{
		if(_importNames_ != null)
		{
			_importNames_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_importNames_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_importNames_)
			+ toString(_comma_)
			+ toString(_importName_);
	}
}
