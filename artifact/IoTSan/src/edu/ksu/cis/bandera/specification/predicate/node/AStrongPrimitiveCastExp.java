package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AStrongPrimitiveCastExp extends PCastExp
{
	private TLParen _lParen_;
	private PPrimitiveType _primitiveType_;
	private final LinkedList _dim_ = new TypedLinkedList(new Dim_Cast());
	private TRParen _rParen_;
	private PUnaryExp _unaryExp_;

	private class Dim_Cast implements Cast
	{
		public Object cast(Object o)
		{
			TDim node = (TDim) o;

			if((node.parent() != null) &&
				(node.parent() != AStrongPrimitiveCastExp.this))
			{
				node.parent().removeChild(node);
			}

			if((node.parent() == null) ||
				(node.parent() != AStrongPrimitiveCastExp.this))
			{
				node.parent(AStrongPrimitiveCastExp.this);
			}

			return node;
		}
	}
	public AStrongPrimitiveCastExp()
	{
	}
	public AStrongPrimitiveCastExp(
		TLParen _lParen_,
		PPrimitiveType _primitiveType_,
		XTDim _dim_,
		TRParen _rParen_,
		PUnaryExp _unaryExp_)
	{
		setLParen(_lParen_);

		setPrimitiveType(_primitiveType_);

		if(_dim_ != null)
		{
			while(_dim_ instanceof X1TDim)
			{
				this._dim_.addFirst(((X1TDim) _dim_).getTDim());
				_dim_ = ((X1TDim) _dim_).getXTDim();
			}
			this._dim_.addFirst(((X2TDim) _dim_).getTDim());
		}

		setRParen(_rParen_);

		setUnaryExp(_unaryExp_);

	}
	public AStrongPrimitiveCastExp(
		TLParen _lParen_,
		PPrimitiveType _primitiveType_,
		List _dim_,
		TRParen _rParen_,
		PUnaryExp _unaryExp_)
	{
		setLParen(_lParen_);

		setPrimitiveType(_primitiveType_);

		{
			this._dim_.clear();
			this._dim_.addAll(_dim_);
		}

		setRParen(_rParen_);

		setUnaryExp(_unaryExp_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAStrongPrimitiveCastExp(this);
	}
	public Object clone()
	{
		return new AStrongPrimitiveCastExp(
			(TLParen) cloneNode(_lParen_),
			(PPrimitiveType) cloneNode(_primitiveType_),
			cloneList(_dim_),
			(TRParen) cloneNode(_rParen_),
			(PUnaryExp) cloneNode(_unaryExp_));
	}
	public LinkedList getDim()
	{
		return _dim_;
	}
	public TLParen getLParen()
	{
		return _lParen_;
	}
	public PPrimitiveType getPrimitiveType()
	{
		return _primitiveType_;
	}
	public TRParen getRParen()
	{
		return _rParen_;
	}
	public PUnaryExp getUnaryExp()
	{
		return _unaryExp_;
	}
	void removeChild(Node child)
	{
		if(_lParen_ == child)
		{
			_lParen_ = null;
			return;
		}

		if(_primitiveType_ == child)
		{
			_primitiveType_ = null;
			return;
		}

		if(_dim_.remove(child))
		{
			return;
		}

		if(_rParen_ == child)
		{
			_rParen_ = null;
			return;
		}

		if(_unaryExp_ == child)
		{
			_unaryExp_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_lParen_ == oldChild)
		{
			setLParen((TLParen) newChild);
			return;
		}

		if(_primitiveType_ == oldChild)
		{
			setPrimitiveType((PPrimitiveType) newChild);
			return;
		}

		for(ListIterator i = _dim_.listIterator(); i.hasNext();)
		{
			if(i.next() == oldChild)
			{
				if(newChild != null)
				{
					i.set(newChild);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		if(_rParen_ == oldChild)
		{
			setRParen((TRParen) newChild);
			return;
		}

		if(_unaryExp_ == oldChild)
		{
			setUnaryExp((PUnaryExp) newChild);
			return;
		}

	}
	public void setDim(List list)
	{
		_dim_.clear();
		_dim_.addAll(list);
	}
	public void setLParen(TLParen node)
	{
		if(_lParen_ != null)
		{
			_lParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_lParen_ = node;
	}
	public void setPrimitiveType(PPrimitiveType node)
	{
		if(_primitiveType_ != null)
		{
			_primitiveType_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_primitiveType_ = node;
	}
	public void setRParen(TRParen node)
	{
		if(_rParen_ != null)
		{
			_rParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_rParen_ = node;
	}
	public void setUnaryExp(PUnaryExp node)
	{
		if(_unaryExp_ != null)
		{
			_unaryExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_unaryExp_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_lParen_)
			+ toString(_primitiveType_)
			+ toString(_dim_)
			+ toString(_rParen_)
			+ toString(_unaryExp_);
	}
}
