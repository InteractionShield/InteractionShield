package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AUnit extends PUnit
{
	private PName _name_;
	private final LinkedList _comment_ = new TypedLinkedList(new Comment_Cast());
	private final LinkedList _propositionDefinition_ = new TypedLinkedList(new PropositionDefinition_Cast());

	private class Comment_Cast implements Cast
	{
		public Object cast(Object o)
		{
			PComment node = (PComment) o;

			if((node.parent() != null) &&
				(node.parent() != AUnit.this))
			{
				node.parent().removeChild(node);
			}

			if((node.parent() == null) ||
				(node.parent() != AUnit.this))
			{
				node.parent(AUnit.this);
			}

			return node;
		}
	}

	private class PropositionDefinition_Cast implements Cast
	{
		public Object cast(Object o)
		{
			PPropositionDefinition node = (PPropositionDefinition) o;

			if((node.parent() != null) &&
				(node.parent() != AUnit.this))
			{
				node.parent().removeChild(node);
			}

			if((node.parent() == null) ||
				(node.parent() != AUnit.this))
			{
				node.parent(AUnit.this);
			}

			return node;
		}
	}
	public AUnit()
	{
	}
	public AUnit(
		PName _name_,
		XPComment _comment_,
		XPPropositionDefinition _propositionDefinition_)
	{
		setName(_name_);

		if(_comment_ != null)
		{
			while(_comment_ instanceof X1PComment)
			{
				this._comment_.addFirst(((X1PComment) _comment_).getPComment());
				_comment_ = ((X1PComment) _comment_).getXPComment();
			}
			this._comment_.addFirst(((X2PComment) _comment_).getPComment());
		}

		if(_propositionDefinition_ != null)
		{
			while(_propositionDefinition_ instanceof X1PPropositionDefinition)
			{
				this._propositionDefinition_.addFirst(((X1PPropositionDefinition) _propositionDefinition_).getPPropositionDefinition());
				_propositionDefinition_ = ((X1PPropositionDefinition) _propositionDefinition_).getXPPropositionDefinition();
			}
			this._propositionDefinition_.addFirst(((X2PPropositionDefinition) _propositionDefinition_).getPPropositionDefinition());
		}

	}
	public AUnit(
		PName _name_,
		List _comment_,
		List _propositionDefinition_)
	{
		setName(_name_);

		{
			this._comment_.clear();
			this._comment_.addAll(_comment_);
		}

		{
			this._propositionDefinition_.clear();
			this._propositionDefinition_.addAll(_propositionDefinition_);
		}

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAUnit(this);
	}
	public Object clone()
	{
		return new AUnit(
			(PName) cloneNode(_name_),
			cloneList(_comment_),
			cloneList(_propositionDefinition_));
	}
	public LinkedList getComment()
	{
		return _comment_;
	}
	public PName getName()
	{
		return _name_;
	}
	public LinkedList getPropositionDefinition()
	{
		return _propositionDefinition_;
	}
	void removeChild(Node child)
	{
		if(_name_ == child)
		{
			_name_ = null;
			return;
		}

		if(_comment_.remove(child))
		{
			return;
		}

		if(_propositionDefinition_.remove(child))
		{
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_name_ == oldChild)
		{
			setName((PName) newChild);
			return;
		}

		for(ListIterator i = _comment_.listIterator(); i.hasNext();)
		{
			if(i.next() == oldChild)
			{
				if(newChild != null)
				{
					i.set(newChild);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		for(ListIterator i = _propositionDefinition_.listIterator(); i.hasNext();)
		{
			if(i.next() == oldChild)
			{
				if(newChild != null)
				{
					i.set(newChild);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

	}
	public void setComment(List list)
	{
		_comment_.clear();
		_comment_.addAll(list);
	}
	public void setName(PName node)
	{
		if(_name_ != null)
		{
			_name_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_name_ = node;
	}
	public void setPropositionDefinition(List list)
	{
		_propositionDefinition_.clear();
		_propositionDefinition_.addAll(list);
	}
	public String toString()
	{
		return ""
			+ toString(_name_)
			+ toString(_comment_)
			+ toString(_propositionDefinition_);
	}
}
