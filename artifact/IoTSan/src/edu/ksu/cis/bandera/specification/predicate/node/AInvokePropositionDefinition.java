package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AInvokePropositionDefinition extends PPropositionDefinition
{
	private TInvoke _invoke_;
	private TId _id_;
	private TLParen _lParen_;
	private PParams _params_;
	private TRParen _rParen_;
	private PColonExp _colonExp_;
	private TSemicolon _semicolon_;
	private final LinkedList _comment_ = new TypedLinkedList(new Comment_Cast());

	private class Comment_Cast implements Cast
	{
		public Object cast(Object o)
		{
			PComment node = (PComment) o;

			if((node.parent() != null) &&
				(node.parent() != AInvokePropositionDefinition.this))
			{
				node.parent().removeChild(node);
			}

			if((node.parent() == null) ||
				(node.parent() != AInvokePropositionDefinition.this))
			{
				node.parent(AInvokePropositionDefinition.this);
			}

			return node;
		}
	}
	public AInvokePropositionDefinition()
	{
	}
	public AInvokePropositionDefinition(
		TInvoke _invoke_,
		TId _id_,
		TLParen _lParen_,
		PParams _params_,
		TRParen _rParen_,
		PColonExp _colonExp_,
		TSemicolon _semicolon_,
		XPComment _comment_)
	{
		setInvoke(_invoke_);

		setId(_id_);

		setLParen(_lParen_);

		setParams(_params_);

		setRParen(_rParen_);

		setColonExp(_colonExp_);

		setSemicolon(_semicolon_);

		if(_comment_ != null)
		{
			while(_comment_ instanceof X1PComment)
			{
				this._comment_.addFirst(((X1PComment) _comment_).getPComment());
				_comment_ = ((X1PComment) _comment_).getXPComment();
			}
			this._comment_.addFirst(((X2PComment) _comment_).getPComment());
		}

	}
	public AInvokePropositionDefinition(
		TInvoke _invoke_,
		TId _id_,
		TLParen _lParen_,
		PParams _params_,
		TRParen _rParen_,
		PColonExp _colonExp_,
		TSemicolon _semicolon_,
		List _comment_)
	{
		setInvoke(_invoke_);

		setId(_id_);

		setLParen(_lParen_);

		setParams(_params_);

		setRParen(_rParen_);

		setColonExp(_colonExp_);

		setSemicolon(_semicolon_);

		{
			this._comment_.clear();
			this._comment_.addAll(_comment_);
		}

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAInvokePropositionDefinition(this);
	}
	public Object clone()
	{
		return new AInvokePropositionDefinition(
			(TInvoke) cloneNode(_invoke_),
			(TId) cloneNode(_id_),
			(TLParen) cloneNode(_lParen_),
			(PParams) cloneNode(_params_),
			(TRParen) cloneNode(_rParen_),
			(PColonExp) cloneNode(_colonExp_),
			(TSemicolon) cloneNode(_semicolon_),
			cloneList(_comment_));
	}
	public PColonExp getColonExp()
	{
		return _colonExp_;
	}
	public LinkedList getComment()
	{
		return _comment_;
	}
	public TId getId()
	{
		return _id_;
	}
	public TInvoke getInvoke()
	{
		return _invoke_;
	}
	public TLParen getLParen()
	{
		return _lParen_;
	}
	public PParams getParams()
	{
		return _params_;
	}
	public TRParen getRParen()
	{
		return _rParen_;
	}
	public TSemicolon getSemicolon()
	{
		return _semicolon_;
	}
	void removeChild(Node child)
	{
		if(_invoke_ == child)
		{
			_invoke_ = null;
			return;
		}

		if(_id_ == child)
		{
			_id_ = null;
			return;
		}

		if(_lParen_ == child)
		{
			_lParen_ = null;
			return;
		}

		if(_params_ == child)
		{
			_params_ = null;
			return;
		}

		if(_rParen_ == child)
		{
			_rParen_ = null;
			return;
		}

		if(_colonExp_ == child)
		{
			_colonExp_ = null;
			return;
		}

		if(_semicolon_ == child)
		{
			_semicolon_ = null;
			return;
		}

		if(_comment_.remove(child))
		{
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_invoke_ == oldChild)
		{
			setInvoke((TInvoke) newChild);
			return;
		}

		if(_id_ == oldChild)
		{
			setId((TId) newChild);
			return;
		}

		if(_lParen_ == oldChild)
		{
			setLParen((TLParen) newChild);
			return;
		}

		if(_params_ == oldChild)
		{
			setParams((PParams) newChild);
			return;
		}

		if(_rParen_ == oldChild)
		{
			setRParen((TRParen) newChild);
			return;
		}

		if(_colonExp_ == oldChild)
		{
			setColonExp((PColonExp) newChild);
			return;
		}

		if(_semicolon_ == oldChild)
		{
			setSemicolon((TSemicolon) newChild);
			return;
		}

		for(ListIterator i = _comment_.listIterator(); i.hasNext();)
		{
			if(i.next() == oldChild)
			{
				if(newChild != null)
				{
					i.set(newChild);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

	}
	public void setColonExp(PColonExp node)
	{
		if(_colonExp_ != null)
		{
			_colonExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_colonExp_ = node;
	}
	public void setComment(List list)
	{
		_comment_.clear();
		_comment_.addAll(list);
	}
	public void setId(TId node)
	{
		if(_id_ != null)
		{
			_id_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_id_ = node;
	}
	public void setInvoke(TInvoke node)
	{
		if(_invoke_ != null)
		{
			_invoke_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_invoke_ = node;
	}
	public void setLParen(TLParen node)
	{
		if(_lParen_ != null)
		{
			_lParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_lParen_ = node;
	}
	public void setParams(PParams node)
	{
		if(_params_ != null)
		{
			_params_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_params_ = node;
	}
	public void setRParen(TRParen node)
	{
		if(_rParen_ != null)
		{
			_rParen_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_rParen_ = node;
	}
	public void setSemicolon(TSemicolon node)
	{
		if(_semicolon_ != null)
		{
			_semicolon_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_semicolon_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_invoke_)
			+ toString(_id_)
			+ toString(_lParen_)
			+ toString(_params_)
			+ toString(_rParen_)
			+ toString(_colonExp_)
			+ toString(_semicolon_)
			+ toString(_comment_);
	}
}
