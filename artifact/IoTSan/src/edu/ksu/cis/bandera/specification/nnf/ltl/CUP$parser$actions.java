package edu.ksu.cis.bandera.specification.nnf.ltl;


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jul 17 20:49:43 CDT 2001
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
	this.parser = parser;
  }  
  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
	int                        CUP$parser$act_num,
	java_cup.runtime.lr_parser CUP$parser$parser,
	java.util.Stack            CUP$parser$stack,
	int                        CUP$parser$top)
	throws java.lang.Exception
	{
	  /* Symbol object for return from actions */
	  java_cup.runtime.Symbol CUP$parser$result;

	  /* select the action based on the action number */
	  switch (CUP$parser$act_num)
		{
		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 11: // ltlexpr ::= ltlexpr UNTIL ltlexpr 
			{
			  Node RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.UNTIL,l,r); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 10: // ltlexpr ::= G ltlexpr 
			{
			  Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.G,e); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 9: // ltlexpr ::= X ltlexpr 
			{
			  Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.X,e); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 8: // ltlexpr ::= F ltlexpr 
			{
			  Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.F,e); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 7: // ltlexpr ::= NOT ltlexpr 
			{
			  Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.NOT,e); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 6: // ltlexpr ::= ltlexpr AND ltlexpr 
			{
			  Node RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.AND,l,r); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 5: // ltlexpr ::= ltlexpr OR ltlexpr 
			{
			  Node RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.OR,l,r); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 4: // ltlexpr ::= ltlexpr IMPLIES ltlexpr 
			{
			  Node RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.OR,new Node(sym.NOT,l),r); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 3: // ltlexpr ::= LP ltlexpr RP 
			{
			  Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= e; 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 2: // ltlexpr ::= ATOM 
			{
			  Node RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String atom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Node(sym.ATOM,atom); 
			  CUP$parser$result = new java_cup.runtime.Symbol(2/*ltlexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 1: // $START ::= spec EOF 
			{
			  Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
			  CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  /* ACCEPT */
		  CUP$parser$parser.done_parsing();
		  return CUP$parser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 0: // spec ::= ltlexpr 
			{
			  Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.tree=e; 
			  CUP$parser$result = new java_cup.runtime.Symbol(1/*spec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
			}
		  return CUP$parser$result;

		  /* . . . . . .*/
		  default:
			throw new Exception(
			   "Invalid action number found in internal parse table");

		}
	}
}
