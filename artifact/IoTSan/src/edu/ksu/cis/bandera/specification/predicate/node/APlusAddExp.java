package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class APlusAddExp extends PAddExp
{
	private PAddExp _addExp_;
	private TPlus _plus_;
	private PMultExp _multExp_;

	public APlusAddExp()
	{
	}
	public APlusAddExp(
		PAddExp _addExp_,
		TPlus _plus_,
		PMultExp _multExp_)
	{
		setAddExp(_addExp_);

		setPlus(_plus_);

		setMultExp(_multExp_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAPlusAddExp(this);
	}
	public Object clone()
	{
		return new APlusAddExp(
			(PAddExp) cloneNode(_addExp_),
			(TPlus) cloneNode(_plus_),
			(PMultExp) cloneNode(_multExp_));
	}
	public PAddExp getAddExp()
	{
		return _addExp_;
	}
	public PMultExp getMultExp()
	{
		return _multExp_;
	}
	public TPlus getPlus()
	{
		return _plus_;
	}
	void removeChild(Node child)
	{
		if(_addExp_ == child)
		{
			_addExp_ = null;
			return;
		}

		if(_plus_ == child)
		{
			_plus_ = null;
			return;
		}

		if(_multExp_ == child)
		{
			_multExp_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_addExp_ == oldChild)
		{
			setAddExp((PAddExp) newChild);
			return;
		}

		if(_plus_ == oldChild)
		{
			setPlus((TPlus) newChild);
			return;
		}

		if(_multExp_ == oldChild)
		{
			setMultExp((PMultExp) newChild);
			return;
		}

	}
	public void setAddExp(PAddExp node)
	{
		if(_addExp_ != null)
		{
			_addExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_addExp_ = node;
	}
	public void setMultExp(PMultExp node)
	{
		if(_multExp_ != null)
		{
			_multExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_multExp_ = node;
	}
	public void setPlus(TPlus node)
	{
		if(_plus_ != null)
		{
			_plus_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_plus_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_addExp_)
			+ toString(_plus_)
			+ toString(_multExp_);
	}
}
