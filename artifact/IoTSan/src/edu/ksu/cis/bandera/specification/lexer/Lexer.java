package edu.ksu.cis.bandera.specification.lexer;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.io.*;
import java.util.*;
import edu.ksu.cis.bandera.specification.node.*;

public class Lexer
{
	protected Token token;
	protected State state = State.INITIAL;

	private PushbackReader in;
	private int line;
	private int pos;
	private boolean cr;
	private boolean eof;
	private final StringBuffer text = new StringBuffer();

	private static int[][][][] gotoTable;
/*  {
		{ // INITIAL
			{{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {33, 33, 6}, {34, 34, 7}, {36, 36, 8}, {38, 38, 9}, {40, 40, 10}, {41, 41, 11}, {42, 42, 12}, {43, 43, 13}, {44, 44, 14}, {45, 45, 15}, {46, 46, 16}, {47, 47, 17}, {48, 57, 18}, {58, 58, 19}, {59, 59, 20}, {60, 60, 21}, {62, 62, 22}, {65, 90, 23}, {91, 91, 24}, {93, 93, 25}, {95, 95, 26}, {97, 97, 27}, {98, 100, 23}, {101, 101, 28}, {102, 102, 29}, {103, 104, 23}, {105, 105, 30}, {106, 111, 23}, {112, 112, 31}, {113, 122, 23}, {123, 123, 32}, {124, 124, 33}, {125, 125, 34}, },
			{{9, 32, -2}, },
			{{9, 32, -2}, },
			{{9, 32, -2}, },
			{{9, 9, 1}, {10, 10, 35}, {12, 32, -2}, },
			{{9, 32, -2}, },
			{},
			{},
			{{36, 36, 36}, {48, 57, 37}, {65, 90, 38}, {95, 95, 39}, {97, 122, 38}, },
			{{38, 38, 40}, },
			{},
			{},
			{},
			{{48, 57, 18}, },
			{},
			{{48, 57, 18}, {62, 62, 41}, },
			{},
			{{42, 42, 42}, {47, 47, 43}, },
			{{48, 57, 18}, },
			{},
			{},
			{{58, 58, 44}, {61, 61, 45}, },
			{},
			{{36, 122, -10}, },
			{},
			{},
			{{36, 122, -10}, },
			{{36, 95, -10}, {97, 114, 38}, {115, 115, 46}, {116, 122, 38}, },
			{{36, 95, -10}, {97, 109, 38}, {110, 110, 47}, {111, 122, 38}, },
			{{36, 95, -10}, {97, 110, 38}, {111, 111, 48}, {112, 122, 38}, },
			{{36, 95, -10}, {97, 108, 38}, {109, 109, 49}, {110, 122, 38}, },
			{{36, 95, -10}, {97, 113, 38}, {114, 114, 50}, {115, 122, 38}, },
			{},
			{{124, 124, 51}, },
			{},
			{{9, 32, -2}, },
			{{36, 122, -10}, },
			{{36, 122, -10}, },
			{{36, 122, -10}, },
			{{36, 122, -10}, },
			{},
			{},
			{{0, 9, 52}, {10, 10, 53}, {11, 12, 52}, {13, 13, 54}, {14, 41, 52}, {42, 42, 55}, {43, 255, 52}, },
			{{0, 9, 56}, {10, 10, 57}, {11, 12, 56}, {13, 13, 58}, {14, 255, 56}, },
			{},
			{},
			{{36, 114, -29}, {115, 115, 59}, {116, 122, 38}, },
			{{36, 95, -10}, {97, 97, 60}, {98, 122, 38}, },
			{{36, 113, -33}, {114, 114, 61}, {115, 122, 38}, },
			{{36, 95, -10}, {97, 111, 38}, {112, 112, 62}, {113, 122, 38}, },
			{{36, 95, -10}, {97, 100, 38}, {101, 101, 63}, {102, 122, 38}, },
			{},
			{{0, 41, -44}, {42, 42, 64}, {43, 255, 52}, },
			{{0, 255, -54}, },
			{{0, 9, 52}, {10, 10, 65}, {11, 255, -54}, },
			{{0, 9, 66}, {10, 10, 67}, {11, 12, 66}, {13, 13, 68}, {14, 41, 66}, {42, 42, 69}, {43, 46, 66}, {47, 47, 70}, {48, 255, 66}, },
			{{0, 255, -45}, },
			{},
			{{10, 10, 71}, },
			{{36, 100, -52}, {101, 101, 72}, {102, 122, 38}, },
			{{36, 95, -10}, {97, 97, 38}, {98, 98, 73}, {99, 122, 38}, },
			{{36, 95, -10}, {97, 97, 74}, {98, 122, 38}, },
			{{36, 110, -31}, {111, 111, 75}, {112, 122, 38}, },
			{{36, 95, -10}, {97, 99, 38}, {100, 100, 76}, {101, 122, 38}, },
			{{0, 9, 77}, {10, 10, 78}, {11, 12, 77}, {13, 13, 79}, {14, 41, 77}, {42, 42, 64}, {43, 46, 77}, {47, 47, 80}, {48, 255, 77}, },
			{{0, 255, -54}, },
			{{0, 9, 81}, {10, 10, 82}, {11, 12, 81}, {13, 13, 83}, {14, 41, 81}, {42, 42, 84}, {43, 255, 81}, },
			{{0, 255, -68}, },
			{{0, 9, 81}, {10, 10, 85}, {11, 255, -68}, },
			{{0, 255, -57}, },
			{},
			{},
			{{36, 113, -33}, {114, 114, 86}, {115, 122, 38}, },
			{{36, 95, -10}, {97, 107, 38}, {108, 108, 87}, {109, 122, 38}, },
			{{36, 107, -75}, {108, 108, 88}, {109, 122, 38}, },
			{{36, 113, -33}, {114, 114, 89}, {115, 122, 38}, },
			{{36, 95, -10}, {97, 104, 38}, {105, 105, 90}, {106, 122, 38}, },
			{{0, 9, 91}, {10, 10, 92}, {11, 12, 91}, {13, 13, 93}, {14, 41, 91}, {42, 42, 94}, {43, 255, 91}, },
			{{0, 255, -79}, },
			{{0, 9, 91}, {10, 10, 95}, {11, 255, -79}, },
			{},
			{{0, 255, -68}, },
			{{0, 255, -68}, },
			{{0, 9, 81}, {10, 10, 96}, {11, 255, -68}, },
			{{0, 41, -57}, {42, 42, 84}, {43, 255, -57}, },
			{{0, 255, -68}, },
			{{36, 95, -10}, {97, 115, 38}, {116, 116, 97}, {117, 122, 38}, },
			{{36, 100, -52}, {101, 101, 98}, {102, 122, 38}, },
			{{36, 107, -75}, {108, 108, 99}, {109, 122, 38}, },
			{{36, 115, -88}, {116, 116, 100}, {117, 122, 38}, },
			{{36, 95, -10}, {97, 98, 38}, {99, 99, 101}, {100, 122, 38}, },
			{{0, 255, -79}, },
			{{0, 255, -79}, },
			{{0, 9, 91}, {10, 10, 102}, {11, 255, -79}, },
			{{0, 41, -66}, {42, 42, 94}, {43, 255, -66}, },
			{{0, 255, -79}, },
			{{0, 255, -68}, },
			{{36, 104, -78}, {105, 105, 103}, {106, 122, 38}, },
			{{36, 122, -10}, },
			{{36, 122, -10}, },
			{{36, 122, -10}, },
			{{36, 95, -10}, {97, 97, 104}, {98, 122, 38}, },
			{{0, 255, -79}, },
			{{36, 110, -31}, {111, 111, 105}, {112, 122, 38}, },
			{{36, 115, -88}, {116, 116, 106}, {117, 122, 38}, },
			{{36, 109, -30}, {110, 110, 107}, {111, 122, 38}, },
			{{36, 100, -52}, {101, 101, 108}, {102, 122, 38}, },
			{{36, 114, -29}, {115, 115, 109}, {116, 122, 38}, },
			{{36, 122, -10}, },
			{{36, 122, -10}, },
		}
	};*/

	private static int[][] accept;
/*  {
		// INITIAL
		{0, 0, 0, 0, 0, 0, 11, 22, 33, -1, 19, 20, 23, 24, 21, 25, 12, -1, 32, 13, 14, 4, 7, 33, 15, 16, 33, 33, 33, 33, 33, 33, 17, -1, 18, 0, 33, 33, 33, 33, 9, 8, -1, 3, 6, 5, 33, 33, 33, 33, 33, 10, -1, -1, -1, -1, 3, 3, 3, 33, 33, 33, 33, 33, -1, -1, -1, -1, -1, -1, 1, 3, 33, 33, 33, 33, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, 33, 33, 33, 33, 33, -1, -1, -1, -1, -1, -1, 33, 27, 29, 26, 33, -1, 33, 33, 33, 33, 31, 30, 28, },

	};*/

	public static class State
	{
		public final static State INITIAL = new State(0);

		private int id;

		private State(int id)
		{
			this.id = id;
		}

		public int id()
		{
			return id;
		}
	}
	public Lexer(PushbackReader in)
	{
		this.in = in;

		if(gotoTable == null)
		{
			try
			{
				DataInputStream s = new DataInputStream(
					new BufferedInputStream(
					Lexer.class.getResourceAsStream("lexer.dat")));

				// read gotoTable
				int length = s.readInt();
				gotoTable = new int[length][][][];
				for(int i = 0; i < gotoTable.length; i++)
				{
					length = s.readInt();
					gotoTable[i] = new int[length][][];
					for(int j = 0; j < gotoTable[i].length; j++)
					{
						length = s.readInt();
						gotoTable[i][j] = new int[length][3];
						for(int k = 0; k < gotoTable[i][j].length; k++)
						{
							for(int l = 0; l < 3; l++)
							{
								gotoTable[i][j][k][l] = s.readInt();
							}
						}
					}
				}

				// read accept
				length = s.readInt();
				accept = new int[length][];
				for(int i = 0; i < accept.length; i++)
				{
					length = s.readInt();
					accept[i] = new int[length];
					for(int j = 0; j < accept[i].length; j++)
					{
						accept[i][j] = s.readInt();
					}
				}

				s.close();
			}
			catch(Exception e)
			{
				throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
			}
		}
	}
	protected void filter() throws LexerException, IOException
	{
	}
	private int getChar() throws IOException
	{
		if(eof)
		{
			return -1;
		}

		int result = in.read();

		if(result == -1)
		{
			eof = true;
		}

		return result;
	}
	private String getText(int acceptLength)
	{
		StringBuffer s = new StringBuffer(acceptLength);
		for(int i = 0; i < acceptLength; i++)
		{
			s.append(text.charAt(i));
		}

		return s.toString();
	}
	protected Token getToken() throws IOException, LexerException
	{
		int dfa_state = 0;

		int start_pos = pos;
		int start_line = line;

		int accept_state = -1;
		int accept_token = -1;
		int accept_length = -1;
		int accept_pos = -1;
		int accept_line = -1;

		int[][][] gotoTable = this.gotoTable[state.id()];
		int[] accept = this.accept[state.id()];
		text.setLength(0);

		while(true)
		{
			int c = getChar();

			if(c != -1)
			{
				switch(c)
				{
				case 10:
					if(cr)
					{
						cr = false;
					}
					else
					{
						line++;
						pos = 0;
					}
					break;
				case 13:
					line++;
					pos = 0;
					cr = true;
					break;
				default:
					pos++;
					cr = false;
					break;
				};

				text.append((char) c);

				do
				{
					int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

					dfa_state = -1;

					int[][] tmp1 =  gotoTable[oldState];
					int low = 0;
					int high = tmp1.length - 1;

					while(low <= high)
					{
						int middle = (low + high) / 2;
						int[] tmp2 = tmp1[middle];

						if(c < tmp2[0])
						{
							high = middle - 1;
						}
						else if(c > tmp2[1])
						{
							low = middle + 1;
						}
						else
						{
							dfa_state = tmp2[2];
							break;
						}
					}
				}while(dfa_state < -1);
			}
			else
			{
				dfa_state = -1;
			}

			if(dfa_state >= 0)
			{
				if(accept[dfa_state] != -1)
				{
					accept_state = dfa_state;
					accept_token = accept[dfa_state];
					accept_length = text.length();
					accept_pos = pos;
					accept_line = line;
				}
			}
			else
			{
				if(accept_state != -1)
				{
					switch(accept_token)
					{
					case 0:
						{
							Token token = new0(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 1:
						{
							Token token = new1(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 2:
						{
							Token token = new2(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 3:
						{
							Token token = new3(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 4:
						{
							Token token = new4(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 5:
						{
							Token token = new5(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 6:
						{
							Token token = new6(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 7:
						{
							Token token = new7(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 8:
						{
							Token token = new8(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 9:
						{
							Token token = new9(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 10:
						{
							Token token = new10(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 11:
						{
							Token token = new11(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 12:
						{
							Token token = new12(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 13:
						{
							Token token = new13(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 14:
						{
							Token token = new14(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 15:
						{
							Token token = new15(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 16:
						{
							Token token = new16(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 17:
						{
							Token token = new17(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 18:
						{
							Token token = new18(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 19:
						{
							Token token = new19(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 20:
						{
							Token token = new20(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 21:
						{
							Token token = new21(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 22:
						{
							Token token = new22(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 23:
						{
							Token token = new23(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 24:
						{
							Token token = new24(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 25:
						{
							Token token = new25(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 26:
						{
							Token token = new26(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 27:
						{
							Token token = new27(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 28:
						{
							Token token = new28(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 29:
						{
							Token token = new29(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 30:
						{
							Token token = new30(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 31:
						{
							Token token = new31(
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 32:
						{
							Token token = new32(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					case 33:
						{
							Token token = new33(
								getText(accept_length),
								start_line + 1,
								start_pos + 1);
							pushBack(accept_length);
							pos = accept_pos;
							line = accept_line;
							return token;
						}
					}
				}
				else
				{
					if(text.length() > 0)
					{
						throw new LexerException(
							"[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
							" Unknown token: " + text);
					}
					else
					{
						EOF token = new EOF(
							start_line + 1,
							start_pos + 1);
						return token;
					}
				}
			}
		}
	}
	Token new0(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }
	Token new1(String text, int line, int pos) { return new TDocumentationComment(text, line, pos); }
	Token new10(int line, int pos) { return new TOr(line, pos); }
	Token new11(int line, int pos) { return new TNot(line, pos); }
	Token new12(int line, int pos) { return new TDot(line, pos); }
	Token new13(int line, int pos) { return new TColon(line, pos); }
	Token new14(int line, int pos) { return new TSemicolon(line, pos); }
	Token new15(int line, int pos) { return new TLBracket(line, pos); }
	Token new16(int line, int pos) { return new TRBracket(line, pos); }
	Token new17(int line, int pos) { return new TLBrace(line, pos); }
	Token new18(int line, int pos) { return new TRBrace(line, pos); }
	Token new19(int line, int pos) { return new TLParen(line, pos); }
	Token new2(String text, int line, int pos) { return new TTraditionalComment(text, line, pos); }
	Token new20(int line, int pos) { return new TRParen(line, pos); }
	Token new21(int line, int pos) { return new TComma(line, pos); }
	Token new22(int line, int pos) { return new TDoubleQuote(line, pos); }
	Token new23(int line, int pos) { return new TStar(line, pos); }
	Token new24(int line, int pos) { return new TPlus(line, pos); }
	Token new25(int line, int pos) { return new TMinus(line, pos); }
	Token new26(int line, int pos) { return new TImport(line, pos); }
	Token new27(int line, int pos) { return new TEnable(line, pos); }
	Token new28(int line, int pos) { return new TAssertions(line, pos); }
	Token new29(int line, int pos) { return new TForall(line, pos); }
	Token new3(String text, int line, int pos) { return new TEndOfLineComment(text, line, pos); }
	Token new30(int line, int pos) { return new TPredicate(line, pos); }
	Token new31(int line, int pos) { return new TAssertion(line, pos); }
	Token new32(String text, int line, int pos) { return new TNumber(text, line, pos); }
	Token new33(String text, int line, int pos) { return new TId(text, line, pos); }
	Token new4(int line, int pos) { return new TLess(line, pos); }
	Token new5(int line, int pos) { return new TLessEqual(line, pos); }
	Token new6(int line, int pos) { return new TInstance(line, pos); }
	Token new7(int line, int pos) { return new TGreater(line, pos); }
	Token new8(int line, int pos) { return new TImply(line, pos); }
	Token new9(int line, int pos) { return new TAnd(line, pos); }
	public Token next() throws LexerException, IOException
	{
		while(token == null)
		{
			token = getToken();
			filter();
		}

		Token result = token;
		token = null;
		return result;
	}
	public Token peek() throws LexerException, IOException
	{
		while(token == null)
		{
			token = getToken();
			filter();
		}

		return token;
	}
	private void pushBack(int acceptLength) throws IOException
	{
		int length = text.length();
		for(int i = length - 1; i >= acceptLength; i--)
		{
			eof = false;

			in.unread(text.charAt(i));
		}
	}
	protected void unread(Token token) throws IOException
	{
		String text = token.getText();
		int length = text.length();

		for(int i = length - 1; i >= 0; i--)
		{
			eof = false;

			in.unread(text.charAt(i));
		}

		pos = token.getPos() - 1;
		line = token.getLine() - 1;
	}
}
