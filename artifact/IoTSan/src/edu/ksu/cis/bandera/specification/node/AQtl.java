package edu.ksu.cis.bandera.specification.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.analysis.*;

public final class AQtl extends PQtl
{
	private TForall _forall_;
	private TLBracket _lBracket_;
	private PIds _ids_;
	private PQtlBinding _qtlBinding_;
	private PTypeExp _typeExp_;
	private TRBracket _rBracket_;
	private TDot _dot_;

	public AQtl()
	{
	}
	public AQtl(
		TForall _forall_,
		TLBracket _lBracket_,
		PIds _ids_,
		PQtlBinding _qtlBinding_,
		PTypeExp _typeExp_,
		TRBracket _rBracket_,
		TDot _dot_)
	{
		setForall(_forall_);

		setLBracket(_lBracket_);

		setIds(_ids_);

		setQtlBinding(_qtlBinding_);

		setTypeExp(_typeExp_);

		setRBracket(_rBracket_);

		setDot(_dot_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAQtl(this);
	}
	public Object clone()
	{
		return new AQtl(
			(TForall) cloneNode(_forall_),
			(TLBracket) cloneNode(_lBracket_),
			(PIds) cloneNode(_ids_),
			(PQtlBinding) cloneNode(_qtlBinding_),
			(PTypeExp) cloneNode(_typeExp_),
			(TRBracket) cloneNode(_rBracket_),
			(TDot) cloneNode(_dot_));
	}
	public TDot getDot()
	{
		return _dot_;
	}
	public TForall getForall()
	{
		return _forall_;
	}
	public PIds getIds()
	{
		return _ids_;
	}
	public TLBracket getLBracket()
	{
		return _lBracket_;
	}
	public PQtlBinding getQtlBinding()
	{
		return _qtlBinding_;
	}
	public TRBracket getRBracket()
	{
		return _rBracket_;
	}
	public PTypeExp getTypeExp()
	{
		return _typeExp_;
	}
	void removeChild(Node child)
	{
		if(_forall_ == child)
		{
			_forall_ = null;
			return;
		}

		if(_lBracket_ == child)
		{
			_lBracket_ = null;
			return;
		}

		if(_ids_ == child)
		{
			_ids_ = null;
			return;
		}

		if(_qtlBinding_ == child)
		{
			_qtlBinding_ = null;
			return;
		}

		if(_typeExp_ == child)
		{
			_typeExp_ = null;
			return;
		}

		if(_rBracket_ == child)
		{
			_rBracket_ = null;
			return;
		}

		if(_dot_ == child)
		{
			_dot_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_forall_ == oldChild)
		{
			setForall((TForall) newChild);
			return;
		}

		if(_lBracket_ == oldChild)
		{
			setLBracket((TLBracket) newChild);
			return;
		}

		if(_ids_ == oldChild)
		{
			setIds((PIds) newChild);
			return;
		}

		if(_qtlBinding_ == oldChild)
		{
			setQtlBinding((PQtlBinding) newChild);
			return;
		}

		if(_typeExp_ == oldChild)
		{
			setTypeExp((PTypeExp) newChild);
			return;
		}

		if(_rBracket_ == oldChild)
		{
			setRBracket((TRBracket) newChild);
			return;
		}

		if(_dot_ == oldChild)
		{
			setDot((TDot) newChild);
			return;
		}

	}
	public void setDot(TDot node)
	{
		if(_dot_ != null)
		{
			_dot_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_dot_ = node;
	}
	public void setForall(TForall node)
	{
		if(_forall_ != null)
		{
			_forall_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_forall_ = node;
	}
	public void setIds(PIds node)
	{
		if(_ids_ != null)
		{
			_ids_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_ids_ = node;
	}
	public void setLBracket(TLBracket node)
	{
		if(_lBracket_ != null)
		{
			_lBracket_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_lBracket_ = node;
	}
	public void setQtlBinding(PQtlBinding node)
	{
		if(_qtlBinding_ != null)
		{
			_qtlBinding_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_qtlBinding_ = node;
	}
	public void setRBracket(TRBracket node)
	{
		if(_rBracket_ != null)
		{
			_rBracket_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_rBracket_ = node;
	}
	public void setTypeExp(PTypeExp node)
	{
		if(_typeExp_ != null)
		{
			_typeExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_typeExp_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_forall_)
			+ toString(_lBracket_)
			+ toString(_ids_)
			+ toString(_qtlBinding_)
			+ toString(_typeExp_)
			+ toString(_rBracket_)
			+ toString(_dot_);
	}
}
