package edu.ksu.cis.bandera.specification.analysis;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import edu.ksu.cis.bandera.specification.node.*;

public interface Analysis extends Switch
{
	void caseAAndAndExp(AAndAndExp node);
	void caseAAndBinOp(AAndBinOp node);
	void caseAAndOrExp(AAndOrExp node);
	void caseAArgsArgs(AArgsArgs node);
	void caseAAssert(AAssert node);
	void caseAAssertDef(AAssertDef node);
	void caseAAssertionImport(AAssertionImport node);
	void caseABinaryExp(ABinaryExp node);
	void caseACommaFormatWord(ACommaFormatWord node);
	void caseACommaWord(ACommaWord node);
	void caseAComplementExp(AComplementExp node);
	void caseAComplementUnaryExp(AComplementUnaryExp node);
	void caseADotFormatWord(ADotFormatWord node);
	void caseADotWord(ADotWord node);
	void caseAExactQtlBinding(AExactQtlBinding node);
	void caseAExpWord(AExpWord node);
	void caseAFilterTypeOp(AFilterTypeOp node);
	void caseAFormat(AFormat node);
	void caseAFormatUnit(AFormatUnit node);
	void caseAHoleFormatWord(AHoleFormatWord node);
	void caseAIdArgs(AIdArgs node);
	void caseAIdFormatWord(AIdFormatWord node);
	void caseAIdIds(AIdIds node);
	void caseAIdsIds(AIdsIds node);
	void caseAIdWord(AIdWord node);
	void caseAImplicationExp(AImplicationExp node);
	void caseAImplyBinOp(AImplyBinOp node);
	void caseAImplyImplicationExp(AImplyImplicationExp node);
	void caseAInstanceQtlBinding(AInstanceQtlBinding node);
	void caseANameImportNames(ANameImportNames node);
	void caseANameNames(ANameNames node);
	void caseANamePrimaryTypeExp(ANamePrimaryTypeExp node);
	void caseANamesImportNames(ANamesImportNames node);
	void caseANamesNames(ANamesNames node);
	void caseANumberFormatWord(ANumberFormatWord node);
	void caseANumberWord(ANumberWord node);
	void caseAOnDemandImportName(AOnDemandImportName node);
	void caseAOpTypeExp(AOpTypeExp node);
	void caseAOrBinOp(AOrBinOp node);
	void caseAOrImplicationExp(AOrImplicationExp node);
	void caseAOrOrExp(AOrOrExp node);
	void caseAParenExp(AParenExp node);
	void caseAParenPrimaryExp(AParenPrimaryExp node);
	void caseAParenPrimaryTypeExp(AParenPrimaryTypeExp node);
	void caseAPredicateExp(APredicateExp node);
	void caseAPredicateImport(APredicateImport node);
	void caseAPredicatePrimaryExp(APredicatePrimaryExp node);
	void caseAPrimaryTypeExp(APrimaryTypeExp node);
	void caseAPrimaryUnaryExp(APrimaryUnaryExp node);
	void caseAPropertiesUnit(APropertiesUnit node);
	void caseAQtl(AQtl node);
	void caseAQualifiedName(AQualifiedName node);
	void caseASimpleName(ASimpleName node);
	void caseASpecificImportName(ASpecificImportName node);
	void caseATl(ATl node);
	void caseATlDef(ATlDef node);
	void caseATypeImport(ATypeImport node);
	void caseAUnaryAndExp(AUnaryAndExp node);
	void caseAUnionTypeOp(AUnionTypeOp node);
	void caseEOF(EOF node);
	void caseStart(Start node);
	void caseTAnd(TAnd node);
	void caseTAssertion(TAssertion node);
	void caseTAssertions(TAssertions node);
	void caseTColon(TColon node);
	void caseTComma(TComma node);
	void caseTDocumentationComment(TDocumentationComment node);
	void caseTDot(TDot node);
	void caseTDoubleQuote(TDoubleQuote node);
	void caseTEnable(TEnable node);
	void caseTEndOfLineComment(TEndOfLineComment node);
	void caseTForall(TForall node);
	void caseTGreater(TGreater node);
	void caseTId(TId node);
	void caseTImply(TImply node);
	void caseTImport(TImport node);
	void caseTInstance(TInstance node);
	void caseTLBrace(TLBrace node);
	void caseTLBracket(TLBracket node);
	void caseTLess(TLess node);
	void caseTLessEqual(TLessEqual node);
	void caseTLParen(TLParen node);
	void caseTMinus(TMinus node);
	void caseTNot(TNot node);
	void caseTNumber(TNumber node);
	void caseTOr(TOr node);
	void caseTPlus(TPlus node);
	void caseTPredicate(TPredicate node);
	void caseTRBrace(TRBrace node);
	void caseTRBracket(TRBracket node);
	void caseTRParen(TRParen node);
	void caseTSemicolon(TSemicolon node);
	void caseTStar(TStar node);
	void caseTTraditionalComment(TTraditionalComment node);
	void caseTWhiteSpace(TWhiteSpace node);
	Object getIn(Node node);
	Object getOut(Node node);
	void setIn(Node node, Object in);
	void setOut(Node node, Object out);
}
