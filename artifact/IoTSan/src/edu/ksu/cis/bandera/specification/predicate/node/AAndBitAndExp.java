package edu.ksu.cis.bandera.specification.predicate.node;

/* This file was generated by SableCC (http://www.sablecc.org/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.predicate.analysis.*;

public final class AAndBitAndExp extends PBitAndExp
{
	private PBitAndExp _bitAndExp_;
	private TBitAnd _bitAnd_;
	private PEqExp _eqExp_;

	public AAndBitAndExp()
	{
	}
	public AAndBitAndExp(
		PBitAndExp _bitAndExp_,
		TBitAnd _bitAnd_,
		PEqExp _eqExp_)
	{
		setBitAndExp(_bitAndExp_);

		setBitAnd(_bitAnd_);

		setEqExp(_eqExp_);

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAAndBitAndExp(this);
	}
	public Object clone()
	{
		return new AAndBitAndExp(
			(PBitAndExp) cloneNode(_bitAndExp_),
			(TBitAnd) cloneNode(_bitAnd_),
			(PEqExp) cloneNode(_eqExp_));
	}
	public TBitAnd getBitAnd()
	{
		return _bitAnd_;
	}
	public PBitAndExp getBitAndExp()
	{
		return _bitAndExp_;
	}
	public PEqExp getEqExp()
	{
		return _eqExp_;
	}
	void removeChild(Node child)
	{
		if(_bitAndExp_ == child)
		{
			_bitAndExp_ = null;
			return;
		}

		if(_bitAnd_ == child)
		{
			_bitAnd_ = null;
			return;
		}

		if(_eqExp_ == child)
		{
			_eqExp_ = null;
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_bitAndExp_ == oldChild)
		{
			setBitAndExp((PBitAndExp) newChild);
			return;
		}

		if(_bitAnd_ == oldChild)
		{
			setBitAnd((TBitAnd) newChild);
			return;
		}

		if(_eqExp_ == oldChild)
		{
			setEqExp((PEqExp) newChild);
			return;
		}

	}
	public void setBitAnd(TBitAnd node)
	{
		if(_bitAnd_ != null)
		{
			_bitAnd_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_bitAnd_ = node;
	}
	public void setBitAndExp(PBitAndExp node)
	{
		if(_bitAndExp_ != null)
		{
			_bitAndExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_bitAndExp_ = node;
	}
	public void setEqExp(PEqExp node)
	{
		if(_eqExp_ != null)
		{
			_eqExp_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_eqExp_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_bitAndExp_)
			+ toString(_bitAnd_)
			+ toString(_eqExp_);
	}
}
