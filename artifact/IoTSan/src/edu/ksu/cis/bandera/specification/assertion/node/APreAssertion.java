package edu.ksu.cis.bandera.specification.assertion.node;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Bandera, a Java(TM) analysis and transformation toolkit           *
 * Copyright (C) 1998-2001 SAnToS Laboratories (santos@cis.ksu.edu)  *

 * All rights reserved.                                              *
 *                                                                   *
 * This work was done as a project in the SAnToS Laboratory,         *
 * Department of Computing and Information Sciences, Kansas State    *
 * University, USA (http://www.cis.ksu.edu/santos).                  *
 * It is understood that any modification not identified as such is  *
 * not covered by the preceding statement.                           *
 *                                                                   *
 * This work is free software; you can redistribute it and/or        *
 * modify it under the terms of the GNU Library General Public       *
 * License as published by the Free Software Foundation; either      *
 * version 2 of the License, or (at your option) any later version.  *
 *                                                                   *
 * This work is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 * Library General Public License for more details.                  *
 *                                                                   *
 * You should have received a copy of the GNU Library General Public *
 * License along with this toolkit; if not, write to the             *
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,      *
 * Boston, MA  02111-1307, USA.                                      *
 *                                                                   *
 * Java is a trademark of Sun Microsystems, Inc.                     *
 *                                                                   *
 * To submit a bug report, send a comment, or get the latest news on *
 * this project and other SAnToS projects, please visit the web-site *
 *                http://www.cis.ksu.edu/santos                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

import java.util.*;
import edu.ksu.cis.bandera.specification.assertion.analysis.*;
import edu.ksu.cis.bandera.jjjc.node.*;

public final class APreAssertion extends PAssertion
{
	private TPre _pre_;
	private TId _id_;
	private TColon _colon_;
	private PExp exp;
	private TSemicolon _semicolon_;
	private final LinkedList _comment_ = new TypedLinkedList(new Comment_Cast());

	private class Comment_Cast implements Cast
	{
		public Object cast(Object o)
		{
			PComment node = (PComment) o;

			if((node.parent() != null) &&
				(node.parent() != APreAssertion.this))
			{
				node.parent().removeChild(node);
			}

			if((node.parent() == null) ||
				(node.parent() != APreAssertion.this))
			{
				node.parent(APreAssertion.this);
			}

			return node;
		}
	}
	public APreAssertion()
	{
	}
	public APreAssertion(
		TPre _pre_,
		TId _id_,
		TColon _colon_,
		TSemicolon _semicolon_,
		XPComment _comment_)
	{
		setPre(_pre_);

		setId(_id_);

		setColon(_colon_);

		setSemicolon(_semicolon_);

		if(_comment_ != null)
		{
			while(_comment_ instanceof X1PComment)
			{
				this._comment_.addFirst(((X1PComment) _comment_).getPComment());
				_comment_ = ((X1PComment) _comment_).getXPComment();
			}
			this._comment_.addFirst(((X2PComment) _comment_).getPComment());
		}

	}
	public APreAssertion(
		TPre _pre_,
		TId _id_,
		TColon _colon_,
		TSemicolon _semicolon_,
		List _comment_)
	{
		setPre(_pre_);

		setId(_id_);

		setColon(_colon_);

		setSemicolon(_semicolon_);

		{
			Object temp[] = _comment_.toArray();
			for(int i = 0; i < temp.length; i++)
			{
				this._comment_.add(temp[i]);
			}
		}

	}
	public void apply(Switch sw)
	{
		((Analysis) sw).caseAPreAssertion(this);
	}
	public Object clone()
	{
		return new APreAssertion(
			(TPre) cloneNode(_pre_),
			(TId) cloneNode(_id_),
			(TColon) cloneNode(_colon_),
			(TSemicolon) cloneNode(_semicolon_),
			cloneList(_comment_));
	}
	public TColon getColon()
	{
		return _colon_;
	}
	public LinkedList getComment()
	{
		return _comment_;
	}
/**
 * 
 * @return edu.ksu.cis.bandera.jjjc.node.PExp
 */
public edu.ksu.cis.bandera.jjjc.node.PExp getExp() {
	return exp;
}
	public TId getId()
	{
		return _id_;
	}
	public TPre getPre()
	{
		return _pre_;
	}
	public TSemicolon getSemicolon()
	{
		return _semicolon_;
	}
	void removeChild(Node child)
	{
		if(_pre_ == child)
		{
			_pre_ = null;
			return;
		}

		if(_id_ == child)
		{
			_id_ = null;
			return;
		}

		if(_colon_ == child)
		{
			_colon_ = null;
			return;
		}

		if(_semicolon_ == child)
		{
			_semicolon_ = null;
			return;
		}

		if(_comment_.remove(child))
		{
			return;
		}

	}
	void replaceChild(Node oldChild, Node newChild)
	{
		if(_pre_ == oldChild)
		{
			setPre((TPre) newChild);
			return;
		}

		if(_id_ == oldChild)
		{
			setId((TId) newChild);
			return;
		}

		if(_colon_ == oldChild)
		{
			setColon((TColon) newChild);
			return;
		}

		if(_semicolon_ == oldChild)
		{
			setSemicolon((TSemicolon) newChild);
			return;
		}

		for(ListIterator i = _comment_.listIterator(); i.hasNext();)
		{
			if(i.next() == oldChild)
			{
				if(newChild != null)
				{
					i.set(newChild);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

	}
	public void setColon(TColon node)
	{
		if(_colon_ != null)
		{
			_colon_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_colon_ = node;
	}
	public void setComment(List list)
	{
		Object temp[] = list.toArray();
		for(int i = 0; i < temp.length; i++)
		{
			_comment_.add(temp[i]);
		}
	}
/**
 * 
 * @param newExp edu.ksu.cis.bandera.jjjc.node.PExp
 */
public void setExp(edu.ksu.cis.bandera.jjjc.node.PExp newExp) {
	exp = newExp;
}
	public void setId(TId node)
	{
		if(_id_ != null)
		{
			_id_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_id_ = node;
	}
	public void setPre(TPre node)
	{
		if(_pre_ != null)
		{
			_pre_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_pre_ = node;
	}
	public void setSemicolon(TSemicolon node)
	{
		if(_semicolon_ != null)
		{
			_semicolon_.parent(null);
		}

		if(node != null)
		{
			if(node.parent() != null)
			{
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		_semicolon_ = node;
	}
	public String toString()
	{
		return ""
			+ toString(_pre_)
			+ toString(_id_)
			+ toString(_colon_)
			+ toString(_semicolon_)
			+ toString(_comment_);
	}
}
